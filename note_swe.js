var question = question.concat(
'[개요]- SW공학',
'[개요]- SW공학의 원리',
'[계획단계]- 비용산정',
'[계획단계][비용산정]- 본수산정',
'[계획단계][비용산정]- LOC',
'[계획단계][비용산정]- COCOMO',
'[계획단계][비용산정]- COCOMO II',
'[계획단계][비용산정]- FP',
'[계획단계][FP]- 측정유형',
'[계획단계][FP]- 정통법 사례',
'[계획단계][비용산정]- EVM',
'[계획단계][비용산정]- 델파이 기법',
'[계획단계][비용산정]- 소프트웨어사업 대가산정 가이드',
'[계획단계][공공빅데이터]- 공공빅데이터 분석 사업비',
'[계획단계][공공빅데이터]- 공공빅데이터 업무적용 가이드',
'[계획단계]- 사업수행계획서',
'[계획단계]- BMT',
'[계획단계][BMT]- PoC',
'[계획단계][BMT]- Pilot test',
'[계획단계]- 예비타당성 조사',
'[분석단계]- 요구공학',
'[분석단계]- 요구공학 프로세스',
'[분석단계][요구공학]- SRS',
'[분석단계][요구공학]- 요구사항추적성',
'[분석단계][요구공학]- 요구사항도출',
'[분석단계][요구공학]- 요구사항 수집기법',
'[분석단계][요구사항]- 요구사항 상세화 실무 가이드라인',
'[분석단계]- 기술사양서',
'[분석단계]- 경제성 분석기법',
'[설계단계]- 모듈화',
'[설계단계][모듈화]- 응집도',
'[설계단계][모듈화]- 결합도',
'[설계단계]- 소프트웨어 아키텍처',
'[설계단계]- 소프트웨어 아키텍처 모델',
'[아키텍처]- 데이터 중심형 모델',
'[아키텍처]- 클라이언트-서버 모델',
'[아키텍처]- 계층형 모델',
'[아키텍처]- MVC 모델',
'[아키텍처]- Pipe & Filter',
'[아키텍처]- Batch Process',
'[설계단계][아키텍처 표준]- IEEE 1471',
'[설계단계][아키텍처 표준]- ISO/IEC/IEEE 42010',
'[설계단계][소프트웨어 아키텍처]- 품질속성',
'[설계단계][소프트웨어 아키텍처]- 품질속성 시나리오',
'[설계단계][소프트웨어 아키텍처]- 아키텍처뷰',
'[설계단계][소프트웨어 아키텍처]- 4+1 View',
'[설계단계][소프트웨어 아키텍처]- SEI 3 View',
'[설계단계][소프트웨어 아키텍처]- 아키텍처 스타일',
'[설계단계][소프트웨어 아키텍처]- 아키텍처 평가방법',
'[설계단계][소프트웨어 아키텍처]- SAAM',
'[설계단계][소프트웨어 아키텍처]- ATAM',
'[설계단계][소프트웨어 아키텍처]- CBAM',
'[설계단계][소프트웨어 아키텍처]- ADR',
'[설계단계][소프트웨어 아키텍처]- ARID',
'[설계단계][소프트웨어 아키텍처]- 유틸리티 트리',
'[설계단계][소프트웨어 아키텍처]- 아키텍처 드라이버',
'[설계단계][소프트웨어 아키텍처]- 아키텍처 평가모델',
'[설계단계]SAD',
'[설계단계][SAD]- ADD (Attribute Driven Design)',
'[설계단계]- 객체지향방법론',
'[설계단계][객체지향]- SOLID',
'[설계단계][객체지향]- 인터페이스',
'[설계단계][객체지향]- 추상클래스',
'[설계단계][객체지향]- 다형성',
'[설계단계][객체지향]- Demeter\'s Law',
'[설계단계][객체지향]- 상속,합성 비교',
'[설계단계]- UML ',
'[설계단계]- UML 관계',
'[설계단계][UML]- UML 확장매커니즘',
'[설계단계][UML]- Behavior Diagram',
'[설계단계][UML][Behavior Diagram]- Activity Diagram',
'[설계단계][UML][Behavior Diagram]- Statement Diagram',
'[설계단계][UML][Behavior Diagram]- Usecase Diagram',
'[설계단계][UML][Interaction Diagram]- Sequence Diagram',
'[설계단계][UML][Structure Diagram]- Class Diagram',
'[설계단계]- Usecase Test',
'[설계단계]- 모델기반 테스트',
'[설계단계]- 마이크로서비스 아키텍처(MSA)',
'[설계단계]- Shared Nothing 아키텍쳐',
'[설계단계]- Breadcrumbs',
'[구현단계]- 디자인패턴',
'[구현단계][디자인패턴]- 화이트박스 재사용',
'[구현단계][디자인패턴]- 블랙박스 재사용',
'[구현단계][디자인패턴]- 위임',
'[구현단계][디자인패턴]- 전략패턴',
'[구현단계][디자인패턴]- Observer Pattern',
'[구현단계]- 연산생략기법',
'[구현단계]- 정형기법',
'[구현단계][정형기법]- 정형명세',
'[구현단계][정형기법]- Z 명세',
'[구현단계][정형기법]- Petri-net',
'[구현단계][정형기법]- 상태차트',
'[구현단계][정형기법]- VDM',
'[구현단계][정형기법]- 정형검증',
'[구현단계]- Mccabe 순환복잡도(Cyclomatic Complexity) = 회전복잡도',
'[구현단계][Mccabe 순환복잡도]- Halstead Metrics, 객체지향 Metrics',
'[구현단계]- Spring Framework',
'[구현단계][Spring Framework]- IOC',
'[구현단계]- MISRA-C, MISRA-C++',
'[구현단계]- node.js',
'[구현단계]- Javascript',
'[시험단계]- 테스트 7원칙',
'[시험단계]- 테스트 유형',
'[시험단계]- 테스트 절차',
'[시험단계][테스트]- V-Model',
'[시험단계][태스트]- 단위 테스트',
'[시험단계][테스트]- 통합 테스트',
'[시험단계][테스트]- 시스템 테스트',
'[시험단계][테스트]- 성능 테스트',
'[시험단계][테스트]- TPC',
'[시험단계][테스트]- SPEC',
'[시험단계][테스트]- Little\'s Law',
'[시험단계][테스트]- 인수 테스트',
'[시험단계]- 확인/검증',
'[시험단계]- 정적 테스트',
'[시험단계][정적 테스트]- Peer Review',
'[시험단계][정적 테스트]- Walkthrough',
'[시험단계][정적 테스트]- 인스펙션',
'[시험단계][정적 테스트]- 페이건(Fagan) 인스펙션',
'[시험단계]- 동적 테스트',
'[시험단계]- 명세기반 테스트',
'[시험단계][명세기반]- 동등분할',
'[시험단계][명세기반]- 경계값분석',
'[시험단계][명세기반]- 원인결과그래프',
'[시험단계][명세기반]- Decision Table',
'[시험단계][명세기반]- 상태전이 테스트',
'[시험단계][명세기반]- 페어와이즈',
'[시험단계][명세기반]- 도메인 테스트',
'[시험단계]- 구조기반 테스트',
'[시험단계][구조기반]- 제어흐름 테스트',
'[시험단계][구조기반][제어흐름]- 테스트,코드 커버리지',
'[시험단계][구조기반][제어흐름]- MC/DC',
'[시험단계][구조기반]- 자료흐름 테스트',
'[시험단계]- 경험기반 테스트',
'[시험단계][경험기반]- 탐색적 테스팅',
'[시험단계][경험기반]- 테스트 차터',
'[시험단계]- 테스트 하네스(Test Harness)',
'[시험단계]- 테스트 더블',
'[시험단계]- 테스트 자동화 도구',
'[시험단계]- 정적분석도구',
'[시험단계]- Record and Replay',
'[시험단계]- 테스트 오라클',
'[시험단계]- 회귀 테스트',
'[시험단계]- 리스크기반 테스트(RBT)',
'[시험단계]- 소프트웨어 보안 테스팅',
'[시험단계]- A/B 테스팅',
'[시험단계]- 지각 테스팅',
'[시험단계]- 애자일 테스팅',
'[시험단계]- 뮤테이션 테스트',
'[시험단계]- 비버깅',
'[시험단계]- IAST(Interactive Application Security Testing)',
'[시험단계]- 백투백(back-to-back) 테스트',
'[시험단계]- 스모크(Smoke) 테스트',
'[시험단계]- 새너티(Sanity) 테스트',
'[시험단계]- Cursory Test',
'[시험단계]- 콘콜릭(Concolic) 테스트',
'[시험단계]- 퍼즈(Fuzz) 테스트',
'[시험단계]- Shift-left Testing',
'[시험단계]- TMMi',
'[시험단계]- ISO 29119',
'[시험단계][ISO 29119]- ISO/IEC 33063',
'[시험단계]- ISO/IEC 20246',
'[시험단계]- TPI',
'[시험단계]- TCoE',
'[시험단계]- 테스팅 가이드',
'[시험단계]- 테스트 케이스(IEEE 829)',
'[시험단계]- Agile Test',
'[운영유지보수]- 레만의 원리',
'[운영유지보수]- Code Smell',
'[운영유지보수]- Refactoring',
'[운영유지보수]- 3R',
'[운영유지보수][3R]- 역공학(저작권 측면)',
'[운영유지보수][3R]- Reverse Engineering',
'[운영유지보수][3R]- Re Engineering',
'[운영유지보수][3R]- Re use',
'[운영유지보수]- Anti-Reversing',
'[운영유지보수][Anti-Reversing]- 코드가상화',
'[운영유지보수]- ISO/IEC 14764',
'[운영유지보수][ISO/IEC 14764]- PERT/CPM, CCM, CCPM',
'[운영유지보수][ISO/IEC 14764]- 일정관리',
'[운영유지보수][일정관리]- 3점 산정',
'[운영유지보수][일정관리]- 일정 단축기법',
'[운영유지보수]- CPM',
'[운영유지보수]- CCM',
'[운영유지보수]- Lehman 소프트웨어 변화',
'프로젝트 관리계획서',
'[관리표준][PMBOK]- 통합관리',
'[관리표준][PMBOK]- 범위관리',
'[관리표준][PMBOK]- WBS',
'[관리표준][PMBOK]- Gold Plating',
'[관리표준][PMBOK]- Scope Creep',
'[관리표준][PMBOK]- Resource Leveling',
'[관리표준][PMBOK]- 브룩스 법칙',
'[관리표준][PMBOK]- 원가관리',
'[관리표준][PMBOK]- 품질관리',
'[관리표준][PMBOK]- 품질비용',
'[관리표준][PMBOK]- 품질관리QC7도구',
'[관리표준][PMBOK]- 품질관리신QC7도구',
'[관리표준][PMBOK]- 인적자원관리',
'[관리표준][PMBOK]- 터크만 팀 발달 5단계',
'[관리표준][PMBOK][터크만]- 동기부여이론',
'[관리표준][PMBOK][터크만][동기부여]- 내용이론',
'[관리표준][PMBOK][터크만][동기부여]- 과정이론',
'[관리표준][PMBOK]- 프로젝트 위험',
'[관리표준][PMBOK][위험]- 모의실험',
'[관리표준][PMBOK][위험]- 민감도 분석(Sensitivity Analysis)',
'[관리표준][PMBOK][위험]- 금전적 기대값 분석(Expected Monetary Value Analysis)',
'[관리표준][PMBOK]- 프로젝트 위험관리',
'[관리표준][위험관리]- 위험분석',
'[관리표준][PMBOK]- 조달관리(구매)',
'[관리표준][PMBOK]- 이해관계자관리',
'[관리표준][PMBOK][이해관계자]- 현저성 모델',
'[관리표준][PMBOK][이해관계자]- 갈등관리',
'[관리표준]-ISO 21500',
'[관리표준]- SWEBOK',
'[관리표준]- 요르돈법칙',
'[품질표준]- SW 품질',
'[품질표준]- SW 품질관리',
'[품질표준]- SW 품질보증',
'[품질표준]- SW 품질통제',
'[품질표준]- 품질경영',
'[품질표준][품질경영]- ISO 9001',
'[품질표준]- 품질평가',
'[품질표준][품질평가]- McCall 품질요소',
'[품질평가][제품 품질]- ISO 9126, 25023',
'[품질평가][제품 품질]- ISO 12119',
'[품질평가][제품 품질]- ISO 14598',
'[품질평가][프로세스 품질]- ISO 12207',
'[품질평가][프로세스 품질]- ISO 15504',
'[품질평가][프로세스 품질]- CMMI',
'[품질평가][프로세스 품질]- CMMI V2.0',
'[품질평가][프로세스 품질]- ISO/IEC 33000',
'[프로세스 품질]- ASPICE(Automotive SPICE)',
'[프로세스 품질]- CAR',
'[프로세스 품질]- SP 인증',
'[프로세스 품질]- IEEE 1633',
'[품질표준][품질평가]- ISO 25000',
'[품질표준][품질평가]- ISO 25010',
'[품질표준][품질평가]- GS 인증',
'[품질표준][품질평가]- NEP 인증',
'[품질표준][품질평가]- NET 인증',
'[품질표준][품질평가]- 공개SW컴플라이언스 이슈',
'[품질표준][라이선스]- 프로그램 저작권, 특허권',
'[품질표준][라이선스][특허]- FRAND 특허',
'[품질표준][라이선스]- 지식 재산권',  
'[모델]- SDLC',
'[모델][SDLC]- 폭포수모델(Waterfall)',
'[모델][SDLC]- 프로토타입모델(Prototype) = 원형모델',
'[모델][SDLC]- 나선형 모델(Spiral)',
'[모델][SDLC]- 반복적개발모델 = 점증적개발모델',
'[모델][SDLC]- RAD',
'[모델][SDLC][RAD]- JAD',
'[모델]- 클린룸(Clean Room) 모델',
'[모델][CleanRoom]- 함수적등가성',
'[방법론]- SW 개발 방법론',
'[방법론]- 구조적방법론',
'[방법론][구조적방법론]- V Model',
'[방법론][구조적방법론]- DESS V Model',
'[방법론][구조적방법론]- Multiple V Model',
'[방법론]- W Model',
'[방법론]- COMET',
'[방법론]- 정보공학방법론',
'[방법론][정보공학방법론]- CRUD 매트릭스',
'[방법론]- SW추상화',
'[방법론]- CBD',
'[방법론]- SOA',
'[방법론]- Agile 방법론',
'[방법론][Agile]- xp',
'[방법론][Agile]- Scrum',
'[방법론][Scrum]- Backfill',
'[방법론][Agile]- Burn down Chart',
'[방법론][Agile]- SafeScrum',
'[방법론][Agile]- 회고',
'[방법론][Agile]- CI',
'[방법론][Agile]- CD(Continuous Delivery)',
'[방법론][Agile]- CD(Continuous Deployment',
'[방법론][Agile]- 제품백로그',
'[방법론][Agile]- 사용자스토리',
'[방법론][Agile]- 기술스토리',
'[방법론][Agile]- 스토리 포인트',
'[방법론]- Pair Programming',
'[방법론]- Lean 방법론',
'[방법론][Lean]- Lean UX',
'[방법론]- Kanban 방법론',
'[방법론]- 방법론 테일러링',
'[방법론]- MOM, MOA',
'[방법론]- EIP',
'[방법론]- TDD',
'[방법론]- ATDD',
'[방법론]- BDD',
'[방법론]- DDD',
'[방법론]- AOSE',
'[방법론]- AOP',
'[방법론]- SSPL',
'[방법론][SSPL]- Feature',
'[방법론]- MDA',
'[방법론]- MDD',
'[방법론]- ASD',
'[방법론]- EDA',
'[방법론][Ops]- DevOps',
'[방법론][Ops]- DataOps',
'[방법론][Ops]- GitOps',
'[방법론]- 시각적 분석 (Visual Analytics)',
'[방법론]- 시각화 분석 (Visualization Analysis)',
'[방법론]- 데이터 시각화 (Data Visualization)',
'[방법론]- 임베디드 SW',
'[정책]- SW 진흥법 개정안',
'[정책][SW진흥법]- 하도급금지',
'[방법론]- UX 모델링',
'[방법론][UX]- Design Thinking',
'[방법론][UX]- 페르소나(Persona)',
'Open SEED',
'BPMN(Business Process Model and Notation)',
'블랙보드(BlackBoard) 패턴',
'연동계획(Rolling Wave Planning)',
'SW 사업정보저장소',
'SW 사업 대가선정 가이드 (2019 개정판)',
'옵저버 패턴',
'PMO',
'공공 PMO',
'정보시스템 감리',
'[감리]- PMO, 감리',
'[감리]- 3단계 감리',
'PMBOK 6th 주요개정 내용',
'지식영역별 세부 프로세스 49개',
'분리발주',
'분할발주',
'난독화',
'함수형 언어',
'로우코드',
'민간투자형 SW 사업(PPP)',
'정보시스템 운영 성과관리',
);

var answer = answer.concat(
// [개요]- SW 공학
'# 정의 : 소프트웨어의 개발과 운영, 유지보수, 소멸에 대한 체계적인 접근 방법 (IEEE) <br/>\
- SW 제품 생산, SW 개발,운영,유지보수활동에 프로세스(절차),방법,도구를 적용하여 연구 개발하는 활동 <br/><br/>\
# 특징 : 비가시성, 복잡성, 변경성, 순응성, 복제성, 비마모성 <br/><br/>\
# 배경 : SW 위기 -> 수요에 대한 공급 능력 미비신화, 예산초과 및 일정지연, 품질저하 <br/><br/>\
# 극복방안 <br/>\
- 자동화 도구 : Case, UML, Repository <br/>\
- 품질보증체게 : ITIL, CMMi, SPICE <br/>\
- 공학적접근 : 방법론 <br/>\
- 표준화 : ITA/EA SW Data 표준화 <br/><br/>\
# 구성 : 도구,언어,기법,원리 \
',

// [개요]- SW 공학의 원리 
'# 공학원리 : 정형성과 엄격, 관심사의 분리, 모듈화, 추상화, 변화예측, 일반화, 점진화 \
',

// 노력산정, 비용추정, 비용산정 
'# 정의 : 계획 수립 활동 / 양적, 질적 수준 측정 / 소유자원 / 기간산정<br/>\
- SW의 양적/질적 수준을 측정하여 소유자원 및 기간산정 등을 계획, 수립하는 활동 <br/><br/>\
# 암기 <br/>\
- 하 : 델전 <br/>\
- 상 : LM <br/>\
- 수 : CF <br/><br/>\
- 양 : CD <br/>\
- 양질 : FMH <br/><br/>\
# 산정 방법에 의한 분류(하상수) <br/>\
- 하향식(Top-Down) : 전문가, 과거사례, 유사경함 -> Delphi, 전문가 판단 <br/>\
- 상향식(Bottom-Up) : WBS 기반 코드수, 인원수 산정 -> LOC, M/M <br/>\
- 수학모델 : COCOMO, FP <br/><br/>\
# 산정 기준에 의한 분류(양질) <br/>\
- 양적 규모 방식 : 소스라인 수에 근거 -> COCOMO, Doty 모델 <br/>\
- 양과 질 고려 산정 방식 : FP, McCabe 회전 복잡도, Healstead의 소프트웨어 사이언스 <br/><br/>\
<img src = "./img/비용산정_1.png" style = "max-width:100%; height:auto;">\
',

// 본수산정
'# 정의 : 화면 하나 개발 위해 투입되는 공수를 본이라 칭하여 본수 이용한 비용산정 기법 <br/><br/>\
# 특징 <br/>\
- Bottum-up 방식 <br/>\
- View 제공 PJT 적합 <br/>\
- 소요시간 적음 <br/>\
- 전문가 필요 <br/>\
- 산정자 의존적 <br/>\
- 기능 복잡한 경우 산정결과 부정확 \
',

// LOC
'# 정의 : 프로그램 코딩 Line수 이용한 비용산정 기법 <br/>\
- Line of Code <br/><br/>\
# 특징 <br/>\
- Bottum Up 방식 <br/>\
- 양적 수준 중시 <br/>\
- 측정 용이 <br/>\
- 예측치 이용 <br/>\
- 정확성 떨어지고 추상적 <br/>\
- 델파이 기법 병행 적용 <br/>\
- 개발 50% 이상 진행되어야 예측 가능 <br/><br/>\
# 산정 수식 <br/>\
- 예측치 = (낙관치 + 4*기대치 + 비관치) / 6 \
',

// COCOMO
'# 정의 : Behem에 의해 창시된 구조적 개발 방법론에 적용가능한 LOC 기반 비용산정 모델 <br/>\
- Constructive Cost Model <br/><br/>\
# 특징 <br/>\
- LOC + 계수적용 <br/>\
- Bottum-UP 방식 <br/>\
- 양적 수준 중시 <br/><br/>\
# 유형 <br/>\
1. Basic COCOMO <br/>\
- LOC로 SW개발 노력/비용 추정<br/>\
- 단일값 모형<br/>\
- 스텝수 계산 방식 <br/><br/>\
2. Intermidiate <br/>\
- 프로젝트 형태 <br/>\
- 개발환경 <br/>\
- 개발인력요소 따라 15개 특성치 적용 <br/>\
1) 제품속성 : 신뢰도, 복잡도, DB크기 <br/>\
2) HW 속성 : 응답시간, 성능제약 <br/>\
3) 인적 속성 : 분석가능력, 경험 <br/>\
4) 프로젝트 속성 : 일정, 개발도구, 방법론 <br/><br/>\
3. Detailed <br/>\
- 3계층 비용산정 : 모듈레벨, 서브시스템레벨, 시스템별 산정후 합산 <br/><br/>\
# PJT 유형 <br/>\
- 단순형(Oraganic) <br/>\
- 중간형(Semi-detached) <br/>\
- 임베디드형(Embedded) <br/><br/>\
# 문제점 <br/>\
- OOP,CBD,4GL 등 부적합 <br/>\
- SW제품 전체 대한 승수 계산후 일괄적용 <br/>\
-> Constructive Cost Mdel II 등장 \
',

// COCOMO II
'# 정의 : 객체지향 방법론 SW 규모산정방식, 요구사항에 따른 추가비용 계산, SW 유연성 평가가능 <br/>\
- Constructive Cost Model II <br/><br/>\
# 특징 <br/>\
- PJT 진행 단게별 3가지 모델 제시 <br/>\
- 요구변경 따른 추가비용계산 및 SW 유연성 평가 가능 <br/>\
- 객체지향 적합 <br/>\
- 수학적 기법 <br/>\
- 계수적용 <br/><br/>\
# 유형 <br/>\
- 1단계 : 어플리케이션 구성 모델 <br/>\
- 2단계 : 초기설정모델 <br/>\
- 3단계 : 포스트아키텍처 모델 <br/><br/>\
',

// FP
'# 정의 : ISO 14143 / SW 규모측정 방법 / 사용자관점 / 양,질 <br/>\
- 사용자관점에서 소프트웨어의 양과 질을 동시에 고려한 소프트웨어 규모 측정방법, ISO14143<br/><br/>\
# 특징 : 양적/질적 측면 고려, 수학적 기법, 간이법/정규법, 간이법으로 초기 사업규모 예측가능, 복잡도 산정에 주간 개입 가능 <br/><br/>\
# 구성 <br/>\
1. 데이터 기능 <br/>\
- 기능유형 : ILF, EIF <br/>\
- 복잡도 및 기여도 : DET, RET <br/><br/>\
2. 트랜잭션 기능 <br/>\
- 기능유형 : EI, EO, EQ <br/>\
- 복잡도 및 기여도 : DET, FTR <br/><br/>\
# 개발비 : 보정 개발원가 + 직접경비 + 이윤(25%) <br/><br/>\
# 개발비 산정절차 / 산출물 <br/>\
- 사전준비 : 개발대상 업무 기능 요구사항 규모산정 방법 <br/>\
- 개발대상 SW 기능점수 산정 : 개발대상 SW 기능점수 <br/>\
- 보정전 개발원가 산정 : 보정전 개발원가 <br/>\
- 보정후 개발원가 산정 : 보정후 개발원가 <br/>\
- 직접경비 및 이윤 산정 : 직접경비 이윤 <br/>\
- 소프트웨어 개발비 산정 : 소프트웨어 개발비 <br/><br/>\
# 보정원가 계수 <br/>\
1. 개발 규모 <br/>\
- 규모 보정계수 : 0.4057 x (loge(기능점수) - 7.1978)^2 + 0.8878 <br/>\
-> 500FP 미만시 1.2800, 3,000FP 초과시 1.1530 적용 <br/><br/>\
2. 애플리케이션 복잡도 (연성운보)<br/>\
- 연계복잡성 수준 : 연계 기관당 관리의 복잡성 <br/>\
- 성능요구 수준 : 응답시간 또는 처리율에 대한 사용자 요구수준 <br/>\
- 운영환경 호환성 : 응용SW의 설치 운영 환경의 상이한 정도 <br/>\
- 보안성 수준 : 시큐어코딩, 웹취약점점검, 암호화점검, 개인정보보호 등 요구 수준 <br/><br/>\
<img src = "./img/FP_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/FP_2.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/SWE_1.png" style = "max-width:100%; height:auto;">\
',

// 측정유형
'# 유형 <br/>\
- 개발 프로젝트 : 최초 설치 소프트웨어 기능 측정 <br/>\
- 개선 프로젝트 : 변경 부분 측정 <br/>\
- 어플리케이션 : 설치되어 있는 어플리케이션 베이스라인 <br/><br/>\
# 유형별 조정 기능 점수 <br/>\
<img src = "./img/FP_Type_Point.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 라이지움 87회 1교시 11번\
',
 
// 정통법 사례
'<img src = "./img/정통법사례.png" style = "max-width:100%; height:auto;">\
',

// EVM
'# 정의 : 원가관리기법 / 일정, 비용 / 동일 화폐가치 환산 <br/>\
- 계획대비 실적을 확인하는 기법으로 프로젝트의 일정과 비용이 단위를 동일한 화폐가치로 환산하여 통합관점에서 성과측정을 하고자하는 원가관리 기법 <br/><br/>\
<img src = "./img/EVM.png" style = "max-width:100%; height:auto;">\
',

// 델파이 기법 
'# 정의 : 의견 불일치시 타협통한 중재안 도출하고 조정자에 의해 편견 분위기 배제하여 무기명, 반복 재산정 통한 전문가 집단의 의견합의를 유도하는 방법 \
',

// SW 대가산정 가이드 
'# 정의 : 적정대가 산정 기준 가이드 / SW 사업추진 / 예산,발주,계약 <br/>\
- SW의 기획, 구현, 운영 등 수명주기 전 단계에 대한 사업을 추진함에 있어 예산수립, 사업발주, 계약시 적정대가를 산정하기 위한 기준 제시한 가이드 <br/><br/>\
# 암기 <br/>\
- 소산법 22조 <br/>\
- ISO 12207 <br/>\
- 절차 : 유시모 <br/>\
- 사업유형 : 기구운 <br/>\
기 : I,IB,EI,I,보 <br/>\
구 <br/>\
운 : 유운고S상재기관-가 <br/>\
컨-유형 : 주전취종개 <br/>\
지-유형 : 업정위사인기 <br/>\
가-유형 : 운개지장 <br/>\
측정요소 : 기특역 <br/><br/>\
# 배경 : 2012.02. SW 산업 진흥법 26조 개정으로 사업대가가 민간 자율로 결정되도록 유도하기 위함 <br/><br/>\
# 근거 : 소산법 22조(소프트웨어사업 대가 지급) <br/><br/>\
# 특징 : ISO 12207 기반 <br/><br/>\
# 절차 : 사업유형식별 > 대가산정 시점식별 > 대가산정모형 선정 <br/><br/>\
# 사업유형 <br/>\
1. 기획단계<br/>\
- ISP(컨지수) <br/>\
- ISP/BPR(투) <br/>\
- EA/ITA(투) <br/>\
- ISMP(투) <br/>\
- 보안커설팅(투) <br/>\
- 구현단계 (SW개발비(투,기)) <br/>\
2. 운영단계 (유운고S상재지관-가) <br/>\
- 지관리(요율)<br/>\
- 운영(투)<br/>\
- 운영/유지관리(고정비/변동비)<br/>\
- SLA기반 유지관리/운영(SLA)<br/>\
- 사용 SW유지관리비(요율)<br/>\
- 소프트웨어 재개발비(재개발비+이윤)<br/>\
- 보안지속서비스비(요율) <br/>\
- 보안관제서비스비(투)<br/>\
- 가치 기반 ITO서비스 유지관리 및 운영비(민간부분만 포함)<br/><br/>\
# 컨설팅지수 방식 의한 ISP 수립비 : 투입공수 파악 어려운 경우, 업무 난이도 의존적 <br/>\
- 업무범위 설정 <br/>\
- 업무별 가중치 계산 (by 업무별 가중치 표) <br/>\
- 업무별 난이도 계산 (by 난이도표) <br/>\
- 컨설팅 지수 계산 : 컨설팅지수 = 가중치 * 난이도 <br/>\
- 직접경비 <br/>\
- ISP 수립비 계산 : ISP 수립비 = 공수 * 컨설팅지수 ^ 0.95 + 천만원 + 직접경비 <br/><br/>\
# 투입공수 방식에 의한 ISP 수립비 : 컨설팅 지수로 산정 불가하 대형 사업, 투입공수 산정 가능한 경우, 컨설턴트 수준 의존적, 사업 예산 및 예정 가격 산정 용도로만 활용 <br/>\
- 사전 준비 : 범위 확정, 업무별 요구사항 결정 <br/>\
- 컨설턴트 등급 결정(by 컨설팅 특성) <br/>\
- 컨설팅 공수 계산 (by 업무 범위, 요구사항) <br/>\
- 컨설턴트 직접 인건비(=등급별고수 * 노임단가) <br/>\
- 제경로 : 직접인건비 * (110 ~ 120) 및 기술료((직접인건비 + 제경비) * 20 ~ 40 %) <br/>\
- 직접경비 계산 <br/>\
- ISP 컨설팅 대가( = 직접인건비 + 제경료 + 기술료 + 직접경비) <br/><br/>\
# 2016 개정 사항 <br/>\
- 상용 SW 유지관리 요율 13% -> 15% 상향 <br/>\
- 정보보호대가 기준 추가 : 정보보호 컨설팅, 보안지속서비스비(최초공급가*요율)<br/>\
- 보안관제 서비스비(투-직제기경)<br/>\
- SW 사업 구축단계 기능점수 측정 사례 추가 : 단위 프로세스, 식별권과 사례, 데이터 기능 식별 사례, 트랜젝션 기능 식별 사례 <br/>\
- 기타 : 용어설명 보완 <br/><br/>\
# 정보보안컨설팅 유형 <br/>\
- 주요 정보통신 기반시설 취약점 분석/평가 <br/>\
- 전자금융~ <br/>\
- 취약점 진단 및 모의 해킹 <br/>\
- 종합정보보호 컨설팅 <br/>\
- 개발 보안 컨설팅 <br/>\
- ISMS <br/>\
- ISO/IEC 27001 <br/>\
- PIMS <br/>\
- PIA <br/><br/>\
# 보안지속 서비스 유형 : 업정위사인기 -> 보안업데이트 , 보안정책관리, 위협 및 사고 분석, 보안 인증 효력 유지, 보안기술자문 <br/><br/>\
# 가치기반 ITO 대가산정 <br/>\
- 측정요소 : 기본규모, 특성규모, 역량규모 <br/>\
- 유형 : 운영관리(시간당) <br/>\
- 개선관리 : ITO기능점수 단가 <br/>\
- 지원관리(노임) <br/>\
- 장애관리 (선택)(시간당)\
',

// 공공빅데이터 분석 사업비
'# 정의 : 데이터 민간 제공 위한 정부 3.0 서비스 <br/>\
- 정부기관의 공공데이터와 인터넷, 민간의 다양한 데이터를 융합하고 분석하여 맞춤형 공공서비스를 제공하기 위한 정부 3.0 서비스 <br/><br/>\
# 구성 <br/>\
- 개발원가 : 직접인건비(보정계수적용) + 제경비 + 기술료 <br/>\
- 직접경비 : 데이터 구매료 등 <br/><br/>\
# 절차 <br/>\
- 사전준비 <br/>\
- 투입공수 산정 <br/>\
- 보정계수 산정 <br/>\
- 수행율 설정 <br/>\
- 보정후 소요비용 산정 <br/>\
- 직접경비 산정 <br/>\
- 분석사업비 산정 \
',

// 공공빅데이터 업무적용 가이드
'# 정의 : 공공기관 빅데이터 추진 가이드 <br/>\
- 공공기관의 빅데이터 접근용이성을 제고하고 원활하게 추진할 수 있도록 작성된 가이드 <br/><br/>\
# 구성 <br/>\
- 사전준비 <br/>\
- 사업추진 <br/>\
- 활용 및 분석 모델 고도화 \
',

// 사업수행계획서
'# 정의 : 프로젝트를 계획하기 위해 작성하는 문서/산출물 <br/><br/>\
# 구성 <br/>\
1. 사업개요 : 사업명, 기간, 목표, 추진전략 <br/>\
2. 사업범위 : 경영평가, DB, 정보 NW, 계량평가, 검증 NW <br/>\
3. 도입제품내역 <br/>\
4. 시스템구축내역 : 목표 Sys 구성도, 업무흐름도, 구축전략 <br/>\
5. 사업추진체계 : 추진체계, 수행조직 및 업무 분장, 참여인력 총괄표, 월별 인력투입 계획 <br/>\
6. 일정 계획 <br/>\
7. 산출물 제공 계획 <br/>\
8. 품질 보증 계획 <br/>\
9. 보고 및 검토 계획 <br/>\
10. 보안대책 <br/>\
11. 교육 계획 <br/>\
12. 유지보수 계획 \
',

// BMT 
'# 정의 : 일반적인 성능 테스트와는 달리 비교 대상을 두고 하드웨어나 소프트웨어의 성능을 비교 분석하여 평가하는 최적 제품 선정 위한 방법 <br/><br/>\
# 절차 <br/>\
- REP, 참여업체 접수 <br/>\
- 평가항목, 방법선정 <br/>\
- 수행 <br/>\
- 성능분석평가 <br/>\
- 최적제품선정 \
',

// POC
'# 정의 : Proof of Concept <br/>\
- 어떤 프로그램을 제작할 때 그 프로그램의 컨셉이 기술적으로 실현가능한 것인지 검증하는 방법 <br/><br/>\
# 특징 <br/>\
- 실존 비교 대상 이용 HW, SW 비교 분석 평가 <br/><br/>\
# 절차 <br/>\
- 일정계획 <br/>\
- PoC 요청수행 <br/>\
- 결과분석, 평가 <br/>\
- 도입, 생산의사 결정 \
',

// Pilot test 
'# 정의 : 운영환경과 유사한 시험환경에서 시스템을 부분적으로 사용하여 각 부분적 시스템이 어느 정도 까지 견딜 수 있는지를 확인하는 시험 <br/><br/>\
# 절차 <br/>\
- 일정계획 <br/>\
- Pilot 수행 <br/>\
- 결과분석,평가 <br/>\
- 서비스런칭 의사결정 \
',

// 예비타당성 조사
'# 정의 : 국가 재정법 제38조 및 같은 법 시행령 제13조의 규정에 따라 대규모 신규 사업에 대한 편성 및 기금 운용 계획을 수립하기 위하여 기획재정부장관 주관으로 실시하는 사전적인 타당성 검증, 평가 제도 <br/><br/>\
# 필요성 <br/>\
- 경제적 측면 : 예산낭비 최소화 <br/>\
- 기술적 측면 : 사업 리스크 완화, 사업 취소 방지 <br/>\
- 정책적 측면 : 사업의 우선순위 <br/><br/>\
# 조사 대상 사업 <br/>\
- 사업비 규모 : 총사업비 500억원 이상, 국가의 재정지원 규모 300억원 이상 신규사업 <br/>\
- 정보화 사업대상 : 국가정보화 기본법 15-1 <br/>\
- 신규사업 : 타당성 조사비, 설계비등 국고지원이 없었던 사업 <br/><br/>\
# 절차 <br/>\
<img src = "./img/PreFeasibility.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 선정기준, 수행흐름도<br/>\
<img src = "./img/PreFeasibilityFlow.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 문제점 <br/>\
- 제도적 : 사업선정, 규모변경, 평가 <br/>\
- 현행이슈 : 기술성 평가 연계, 조사대상 사업 확대(강화), 낙후지역 평가 반영 상향(25~30% Up) <br/><br/>\
# 개선방향 <br/>\
- 사업계획적정성 검토의 법적근거 마련 : 사업계획 적정성 검토제도 활용<br/>\
- 대상 기준금액의 변경 논의 : 합리적 의사결정<br/>\
- 사후 평가제도 도입 : 조사기관 독립성 <br/><br/>\
* 116회 2교시 4번\
',
  
// 요구공학
'# 정의 : SW 사용자의 기능적/비기능적 요구사항을 체계적으로 수집,추출,분석,명세화,검증,변경관리하는 절차를 수행하는 공학기법 <br/><br/>\
# 특징 <br/>\
- 추적성 제공 : 요구사항 추적표, 단계적 산출물 추적하여 관리 <br/>\
- 범위기준선 제공 : 범위 정의, WBS 작성하여 기준선 제공 <br/>\
- 일정 및 원가 영향 : 일정, 원가, 예산 산정 기준 <br/>\
- 가시화 제공 : 요구사항 명세서, 범위 기술서를 작성하는 입력물로 가시화 제공 <br/>\
- 다양한 도출기법 : 인터뷰, 포커스 그룹, 심층 워크샵 <br/><br/>\
# 요구사항 종류 <br/>\
- 기능 : 기능, 자료, IF, 사용자 <br/>\
- 비기능 : 자원, 성능, 보안, 품질<br/><br/>\
# 프레임워크 (SWEBOK) : 추분명검변<br/>\
- 추출 : 요구사항 식별,수집,구체화 / 인터뷰, 브레인스토밍 <br/>\
- 분석 : 도메인/행위 분석, 구조화 / 시스템 모델(UML, ERD, 시나리오)<br/>\
- 명세 : 수행될 기능 정확히 기술 / SRS <br/>\
- 검증 : 합의된 요구사항 검토 및 증명 / 요구사항 문서, V&V, 리뷰, 인스펙션 <br/>\
- 변경관리 : 협상, 기준선, 변경관리, 확인(V&V) <br/><br/>\
# CMMi <br/>\
- 요구사항 개발 : 요구사항 추출, 분석, 병세화, 검증 <br/>\
- 요구사항 관리 : 변경관리, 협상, 기준선 관리 <br/><br/>\
<img src = "./img/요구공학.png" style = "max-width:100%; height:auto;">\
',
  
// 요구공학 프로세스
'<img src = "./img/RE_Overview.png" style = "max-width:100%; height:auto;">\
',

// SRS
'# 정의 : 요구사항 도출 및 분석 결과를 명세화한 공식 문서 <br/><br/>\
# 원칙 <br/>\
- Specific <br/>\
- Measurable <br/>\
- Attainable (기술적 타당성) <br/>\
- Realizable <br/>\
- Traceable <br/><br/>\
# 평가기준(TTA 표준) : 완정명일검수추이 <br/>\
- 완전성 : 모두 포함<br/>\
- 정확성 <br/>\
- 명확성 : 하나의 의미만<br/>\
- 일관성 : 명세간 상호모순<br/>\
- 검증가능성 : 확인 가능<br/>\
- 수정용이성 : 쉽게 수정<br/>\
- 추적성 : 상호참조<br/>\
- 이해가능성 <br/><br/>\
# 구성요소 (아화요내중) <br/>\
- ID / GA-001 <br/>\
- 화면명 / 전광판 프로그램 <br/>\
- 요구사항명 / 환자 대기 전광판 구현 <br/>\
- 내용 / 접수 부서별 대기표 <br/>\
- 중요도 / 상 <br/>\
- 부서/작성자 / 개발팀 <br/>\
- 날짜 / 11/15 <br/>\
- 진행사항 / 검토예정 <br/>\
- 버전명 / 0.1.1 <br/>\
- 기타 / 기능 <br/><br/>\
# 활동 개념도 <br/>\
<img src = "./img/SRS_GuideLine.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 목차 예시 <br/>\
1. 개요 <br/>\
2. 전체설명 <br/>\
3. 환경 <br/>\
4. 외부인터페이스요구사항 <br/>\
5. 성능 요구사항 <br/>\
6. 비기능 요구사항 <br/>\
7. 기능 요구사항\
',

// 요구사항추적성 
'# 정의 : 시스템 내 서로 다른 단계의 요구사항들 사이에 관계를 제공하는 방법 <br/><br/>\
# 유형 <br/>\
- 추적 매트릭스 : 수평추적성, 수직추적성 / 가로 : Entity <br/>\
- 전방향추적성 : 다음단계체크, V모델 <br/>\
- 후방향추적성 : 앞단계로, 결함원인 추적 \
',

// 요구사항도출 
'# 정의 : 요구,제약사항 파악 활동 <br/>\
- 문제의 해결 또는 목적 달성을 위하여 사용자에 의해 요구되거나, 표준이나 명세등을 만족하기 위하여 시스템이 가져야 하는 서비스 또는 제약사항(명시적,묵시적)을 파악하기 위한 활동 <br/><br/>\
# 기법 : 요구사항의 크기/복잡도, 도메인, 포함된 인원으로 기법 선정 <br/>\
- 인터뷰 : Analyst driven <br/>\
- 설문 : Analyst-Observer driven <br/>\
- 브레인스토밍 : Analyst-Facilitator driven <br/>\
- 관찰 : Analyst-Observer driven \
',
  
// 요구사항 수집기법
'- 데이터 수집 : 인터뷰, 브레인스토밍 <br/>\
- 데이터 분석 : 문서 분석 <br/>\
- 데이터 표현 : 마인드 매핑, 친화도 <br/>\
- 의사결정 : 다기준 의사결정 분석, 투표 <br/>\
- 대인관계, 팀 스킬 : 관찰, 촉진 \
',
 
// 요구사항 상세화 실무 가이드라인
'# 정의 : 사업부실, 품질저하 현실 고려한 사업추진 준비 단계부터 이해관계자들을 파악하여 범위와 요구사항을 명확하게 도출하기 위한 목적으로 달성된 가이드라인 <br/><br/>\
# 근거 <br/>\
- 소프트웨어산업진흥법 제20조 제3항 : 국가기관 등의 소프트웨어사업 계약 <br/>\
- ISO/IEC 14143(FP) : FSM(Functional Size Measurement) <br/><br/>\
# 필요성 <br/>\
- 국내공공 SW제안서 작성수준 <br/>\
- 제안요청서 명확화에 대한 요구 <br/>\
- 불명확한 요구사항이 업계 존폐에 영향 <br/>\
- SW 선진화 기반 마련 <br/><br/>\
# 변경 사항 <br/>\
<img src = "./img/SRS_Specefication.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 대상 사업 <br/>\
- 단계별 : 기획, 구현, 운영, 기타 <br/>\
- 사업유형별 : 컨설팅, 개발, 유지관리, 공사 <br/><br/>\
# 요구사항 명세 도출 과정 <br/>\
<img src = "./img/SRS_Extract.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 요구사항 분류 <br/>\
<img src = "./img/SRS_Type.png" style = "max-width:100%; height:auto;"><br/><br/>\
* KPC 93회 관리 2교시 5번\
',
 
// 기술사양서 
'# 정의 : 운용상 특정한 기능이 있는 품목에 대한 실질적 설계의 개발과 생산 과정을 위하여 기초가 되는 기술적인 소요를 적절한 용어로 상술한 문서 <br/><br/>\
# 구성요소 <br/>\
- 구매와 관련된 제반 사항 공유 <br/>\
- 용역 발주시 환경, 제약조건 명시 <br/>\
- 구매제품 목록 및 상세규격 제시 <br/>\
- 제품의 검수 및 인도조건 기준 <br/><br/>\
* 120회 응용 2교시 3번\
',
  
// 경제성 분석 기법
'# 정의 : 규모, 경험, 범위 <br/>\
- 비용과 편익을 측정하고 이에 따라 경제성 수익을 계산함으로써 그 타당성 여부를 결정하는 분석방식 <br/><br/>\
# 유형 <br/>\
1. 타당성 분석 <br/>\
- BCR(Benefit Cost Ratio) : 비용 편익 비율 (수익/비율) <br/>\
- PP(Paybak Period) : 자본 회수 기간 <br/>\
- IRR(Internal Rate of Return) : 내부 수익율, 시장 이자율보다 높아야 함 <br/>\
- NPV(Net Present Value) : 순 현재 가치, 0보다 크면 투자 가치 있음 <br/><br/>\
2. 효율성 분석 <br/>\
- TCO(Total Cost of Ownership) : 총 소요비용 <br/><br/>\
3. 효과성 분석 <br/>\
- ROI(Return On Invetment) : 투자 수익율, 순이익 / 투자자본 <br/>\
- BSC(Balence Score Card) : 재무, 고객, 내부프로세스, 학습과정\
',

// 모듈화
'# 정의 : SW 설계, 구현 기법 / 기능 분할 / 추상화 / 성능 / 유지보수 <br/>\
- SW 개발에 있어 기능을 분할하고 추상화하여 소프트웨어의 성능을 향상시키고 유지보수를 효과적으로 하기 위한 SW 설계 및 구현 기법<br/><br/>\
# 암기 <br/>\
- 설계 : 모컴서 <br/>\
- 구현 : 메전인컴펑 <br/><br/>\
- 전자조달 중 전자입찰 효과성 -> 재사용 효과 11억 <br/><br/>\
# 기법 <br/>\
1. 설계 : 모컴서 <br/>\
- module : function <br/>\
- 컴포넌트 : 바이너리 형태 <br/>\
- 서비스 : 컴포넌트보다 Loosely-coupled <br/>\
2. 구현 : 메전인컴펑 <br/>\
- Macro : 전처리기가 코드로 대체, 함수 호출 위치 함수 처리문장 삽입 컴파일, 너무 길면 함수와 동일, 속도향상, 파일 크기 증가  Ex) #define SQUARE(X)(X*X)) <br/>\
- Inline : 컴파일러 코드 복사, 프리프로세서 정의된 문자열 치환, 번역시간 내부코드 생성,간결,쉬움,처리시간 증가 Ex) Inline int max (arg1,arg2){...}<br/>\
- Function : 특정 작업수행 프로그램 부분단위, Call 이름 가짐, 간단한 문자열, 메모리사용 증가 Ex) void func(arg1,arg2,...)<br/><br/>\
# 임베디드 환경의 모듈화 <br/>\
- 실행시간 최적화 : 인라인 함수 사용, 간접 함수 호출, 적절 전역변수 사용 <br/>\
- 코드크기 최적화 : 표준 LibX, 스택사용 줄이기 <br/><br/>\
<img src = "./img/모듈화_1.png" style = "max-width:100%; height:auto;">\
',

// [모듈화]- 응집도 
'# 정의 : Cohesion <br/>\
- 하나의 모듈 내부 처리 요소들간에 기능적 연관도를 측정하는 척도 <br/><br/>\
# 암기 : 우논시절통순기 <br/><br/>\
# 유형 : 응집도는 높을수록 좋음 <br/>\
- 우연 : 목적없이 여러 기능을 한 모듈로 구성(낮음) <br/>\
- 논리 : 동일범주의 기능을 한 모듈로 구성 (switch case a:b:)<br/>\
- 시간 : 동일시점의 기능을 한 모듈로 구성 (init()) <br/>\
- 절차 : 각 기능이 순차적 수행되는 모듈 (init() look() end()) <br/>\
- 통신 : 각 기능이 동일 입출력 모듈 사용 (A(a) B(a)) <br/>\
- 순차 : 전 단계의 결과값을 입력으로 사용 (t=A(a), B(t)) <br/>\
- 기능 : 단일 기능만 수행하는 모듈 (높음) <br/>\
',

// [모듈화]- 결합도 
'# 정의 : Coupling <br/>\
- 소프트웨어 구조에서 모듈간 연관성을 측정하는 척도 <br/><br/>\
# 암기 : 자스제외공내 <br/><br/>\
# 유형 : 결합도는 낮을 수록 좋음 <br/>\
- 자료 : 모듈간 단순 매개변수 전달 (낮음) (void loca(int a);) <br/>\
- 스탬프 : 모듈간 자료구조 전달 (funtion(struct A))) <br/>\
- 제어 : 컨트롤 데이터를 매개변수로 사용 (if(a==1)) <br/>\
- 외부 : 모듈이 외부자료 참조 (#include a.pc) <br/>\
- 공유 : 모듈이 전역변수 참조 (static int a)<br/>\
- 내용 : 다른 모듈의 내용 참조 (goto A) (높음) <br/><br/>\
<img src = "./img/Coupling_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/Coupling_2.png" style = "max-width:100%; height:auto;">\
',

// 소프트웨어 아키텍처
'# 정의 : 시스템 기본 구조 (ISO/IEC 42010:2007) / 컴포넌트 / 환경 / 설계 개선 원칙 <br/>\
- 컴포넌트와 컴포넌트 상호간 그리고 환경과의 관계, 설계와 개선시 지켜야 하는 원칙을 포함하는 시스템의 기본적인 구조 (ISO/IEC 42010 : 20007) <br/>\
- 소프트웨어 구성요소와 그들이 지니고 있는 특성중에 외부에 드러나는 특성, 그리고 구성요소들의 관계를 표현하는 시스템의 구조나 구조체 (SW 이론과 실체) <br/>\
- SW 컴포넌트와 외부로 나타나는 컴포넌트 간 상호관계구조를 설계/전개위한 방법 <br/><br/>\
# 암기 <br/>\
- ISO/IEC 42010 : 2007 (IEEE 1471)<br/>\
- 구성 : CPR <br/><br/>\
- 분석 : 요검 > 중속 > 시나 <br/>\
- 설계 : 아키요 > 실체 > 명세 <br/>\
- 검증 : 아키이해 > 분석 > 검증 <br/><br/>\
10만라인, 다양기술, 10억 <br/><br/>\
# 구성 : Component, Relation, Principle <br/><br/>\
# 특징 <br/>\
- 비즈니스 : 변화 민첩성, 비용절감, 표준화 <br/>\
- 기술 : Communication, Complexity, Aspect 모형 <br/><br/>\
# 목적 : 이해관계자 관점, 관심, SW 재사용성, 유지보수성 <br/><br/>\
# 구성요소 : AD(Arch Doc), 이해관계자_관심사, View&View Point <br/><br/>\
# 설계 방법론 <br/>\
- ABD(Arch Based Design) : 시나리오 기반 방법론 <br/>\
- ADD(Attribute Driven Design) : Prj 라인 기반 방법론 <br/><br/>\
# 적용 기준 <br/>\
- SW 규모 : LOC 10만 라인 이상 <br/>\
- SW 복잡도 : 다양한 기술 적용 <br/>\
- 기간 및 비용 : 10억 이상의 프로젝트 <br/><br/>\
# 구축 절차 : 요참모프배 <br/>\
- 요구사항정의 : 품질속성 시나리오 작성 <br/>\
- 참조아키텍처 수립 : SP, TRM <br/>\
- 모델링 : 뷰,패턴 / 스타일, FW, 모델링, 아키평가 <br/>\
- 프로토타이핑 : 유즈케이스 단위 설계, 컴포넌트 단위 설계, 기술 이슈 설계, 구현, 프로토타이핑, 검토 <br/>\
- 배포 : 아키모델 구조화, 프모델 구조화, 아키 문서화, 배포 <br/><br/>\
# 설계 절차 : 분석 > 설계 > 검증 <br/>\
1. 분석 <br/>\
- 요구사항 검토 : 비즈니스 목표, 환경 이해 <br/>\
- 중요성 식별 : 기능/비기능 요구 식별 <br/>\
- 시나리오 작성 : 시나리오 도출/정합, 우선순위화, 정제 <br/>\
2. 설계 <br/>\
- 아키요구검토 : 아키요구, 기능요구확인, 아키드라이버 식별 <br/>\
- 아키텍처 실체화 : 아키패턴/택틱선정, 모듈분할/책임할당, 아키뷰 작성 <br/>\
- 아키텍처 정제 및 명세화 : 인터페이스 모듈 정제, 아키 검토 및 반복 <br/>\
3. 검증 <br/>\
- 아키텍처 이해 : 활동/역할, 비즈/아키목표, 확정 아키소개 <br/>\
- 아키텍처 분석 : 아키접근방식 식별, 품질 속성 시나리오 작성, 시나/아키 상세분석 <br/>\
- 아키텍처 검증 : 품속시나 검증, 아키접근방법 검증, 검증결과 발표 및 문서화 \
',
  
// 소프트웨어 아키텍처 모델 
'# 정의 : 아키텍처 설계의 해법 제시 <br/>\
- 프로그램/System의 컴포넌트, 컴포넌트 간의 상호 관계의 구조이며, 이들을 설계하고 전개하기 위한 지침과 원리 <br/><br/>\
# 주요 유형 <br/><br/>\
<img src = "./img/ArchitectureModel.png" style = "max-width:100%; height:auto;"><br/>\
- 데이터 중심 : 칠판형, 저장소형 <br/>\
- 데이터 흐름 : Batch Sequence, Pipes and Filters <br/>\
- 가상머신 : 번역기, 규칙기반 <br/>\
- 호출과 리턴 : 주 프로그램과 서브루틴, RPC, Layered <br/><br/>\
* 120회 관리 3교시 5번\
* 116회 관리 4교시 4번\
',
  
// 데이터 중심형 모델
'# 개념 : Repository, Data <br/>\
- 서브시스템이 단일 중앙저장소의 자료를 접근하고 변경하는 모델 <br/><br/>\
# 모델구조 <br/>\
<img src = "./img/DataCentralized.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 특징 <br/>\
- 장점 : 대용량 데이터 공유, 독립적 동작 및 통합 용이 <br/>\
- 단점 : 병목현상 <br/>\
- 사례 : 급여관리 시스템, 은행업무 시스템 <br/><br/>\
* 116회 4교시 4번\
',
  
// 클라이언트 서버 모델
'# 개념 : 네트워크를 이용하는 분산시스템 모델의 형태로 데이터와 처리기능을 클라이언트와 서버에 분할하여 사용하는 모델 <br/><br/>\
# 모델구조 <br/>\
<img src = "./img/ClientServer.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 특징 <br/>\
- 장점 : 정보들이 분산되어 유지와 관리되는 인터넷 환경에 적합, 정보의 갱신과 수정이 용이 <br/>\
- 단점 : 중앙집중적인 통합관리가 어려움 <br/>\
- 사례 : 이메일, 문서공유, 온라인 App <br/><br/>\
* 116회 4교시 4번\
',

// 계층 모델
'# 개념 : 각 서브 시스템이 하나의 계층이 되어 하위계층이 제공하는 서비스를 상위계층의 서브시스템이 사용하는 모델구조 <br/><br/>\
# 모델구조 <br/>\
<img src = "./img/HireachyArcitecture.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 특징 <br/>\
- 장점 : Lossely Coupled, 모듈 재사용성, 유지보수성, 이식성 <br/>\
- 단점 : 성능저하, 계층별 분리 따른 설계수정 발생 <br/>\
- 사례 : OSI7 Layer, 가상머신 <br/><br/>\
* 116회 4교시 4번\
',
  
// MVC 모델 
'# 개념 : 시스템을 Model, View, Controller 3가지 영역으로 구분, 각 영역을 독립적으로 구현하고 변경할 수 있게 구성하는 구조 <br/><br/>\
# 모델구조 <br/>\
<img src = "./img/MVC.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 특징 <br/>\
- 장점 : 비즈니스/인터페이스 로직 분리, 확장성, 표준화, 공동작업/유지보수 용이 <br/>\
- 단점 : 개발자간의 협력필요, 복잡성 증가, 성능저하 <br/>\
- 사례 : 웹개발 서비스, IOS Application 서비스 <br/><br/>\
* 116회 4교시 4번\
',
 
// Pipe&Filter Model
'# 정의 : 프로세스뷰 기반 아키텍처 다이어그램 <br/>\
- 연속 컴포넌트들에 의한 데이터의 점진적 변형 구조 <br/><br/>\
# 특징 <br/>\
- 파이프 : 필터간 단순한 데이터 이동 <br/>\
- 필터 : 데이터 스트림 변환기 <br/><br/>\
<img src = "./img/PipeFilter.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 120회 관리 3교시 5번\
',
 
// Batch Process Model
'# 정의 : 컴포넌트들이 독립적인 프로그램으로 구성 <br/>\
- 한 컴포넌트가 수행 완료후 다음 컴포넌트 수행하여 전통적 데이터 처리 응용분야에 사용되는 아키텍처 모델 <br/><br/>\
<img src = "./img/BatchProcess.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 120회 관리 3교시 5번\
',
 
// IEEE 1471
'# 정의 : SA가 표현해야 하는 내용, 관계정의 표준 프레임워크 IEEE 1471 <br/>\
- SW 집약적인 시스템에서 아키텍처가 표현해야 하는 내용 및 이들간의 관계를 제공하는 아키텍처 명세를 위한 표준 메타 모델 <br/><br/>\
# 구성 <br/>\
- Mission <br/>\
- Environment <br/>\
- System <br/>\
- Stakeholder <br/>\
- Concern <br/>\
- Viewpoint <br/>\
- View <br/>\
- Library Viewpoint <br/>\
- Architecture Description <br/>\
- Rational <br/>\
- Model\
',

// ISO/IEC/IEEE 42010
'# 정의 : 소프트웨어 아키텍처 표준 정립 <br/>\
- 소프트웨어 집약적 시스템의 아키텍처 기술 요소와 행위를 표준화하여 다양한 소프트웨어를 설계 및 활용할 수 있게 하고, 이해관계자들이 의사소통이 용이하도록 만든 표준 메타 모델 <br/><br/>\
# 개념도 <br/>\
<img src = "./img/ISOIECIEEE42010Model.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 채택 동향 <br/>\
- 최초 표준 : IEEE Std 1471:2000 <br/>\
- ISO 채택 : ISO/IEC 42010:2007 승인 <br/>\
- 최종승인 : ISO/IEC/IEEE 42010:2011 2가지 표준 모두 수용함 <br/><br/>\
# 중요성 <br/>\
- 표준화 : 아키텍처와 관련된 용어 및 개념 통일 <br/>\
- 중립성 : 모델링 언어, 개발 상위 레벨에서 표현 <br/>\
- 의사소통 : 요구사항과 설계의 차이를 개선, 이해관계자 관점 표현 <br/><br/>\
# 구성요소 <br/>\
- 대상 시스템 : 시스템 아키텍처의 준비에 고려해야하는 시스템 <br/>\
- 아키텍처 : 시스템이 가진구조 <br/>\
- 아키텍처 기술 : 아키텍처를 이해, 분석 및 구축을 위한 청사진 <br/>\
- 이해관계자 : 고객, 공급자, 소비자, CEO <br/><br/>\
# IEEE 1471와 비교 설명 <br/>\
<img src = "./img/IEEE1471ISOIECIEEE42010.png" style = "max-width:100%; height:auto;"><br/><br/>\
* KPC 96회 응용 1교시 15번\
',

// [소프트웨어 아키텍처]- 품질속성
'# 정의 : SW 아키텍처가 만족시키고자 하는 품질 요구사항 <br/><br/>\
# 암기 <br/>\
- 시비아 <br/>\
- 시 : 가변성보시사 <br/>\
- 비 : 시비생신노목 <br/>\
- 아 : 무정완개 <br/><br/>\
# 유형 <br/>\
- 시스템 : 가용성, 변경용이성, 성능, 보안, 시험용이성, 사용성 <br/>\
- 비즈니스 : 시장적시성, 비용과이익, 시스템프로젝트 생명주기, 신규발매일정, 노후 시스템 통합, 목표 시장 <br/>\
- 아키텍처 : 무결성, 정확성, 완전성, 개발용이성 <br/><br/>\
* ISO/IEC 9129 (기신사효유이) : 기능성, 신뢰성, 사용성, 효용성, 유효성, 이식용이성 <br/>\
* ISO/IEC 25020 (기신효유이유호보) : 기능적합성, 신뢰도, 수행효율성, 유용성, 이동성, 유지가능성, 호환성, 보안<br/>\
(SQuaRE : Systems and software Quality Requirements and Evaluation)\
',

// [소프트웨어 아키텍처]- 품질속성 시나리오
'# 정의 : 품질속성 생성 도구 / 요구사항 명세 / <br/>\
- 특정 품질에 대한 요구사항을 명세한 것으로 시스템 품질속성에 대한 요구사항을 생성하는데 도움을 주는 도구 <br/><br/>\
# 암기 : 자자대환반측 <br/><br/>\
# 구성 : 자극원(Source), 자극(Stimulus), 대상체(Artifact), 환경(Environment), 반응(Response), 측정(Measurement) <br/><br/>\
# 가용성 에시 <br/>\
- so : 시스템 외부 <br/>\
- st : 백만접속 <br/>\
- ar : 프로세스 <br/>\
- en : 정상동작 <br/>\
- re : 저하모드변환 <br/>\
- me : 5초이내 응답 <br/><br/>\
# 보안성 예시 <br/>\
- so : 정삭식별유저 <br/>\
- st : 로그인 <br/>\
- ar : 유저데이터 <br/>\
- en : 정상동작 <br/>\
- re : 접속이력저장 <br/>\
- me : 접속로그 즉시 저장 \
',

// [소프트웨어 아키텍처]- 아키텍처뷰
'# 정의 : SW 아키텍처를 바라보는 시각에 따른 표현방법 <br/><br/>\
# 암기 <br/>\
# 종류(3) : PSU <br/>\
- Perry, Wolf\'s View : 요소, 표현, 근거 <br/>\
- Shaw, Galen\'s View : 컴포넌트, 커넥터, 패턴 <br/>\
- UML의 4+1 View (1998) <br/>\
<img src = "./img/ArchView_0.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/ArchView_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/ArchView_2.png" style = "max-width:100%; height:auto;">\
',

// 4+1 View
'<img src = "./img/4Plus1View.png" style = "max-width:100%; height:auto;">\
',

// [소프트웨어 아키텍처]- SEI 3 View',
'# Modlue View Type : 모듈 / 구현단위 / 기능적 책임 <br/>\
- 모듈은 시스템의 주요한 구현 단위(Implementation Unit)이며, 각 모듈은 기능적 책임 소유 <br/>\
- 목적 : 인터페이스 파악, 도메인 파악, 추상 레이어 파악, 도메인 엔티티 파악, 아키텍처 스타일 실체화 <br/>\
- 아키스타일 (모/일사분대관계) : 일반화(Generalization), 사용(Uses), 분할(Decomposition, Blackboard), 데이터 모델(Data Model), 관점(Aspects), 계층(MVC) <br/><br/>\
# Component&Connector View Type : 시스템, 외부 인터페이스 정의 / 컴포넌트 / 커넥터 /<br/>\
- 런타임 컴포넌트와 커넥터로 시스템의 실행단위 기술, 시스템과 외부 엔티티와 인터페이스를 정의 <br/>\
- 목적 : 성능(Perforamnce), 신뢰성(Reliability), 가용성(Availability) 등과 같은 런타임 시스템 품질 속성의 실험을 결정 <br/>\
- 아키스타일 (컴/호데이저) : 호출과 반환(C/S,P2P), 데이터흐름(Pipe&Filter), 이벤트기반(Plublish&Subscribe), 저장소(Shared Data) <br/><br/>\
# Allocation View Type : 관계 기술 / 시스템 소프트웨어 / 구성요소 / 외부 환경 <br/>\
- 시스템의 소프트웨어 구성요소와 소프트웨어가 생성되고 실행되는 외부 환경 사이의 관계를 기술 <br/>\
- 목적 : 컴포넌트가 하드웨어에 어떻게 배치되었는지를 보여줌 <br/>\
- 아키스타일 (할/배구작) : 배치(Deployment), 구현(Implement), 작업할당(Work Assingement)\
',

// [소프트웨어 아키텍처]- 아키텍처 스타일
'# 정의 : 비기능 품질 요구사항 작성 문서 / 반복 재사용 표준모델 / 재사용성 / 유지보수성 <br/>\
- 아키텍처 설계시에 요구되는 비기능 품질 요구사항을 달성할 수 있도록 작성한 문서 <br/>\
- SW 아키텍처의 재사용성과 유지보수성을 향상시키기 위해 반복 재사용 가능한 표준모델 <br/>\
- 아키텍처가 만족시켜야 하는 시스템 품질 달성 방법을 정리하여 가이드를 제공하기 위한 패턴 및 방법론 <br/><br/>\
# 아키텍처 스타일 계층 구성 <br/>\
1. UI 영역 : Consumer Layer, 수요자 영역 <br/>\
2. 기능 제공 영역 : 사용사례에서 결정된 어플리케이션 기능 <br/>\
3. 공통적인 서비스 영역 <br/><br/>\
# 아키텍처 스타일의 원칙 <br/>\
- 시스템 특성에 맞는 아키텍처 선정 <br/>\
- 제약사항, 요구사항 반영 여부 검토 <br/>\
- 적절한 스타일 선정, 변형, 조정, 혼용하여 설게 <br/>\
- 구체적인 구현방법 설계 <br/><br/>\
# 기능 <br/>\
- SW 시스템 구조의 체계적 구성위한 기본 스키마 제시<br/>\
- 미리 정의된 서브 시스템 제공<br/>\
- 각 아키텍처 패턴 간의 책임 명시 <br/>\
- 패턴간 관계의 조직화된 규칙 및 가이드라인 제시 <br/>\
- 문제의 SW 모듈 단위 분해 방법 제시 <br/>\
- 분해한 SW 모듈 단위간 상호작용 방법 제시 <br/><br/>\
# 아키텍처 스타일 종류 <br/>\
1. 계층형 <br/>\
2. MVC <br/>\
3. Client Server <br/>\
4. Pipe & Filters <br/>\
5. Peer To Peer <br/>\
6. 칠판형 <br/>\
7. Repository <br/>\
8. Broker <br/><br/>\
<img src = "./img/ArchStyle.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 라이지움 86회 1교시 10번 \
',

// [소프트웨어 아키텍처]- 아키텍처 평가방법
'# 암기 <br/>\
- 방법론 : 시시수경 <br/>\
- 시기 : 이D늦 <br/>\
- 분석유형 : 정역(도지시) <br/><br/>\
# 방법론 유형 <br/>\
- 시나리오 기반 : SAAM, ATAM, CBAM, ADR, ARID <br/>\
- 시뮬레이션 기반 : BMT, 프로토타이핑 <br/>\
- 수학적 모델 기반 : 정량화 측정 <br/>\
- 경험기반 : 경험이용 <br/><br/>\
# 평가 시기 <br/>\
1. 이른 평가 방식 (Early) <br/>\
- 아키텍처가 완성 이전이라도 이미 내린 결정과 고려하고 있는 결정을 아키텍처 구축 과정 어느때나 평가하는 방식 <br/>\
- 아키텍처 평가 결과가 아키텍처에 그대로 반영, 아키텍처가 작성 중이기 때문에 평가 비용가 부담이 적음 <br/>\
2. Discorvery Review (Early) <br/>\
- 아주 이른 시점에 하는 미니 평가, 프로토(Proto) 아키텍처를 분석, 요구사항을 달성할 수 있는 초기 대응책, 나중에 완벽한 평가를 할 때 필요한 밑바탕 <br/>\
3. 늦은 평가 방식 (Late) <br/>\
- 구현되어 있는 시스템에 대해 평가하는 방식, 주로 기존 시스템을 이어받아야 할 때 적용, 기존 시스템을 이해하고 필요한 요구사항을 만족시킬 수 있는지 파악 <br/><br/>\
# 분석 유형 <br/>\
1. 정방향 분석 : 기존 소스 코드 없이 요구사항 등을 가지고 프로젝트 초반에 소프트웨어 아키텍처를 분석하는 활동 (CBAM, ATAM) <br/>\
2. 역방향 분석 : 레거시 코드나 기존 시스템이 있는 경우 역방향 분석을 통해 기본 아키텍처를 분석/도출한 후에 소프트웨어 아키텍처 분석 <br/>\
- 도메인 분석 : Java의 경우 일반적으로 Method, Class, Package, Package set, Proeject, Workspace 6개의 도메인으로 분류 <br/>\
- 지표이용 분석 : 관리지표(일정, 품절, 디버깅, 성능) 제품지표 (Count, Complexcity, Coupling, OO) <br/>\
- 시각화 분석 : 차트, 그래프 \
',

// SAAM
'# 정의 : 최초 정리 평가 방법 <br/>\
- Software Architecture Analysis Method <br/>\
- 최초로 정리된 평가방법, 다양한 수정가능성들의 관점에서 아키텍처 분석 <br/><br/>\
# 절차 <br/>\
1. 시나리오 개발 <br/>\
2. 아키텍처 설명 <br/>\
3. 시나리오 분류와 우선순위 결정 <br/>\
4. 간접 시나리오 평가 <br/>\
5. 시나리오 상호작용 평가 <br/>\
6. 종합평가 \
',

// ATAM 
'# 정의 : 품질 속성 관계 분석 도구 <br/>\
- Architecture Trade-Off Analysis Method <br/>\
- 시나리오 기반의 모든 품질요소를 평가하고 품질 속성들이 서로 어떻게 Trade-Off 되는지까지 밝힘 <br/><br/>\
# 특징 <br/>\
- 위험/무위험 <br/>\
- 민감점 <br/>\
- 절충점 <br/><br/>\
# 절차 <br/>\
1. 1차 평가 <br/>\
- ATAM 소개 <br/>\
- 비즈니스 동인 소개 <br/>\
- 아키텍처 소개 <br/>\
- 아키텍처 접근법 식별 <br/>\
- 품질속성 유틸리티 트리 작성 <br/>\
- 아키텍처 접근법 분석 <br/><br/>\
2. 2차 평가 <br/>\
- 브레인 스토밍과 시나리오 우선순위 결정 <br/>\
- 아키텍처 접근법 분석 반복 <br/>\
- 결과 발표 \
',

// CBAM 
'# 정의 : 비용, 일정 관계 파악, 전략적 비용 측정 <br/>\
- Cost Benefit Analysis Method <br/>\
- ATAM 에서 부족한 경제적 평가 부분을 보강한 프로세스 <br/>\
- 비용과 일정간의 관계를 파악하여 아키텍처 전략적 비용 측정 <br/><br/>\
# 절차 <br/>\
1. 시나리오 결정 <br/>\
2. 효용-반응값 곡선 작성 <br/>\
3. 아키턱체 접근법 전체 이익 계산 <br/>\
4. 아키텍처 접근법 선정과 검증 \
',

// ADR
'# 정의 : 응집도 평가 <br/>\
- Architectural Design Review <br/>\
- SW 아키텍처 구성요소 간 응집도 평가 <br/><br/>\
# 특징 <br/>\
- SW 품질과 상세 설계 적합성 검증 <br/>\
- 모듈/컴포넌트 상세 설계 검토 <br/>\
- 서술식 질문으로 설계자 참여 유도\
',

// ARID
'# 정의 : 완성되지 않은 부분 초기 평가 <br/>\
- Active Reviews for Intermediate Designs <br/>\
- 완성되지 않은 부분 아키텍처를 아키텍처 설계 초기에 평가하는 방법 <br/><br/>\
# 특징 <br/>\
- ADR + ATAM \
',

// 유틸리티 트리 
'# 정의 : 하향식 품질속성 도출기법 <br/>\
- 일반적인 문제에서 특정 상황으로 접근하며 품질속성 목표파악/속성 간 우선순위 결정을 지원하는 품질속성 시나리오 도출기법 <br/>\
- ATAM 기반 SW 아키텍처 평가 방법에서 비기능적 품질 속성 간 중요도, 영향도 등을 파악하기 위한 트리 <br/><br/>\
# 목적 <br/>\
- 품질속성 결정 <br/>\
- 시나리오 도출<br/>\
- 아키텍처 평가 <br/><br/>\
# 구성 <br/>\
- 유틸리티 <br/>\
- 품질속성 <br/>\
- 세분화한 품질속성 <br/>\
- 시나리오 <br/><br/>\
# 이해관계자 <br/>\
- 검증팀 <br/>\
- 프로젝트 리더 <br/>\
- 평가자 3~5명 \
',

// 아키텍처 드라이버 
'# 정의 : 요구사항 원칙, 근거 형태 표현 <br/>\
- 아키텍처 요구사항 항목들을 분석하여 아키텍처 설계에 직접적으로 근간이 될 수 있는 항목들을 추출/정제하여, 이를 아키텍처 설계의 원칙이나 근거의 형태로 표현한 것 <br/><br/>\
# 구성 <br/>\
- 기능요구 <br/>\
- 품질요구 <br/>\
- 제약사항 <br/><br/>\
# 절차 <br/>\
- 목표 설정 : 최우선 목표 설정(개수 최소화) <br/>\
- 요구사항 변환 : 목표 Quality scenario, Use case 목록변환 <br/>\
- 요구사항 정제 : 영향 큰 요구사항 선정 <br/>\
- 설계 시작 : 아키텍처 설계 시작 <br/><br/>\
# 아키텍처 설계뷰 작성 과정 <br/>\
<img src = "./img/ArchitectureDesignView.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 라이지움 84회 1교시 1번\
',
  
// 아키텍처 평가모델
'<img src = "./img/SW_Architecture_평가모델.png" style = "max-width:100%; height:auto;">\
',

// SAD 
'# 정의 : SW 아키텍처 기술 문서 <br/>\
- 이해관계자들의 관심사 파악 및 관점들을 정의하고, 다양한 View를 통해 SW 아키텍처를 기술한 문서 <br/><br/>\
# 작성시 준수사항 <br/>\
- 핵심 집중 <br/>\
- 표현방법(모호x, 반복x) <br/>\
- 표준준수 <br/>\
- 내용 충실 <br/>\
- 리뷰 확동 <br/><br/>\
# 절차 <br/>\
- 아키텍처 기술서 정보작성 <br/>\
- 이해관계자 관심 식별 <br/>\
- 관점 선택 <br/>\
- 관점 설명 <br/>\
- 뷰 <br/>\
- 전체 뷰 <br/><br/>\
# 작성 예시 <br/>\
1. SAD 개요 <br/>\
2. 아키텍처 배경 <br/>\
3. 아키텍처 요구사항 <br/>\
4. 참조 아키텍처 <br/>\
5. 설계 전략 <br/>\
6. 시스템 뷰 <br/>\
7. 기타 \
',

// ADD
'# 정의 : 아키텍처 수립 방법 / 기능,품질 속성, 제약사항 input / 최상위 수준 재귀 분할 과정 <br/>\
- 시스템의 기능적인 속성과 품질 속성 그리고 제약사항을 input으로 받아 속성을 만족시킬 수 있도록 최상위 수준에서 recursive하게 분할 하는 과정을 통해 아키텍처를 수립하는 방법 (SEI CMU) <br/><br/>\
# 암기 <br/>\
- recursive하게 분할 : 선,분/정,아,실/할,제/생,반 <br/><br/>\
# 절차 <br/>\
- 1단계 : 분할 모듈 선택 <br/>\
- 2단계<br/>\
=> 모듈 분할 및 정제 : 아키텍처 드라이버 나열 후 우선순위 정의 <br/>\
=> 아키텍처 스타일 선택 : 하위 모듈과 상호작용 방식 결정 <br/>\
=> 하위 모듈 실체화 및 뷰 통한 기능 할당 <br/>\
=> 하위 모듈 제약사항 생성 : 유즈케이스와 품질 속성 정제 및 검증 <br/>\
- 3단계 : 반복 <br/><br/>\
<img src = "./img/ADD.png" style = "max-width:100%; height:auto;">\
',

// 객체지향방법론
'# 정의 : 추상화 생성 개념 기반 방법론 / 구체 -> 추상 <br/>\
- 구체적인 대상들에서 공통적인 특징을 추출하여 추상화 후 생성된 객체 위주로 SW를 개발하는 방법론<br/><br/>\
# 특성/목적 : 캡추다정상 <br/>\
- 캡슐화 : 접근통제 <br/>\
- 추상화 : 본질적 문제 집중 (추상화,인스턴스화) <br/>\
- 다형성 : 동적바인딩 <br/>\
- 정보은닉 : 메시지 전달 (Getter, Setter) <br/>\
- 상속성 : 개발 편리성 <br/><br/>\
# 절차 : 요-객동기-시객구-테패평 <br/><br/>\
<img src = "./img/객체지향방법론_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/객체지향방법론_2.png" style = "max-width:100%; height:auto;">\
',

// [객체지향방법론]- SOILD
'# 정의 : 디자인 패턴 근본 원칙 / 객체지향 <br/>\
- 객체지향 소프트웨어 설계의 근본 원칙, 디자인 패턴의 근본 원칙 <br/><br/>\
# 주요내용 : SOLID <br/>\
1. SRP(Single Responsibility Priciple) 단일 책임 원칙 : 하나의 역할만 수행 토록 Class 설계<br/>\
- 위반사례 : God Class, Big Class <br/>\
- 목적 : 응집도 강화 <br/>\
<img src = "./img/SingleResponsePrinciple.png" style = "max-width:100%; height:auto;"><br/><br/>\
2. OCP(Open/Closed) 개방폐쇄의 원칙 : 확장에 개방, 변경에 폐쇄, 기능 추가시 영향도 없도록 설계 <br/>\
- 위반사례 : 구현상속, 구현클래스 의존 <br/>\
- 목적 : 재사용, 확장성 <br/>\
<img src = "./img/OpenClosedPrinciple.png" style = "max-width:100%; height:auto;"><br/><br/>\
3. LSP(Liskov Subsitution) 리스코프의 치환원칙 : Sub Type은 언제나 자신의 Base Type으로 교체가능 <br/>\
- 위반 사례 : 무분별한 기능 재정의 <br/>\
- 목적 : 동적바인딩(다형성) <br/>\
<img src = "./img/LiskovSubstitution.png" style = "max-width:100%; height:auto;"><br/><br/>\
4. ISP(Interface Segregation) 인터페이스 분리 원칙 : 다른 클래스 종속할 때, 최소한의 인터페이스 사용 <br/>\
- 위반 사례 : 구현상속, 여러기능 수행 메소드 <br/>\
- 목적 : 결합도 최소화(정보은닉, 다형성) <br/>\
<img src = "./img/InterfaceSegregation.png" style = "max-width:100%; height:auto;"><br/><br/>\
5. DIP(Dependency Inversion) 의존성 역전원칙 : 상위레벨 모듈은 하위레벨 의존금지, 추상화된 상위레벨모듈에 의존 <br/>\
- 위반 사례 : 구현상속, 구현클래스 의존 <br/>\
- 목적 : 결합도 최소화 <br/>\
<img src = "./img/DependancyInversion.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/SOLID_ALL.png" style = "max-width:100%; height:auto;"><br/><br/>\
* DRY(Don\'t Repeat Yourself)\
',

// 인터페이스
'# 정의 : Class / 추상 메소드 + Static 변수 <br/>\
- 클래스간의 공통 기능을 정의할 때 사용하는 상수와 추상 메소드의 집합체 <br/><br/>\
# 특징 <br/>\
- 멤버변수 public static final 만 선언가능<br/>\
- 추상 메소드만 선언 가능 <br/>\
- Java 경우 다중 인터페이스 상속가능 <br/>\
- Implements <br/><br/>\
# UML 표현 : \<\< interfacae \>\>, 이텔릭체, 점선 화살표 <br/><br/>\
# 사례 : Adapter 패턴 중 class Adapter<br/><br/>\
<img src = "./img/Interface.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/AbstractClassInterface.png" style = "max-width:100%; height:auto;">\
',

// 추상클래스
'# 정의 : Class / 추상 메소드 1개 이상 <br/>\
- 하나 이상의 추상 메소드를 가지며 객체가 가지는 특성을 추상화 시켜 상속을 통해 새로운 클래스를 작성하는 실제 인스턴스를 생성할 수 없는 클래스 <br/><br/>\
# 특징 : 추상 메소드 선언 가능, 다중 인터페이스 상속 불가, extends, 인스턴스 생성 불가 <br/><br/>\
# UML 표현 : 이탤릭체, 화살표 <br/><br/>\
# 사례 : Templete Method 패턴 <br/><br/>\
<img src = "./img/AbstractClass.png" style = "max-width:100%; height:auto;">\
',

// 다형성
'# 정의 : 다른 처리 방식 구현 / 동일 인터페이스 <br/>\
- 동일 인터페이스에 대해 서로 다른 처리 방식으로 구현 가능한 특성<br/><br/>\
# 특징 : 확장성, 재사용성, 유지보수성 <br/><br/>\
# 구현방법 : 오버로딩, 오버라이딩\
',

// Demeter's Law
'# 정의 : 최소지식 원리 <br/>\
- 오브젝트간 협력 설계시, 오브젝트가 주변 오브젝트에 대해 제한된 정보를 가지는 최소지식의 원리 <br/><br/>\
# 특징 <br/>\
- 미준수시 message chain 발생 <br/>\
- 최소 지식 원칙 <br/><br/>\
# 규칙 <br/>\
1. 객체 자신의 메소드 <br/>\
2. 매소드의 매개변수로 넘어온 인자의 메소드 <br/>\
3. 메소드 내부에서 생성된 객체의 메소드 <br/>\
4. 메소드가 포함하고 있는 객체의 메소드 <br/>\
5. 메소드의 스코프안에서 객체가 접근 가능한 전역변수 \
',
  
// 상속 합성
'<img src = "./img/InheritComposition.png" style = "max-width:100%; height:auto;">\
',
  
// UML 
'# 정의 : 통합된 모델링언어, IT + Biz 설계 <br/>\
- 객체기술에 대한 표준화기구에서 인정한 객체지향 분석과 설계를 위한 표준화된 모델링 언어 <br/><br/>\
<img src = "./img/UMLDiagram.png" style = "max-width:100%; height:auto;">\
',
  
// UML 관계
'<img src = "./img/UML_Relation.png" style = "max-width:100%; height:auto;"><br/>\
<img src = "./img/UML_RelationDetail.png" style = "max-width:100%; height:auto;">\
',

// UML 확장매커니즘 
'# 정의 : UML Customizing <br/>\
- 다양한 유형의 소프트웨어 모델을 표현하기에 부족한 UML을 보완하기 위해 별도의 표현 기법을 추가하여 확장할 수 있도록 하는 매커니즘 <br/><br/>\
# 특징 <br/>\
- MDA 지원 <br/>\
- Semantics(의미론적) 표현 <br/>\
- 재사용성 강화 ><br/>\
',

// [UML]- Behavior Diagram
'# 정의 : 사물들간의 행위 표시 다이어그램 <br/>\
- 관련이 있는 사물들간의 행위를 표시한 도형으로 시스템의 행위, 개별구성요소의 행위, 구성요소간의 행위를 표현할 수 있음 <br/><br/>\
<img src = "./img/BehaviorDiagram.png" style = "max-width:100%; height:auto;">\
',

// [UML][BehaviorDiagram]- Activity Diagram
'# 개념 <br/>\
- 시스템 내부의 활동의 흐름 표현 <br/>\
- 플로우 차트와 비슷하여 제어흐름을 표현하는데 적합 <br/>\
- 행위에 따라 변하는 객체의 상태를 표현 <br/><br/>\
# 표기법 <br/>\
<img src = "./img/ActivityDiagram.png" style = "max-width:100%; height:auto;"><br/><br/>\
- 시작상태 : 객체의 상태가 시작되는 곳, 객체의 생성시점이 시작 상태 <br/>\
- 객체상태 : 객체가 가질 수 있는 조건이나 상황 <br/>\
- 종료상태 : 객체 상태변화가 종료되는 곳, 객체의 소멸시점 <br/>\
- 전이 : 하나의 상태에서 다른 상태로 변화하는 것 <br/>\
- 동기화 : 병행처리가 시작되거나 모이는 곳 <br/>\
- 분기 : 논리식의 결과값에 따라 분기가 일어남 <br/>\
- 구획면 : 역할에 따른 구분이나 조작에 따른 구분, 활동 상태를 그룹화함\
',

// [UML][BehaviorDiagram]- State Diagram
'# 개념 <br/>\
- 시스템의 동적인 모습을 표현<br/>\
- 사건에 따라 순차적으로 발생하는 한 객체의 상태변화를 표현 <br/><br/>\
# 표기법 <br/>\
<img src = "./img/StateDiagram.png" style = "max-width:100%; height:auto;"><br/><br/>\
- 시작상태 : 객체의 상태변화가 시작되는 곳, 객체의 생성시점이 시작상태 <br/>\
- 상태 : 어떤 시점에서의 객체의 상태나 단계를 표시, 상태는 이벤트에 의해 변화됨 <br/>\
- 전이 : 하나의 상태에서 다른 상태로 변화하는 것 <br/>\
- 컴포지트 상태 : 객체가 어떠한 상태에 있는 동안에 다른 상태전이가 일어나는 것 \
',

// [UML][BehaviorDiagram]- Use Case Diagram 
'# 개념 <br/>\
- 시스템이 제공하는 기능 및 그와 관련된 외부요소(유저나 외부시스템)를 표현 <br/><br/>\
<img src = "./img/UseCaseDiagram.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 표기법 <br/>\
- 유즈케이스 : 유저등 시스템 외부에서 본 시스템의 기능 <br/>\
- 액터 : 시스템 외부에 존재하는 개체(사용자 역할, 타 시스템, 데이터베이스 서버등) <br/>\
- 연관관계 : 액터와 유즈케이스간의 관련 표현 <br/>\
- 일반화관계 : 시스템의 기능, 외부요소 사이에 추상화 혹은 구체화 관계가 존재함을 표시 <br/>\
- include : 중복적인 기능을 추출하여 별도의 유즈케이스로 표현 <br/>\
- extend : 유즈케이스내의 특정 시점에서 여러 형태로 분류될 경우 표현 \
',
 
// Sequence Diagram
'# 정의 : 문제 해결에 필요한 객체간 메시지 순서를 시간 흐름에 따라 보여주는 UML 다이어그램 <br/><br/>\
# 구성요소 <br/>\
<img src = "./img/SequenceDiagram.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 예시 <br/>\
<img src = "./img/SequenceDiagramExample.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 라이지움 87회 관리 3교시 1번\
',

// Class Diagram
'# 정의 : 객체 타입 정의, 정적인 관계 표현 다이어그램 <br/>\
- 시스템에서 사용되는 객체 타입을 정의하고, 그들 간의 존재하는 정적인 관계를 다양한 방식으로 표현한 다이어그램 <br/><br/>\
# 특징 <br/>\
- Property : 클래스의 구조적 특징을 나타내는 특징 <br/>\
- Operation : 액션(메소드) + 가시성 이름(매개변수) <br/>\
- OCL(Object Constraint Language) : 제약을 설명하기 위해서 어떤 것이든 사용할 수 있도록 허용 <br/><br/>\
# 구성요소 <br/>\
- 클래스 : 모델링 하고자 하는 시스템의 개념을 표현하여 이름, Attribute, Operation으로 구성 <br/>\
- 스테레오 타입 : UML에서 제공하는 추가적인 확장 요소 (<< interface >>, << utility >>, << abstract >>, << enumeration >> <br/><br/>\
<img src = "./img/ClassDiagram_1.png" style = "max-width:100%; height:auto;"><br/>\
<img src = "./img/ClassDiagramDetail.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/ClassDiagram_2.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 122회 4교시 6번\
',

// Usecase Test
'# 정의 : Usecase 통한 테스트 <br/>\
- Usecase를 통해 도출되는 비즈니스 시나리오를 테스트 명세화하고, Usecase를 사용하는 Actor 사이의 상호작용의 결함을 찾는 테스트 기법 <br/><br/>\
# 특징 <br/>\
- Usecase는 실제 사용되는 시스템 프로세스 흐름 기술 <br/>\
- 인수테스트를 디자인시 유용 <br/>\
- 통합테스트 디자인시 유용 <br/><br/>\
# 시나리오 유형 <br/>\
- Usecase 시나리오 <br/>\
- 상호작용 시나리오 (구성 : 기본,대안,예외 흐름) \
',

// 모델기반 테스트
'# 정의 : 요구사항 문서 대신, 테스트 수행 기법 <br/>\
- 요구사항 문서를 대신하여 정형화된 표기법으로 기술된 모델에 의해 테스트 수행하는 기법 <br/><br/>\
# 특징 <br/>\
1. 장점 <br/>\
- 테스트 케이스 생성의 유연성 <br/>\
- 재사용성 <br/>\
- 추적성 <br/><br/>\
2. 작성방식 <br/>\
- 정형화된 표기법 <br/>\
- 테스트케이스 자동설계 <br/><br/>\
3. 적용대상 <br/>\
- 운영체제 <br/>\
- 통신시스템 <br/>\
- 스마트폰 <br/>\
- 자동차 <br/><br/>\
# 구성요소 <br/>\
- 결함의 검출 <br/>\
- 품질평가 <br/>\
- 테스트 대상 <br/>\
- 테스트 케이스 <br/>\
- 테스트 케이서 설계 <br/>\
- 테스트 베이시스 <br/>\
- 테스트 절차 <br/>\
- 테스트 스크립트 \
',

// MSA
'# 정의 : 작은, 변경 조합 가능 아키텍처 <br/>\
- 하나의 큰 어플리케이션을 여러개의 작은 마이크로 서비스 단위로 나누어 변경과 조합이 가능하도록 구성된 아키텍처 <br/><br/>\
# Keyword : Loosely Coupled, 분산트랜잭션, Ripple Efeect <br/><br/>\
# 부각 배경 <br/>\
1. 모놀리틱 아키텍처 <br/>\
- 전통적 단일체 구조 <br/>\
- 긴 빌드 및 배포 시간 <br/>\
- 환경변화 대처 어려움 <br/><br/>\
2. SOA <br/>\
- 서비스 지향 구조 <br/>\
- 미들웨어(ESB)로 연결 <br/>\
- 미들웨어 SPOF 문제 <br/><br/>\
3. MSA <br/>\
- Micro Service로 분할 <br/>\
- 빠른 빌드 및 배포 가능 <br/>\
- 기업 환경의 도입 확산 <br/><br/>\
# MSA 구성요소 <br/>\
<img src = "./img/SWE1_9_1.PNG" style = "max-width:100%; height:auto;"><br/><br/>\
1. Front-end Tier <br/>\
- UI/UX : Client Application <br/>\
- Protocol : HTTP Rest API, AMQP 경량화 프로토콜 <br/><br/>\
2. Middle Tier <br/>\
- API Gateway : Load Balancing, 인증/로깅 <br/>\
- API Server : 상호 독립적 배포/관리 개별 서비스 <br/><br/>\
3. Back-end Tier <br/>\
- NoSQL DB : Document, Graph, Key/value 수평적 확장 가능한 DB <br/>\
- RDB : ACID DB <br/><br/>\
# 제언 <br/>\
<img src = "./img/DevOpsComment.png" style = "max-width:100%; height:auto;"><br/><br/>\
* MSA SOA 비교표 <br/>\
<img src = "./img/MSASOA.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 120회 관리 2교시 3번<br/><br/>\
* KPC 91회 2교시 4번\
',

// Shared Nothing Architecture
'# 정의 : 병렬 HA 구현 아키텍처 / 공유 자원x / 자원 소유권 / 동적 결정 <br/>\
- 공유하는 자원 없이 한번에 한 시스템만 특정 자원을 소유하고 접속 가능하나 장애 발생시에는 동적으로 결정되는 또다른 시스템이 그 자원의 소유권을 넘겨 받는 데이터 병렬처리 고가용성 구현 아키텍처 <br/><br/>\
# 특징 <br/>\
- 공유자원X <br/>\
- NW통한 복제 : MPP(Massive Parallel Processing) 방식 확대 <br/>\
- 일반 TCP기반 원거리 OK <br/>\
- 데이터 정합성 위한 별도 정책 필요 <br/>\
- 정합성보다 빠른 성능에 적합 <br/>\
- 장점 : 병렬 실행의 상호 의존성 제거, Scale Out 용이, Clustering 기반 독립 데이터 처리 <br/>\
- 목적 : HA확보, 부하분산, 장애시 데이터 손실 최소화 <br/><br/>\
# 절차 : 최초 SQL 요청 받은 서버가 코디네이트 노드 <br/>\
- 코 : 실행계획 연관 슬레이브 노드 식별 <br/>\
- 슬 : 요청 처리후 코디네이트 노드에 리턴 <br/>\
- 코 : 취합 후 반환 <br/><br/>\
# 기술 : 고가용성 확보, 부하분산, 장애시 데이터 손실 최소화 <br/><br/>\
# 고려사항 <br/>\
- Replication 구성시 Master & Slave 구조 적용 <br/>\
- 파티셔닝&샤딩 : Partitioning & Sharding <br/>\
- 로드밸런싱 및 캐시 구성 <br/>\
- 비동기 처리 (Async) 적용 <br/>\
- 셀 아키텍처(Cell Architecture) 구성 <br/>\
- 아키텍처 구조,배포 및 로백 <br/>\
- 수집 및 백업에 관련된 구성과 정책관리위한 사전 설계 및 테스트<br/><br/>\
* Share Everything, Share Disk <br/>\
* Share Nothing <br/><br/>\
<img src = "./img/ShareNothing.png" style = "max-width:100%; height:auto;">\
',

// Breadcrumbs
'# 정의 : 탐색 경로 시각 제공 인터페이스 <br/>\
- 프로그램, 문서, 웹사이트 등에서 사용자의 탐색 경로를 시각적으로 제공해 주는 그래픽 사용자 인터페이스 <br/><br/>\
# 예제 <br/>\
- Home > 자료마당 > 간행물 > 연구보고서 \
',

// 디자인패턴
'# 정의 : 개발 구조/문서 <br/>\
- 개발시 자주 발생하는 구조상 문제를 해결하기 위한 구조/문서 <br/><br/>\
# 종류 <br/>\
- 생구행 <br/>\
- 생 : 아바프로시파(ABProSiFa) <br/>\
- 구 : ABCD파플로(ABCDFaFlro) <br/>\
- 행 : CMI(CCMMII) 쏘티브(SSOTV) <br/>\
<img src = "./img/DesignPattern.png" style = "max-width:100%; height:auto;">\
',

// 화이트박스 재사용
'# 정의 : 상속 재사용 <br/>\
- 클래스 상속 등에 의한 재사용 기법 <br/><br/>\
# 특징 : 재사용 클래스가 변경이 일어나면 이용 객체에 영향 큼 <br/><br/>\
# 적용 패턴 : Adaptor, Decorator \
',

// 블랙박스 재사용
'# 정의 : 객체 여러개 붙여 재사용 <br/>\
- 다른 객체를 여러개 붙여서 새로운 기능 또는 개체를 구성하는 재사용 기법 <br/><br/>\
# 특징 : 객체 합성, 위임 -> 변경에 대한 영향 작음 <br/><br/>\
# 적용 패턴 : Proxy, Composite \
',

// 위임
'# 정의 : 타 클래스 호출 기법 (MS COM)<br/>\
- 하나의 클래스가 자신에게 필요한 서비스를 다른 클래스에 정의된 메소드 호출을 통해서 얻어 내는 기법 <br/><br/>\
# 위임 사용되는 패턴 : state, strategy, visitor <br/><br/>\
# 위임 의존 패턴 : mediator, Chain of Responsibility, bridge <br/><br/>\
',

// 전략패턴
'# 정의 : 변경없이 동적 교체 <br/>\
- 객체의 기능을 클래스의 변경 없이 동적으로 교체해서 사용하는 방법을 제공하는 행위 패턴 <br/><br/>\
# 특징 <br/>\
- OCP(Open Close Principle)와 인터페이스 이용한 다형성 <br/>\
- 위임 개념 적용된 디자인 패턴 <br/><br/>\
# 구성 <br/>\
- Context <br/>\
- Strategy <br/>\
- ConcreteStrategy \
',

// Observer Pattern
'# 정의 : 연락체계, 1:N 행위 패턴 <br/>\
- 한 객체의 상태가 바뀌는 경우 의존관계 있는 다른 객체들에게 연락이 가고, 자동으로 그 내용이 갱신되도록 일대다 의존성을 정의한 행위 패턴 <br/><br/>\
# 구성 <br/>\
- Interface : Subejct, Observer <br/>\
- Class : ConcreateSubject(Getter, Setter), ConcreteObserver(Update()) <br/><br/>\
# 특징 <br/>\
- 느슨한 결합 <br/>\
- 일관성 보장 \
',

// 연산생략기법
'# 정의 : 빠른 연산 진행 위한 평가 방법 <br/>\
- SCE / Short Circuit Evaluation <br/>\
- 빠른 연산 진행 위한 계산 방식으로 컴파일러가 확정되었을 때 더이상 평가하지 않는 방법 <br/><br/>\
# 특징 <br/>\
- 컴파일러 최적화 <br/>\
- 고급언어기능 <br/>\
- MC/DC 적용 <br/>\
- if( a or b ) \
',

// 정형기법
'# 정의 : 시스템 정확성 보장 기법 / 수학논리 명세 / 명세언어 / 검증기법<br/>\
- 수학논리 기반의 명세 및 정형화된 명세언어로 기술하고 정형검증기법으로 검증하여 시스템의 정확성을 보장하는 기법 <br/><br/>\
# 유형 : 정형명세, 정형개발, 정형검증 \
',

// [정형기법]- 정형명세 
'# 정의 : 시스템 전반내용 기술 / 수리 논리 / 동작환경 / 요구사항 / 설계 <br/>\
- Formal Specification <br/>\
- 수리 논리등을 이용하여 시스템의 동작 환경, 시스템 요구사항, 시스템의 설계 등을 기술하는 것 <br/><br/>\
# 암기 <br/>\
- 명세(5) : 모상AZP <br/>\
- 검증(3) : 정모동S <br/><br/>\
순병대모 <br/>\
- 순대-라오 <br/>\
- 병대-로브 <br/>\
- 순모-ZVB <br/>\
- 병모-씨페 <br/><br/>\
# 유형 : 요구명세, 설계명세 <br/><br/>\
# 종류 : 대모/순병 <br/>\
- 대수적 방법 : 시스템 연산과 연산의 관계에 의해서 표현 <br/>\
- 모델 기반 방법 : 시스템의 모델이 집합 및 수열과 같은 수학적 표현을 이용하여 만들어지며 시스템 운영은 그것이 어떻게 시스템의 상태를 수정하는지에 의해 정의 <br/><br/>\
<img src = "./img/정형명세_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/정형명세_2.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/정형명세_3.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/정형명세_4.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/정형명세_5.png" style = "max-width:100%; height:auto;">\
',

// Z 명세
'# 정의 : 집합론, 일차식으로 표현된 정형명세 <br/><br/>\
# 특징 <br/>\
- 상태기반 표현기법 <br/>\
- 수학적 표현 제공 <br/>\
- 스키마 제공해 구조화 <br/>\
- 모호함 없는 정확한 명세 가능 <br/><br/>\
# 명세 요소 <br/>\
- Static State : 시스템의 상태를 나타내는 변수와의 관계 표현, 모든 상태에서 만족하는 불연속성 <br/>\
- Initial State : 시스템의 초기 상태 표현 <br/>\
- Operation : 오퍼레이션 수행 전/후 상태관계 표현 \
',

// Petri-net
'# 정의 : 분산, 병렬시스템을 표현하는 수학적 모델링 명세언어 <br/><br/>\
# 명세요소 <br/>\
- Place : 토큰을 포함하는 장소의 유한 집합 <br/>\
- Transition : 천이의 유한 집합, event 또는 activity 나타냄 <br/>\
- Token : Place에서 Place로 이동 되는 단위 <br/>\
- Arc : Place에 영향을 주거나 종속되는 transition 간 연결 \
',

// 상태차트
'# 정의 : 시스템의 행위를 모델링 하기 위한, 직관적인 명세언어 <br/><br/>\
# 특징 <br/>\
- 도식적 표현 <br/>\
- 이해용이 <br/>\
- 반응형 시스템 명세 및 설계 적합 <br/><br/>\
# 적용 <br/>\
- 군사 및 항공우주<br/>\
- 자동화 설비 <br/>\
- 의료장비 <br/>\
- 철도 <br/><br/>\
# 명세요소 <br/>\
- 모듈차트 : DFD <br/>\
- 액티비티차트 : 다차원의 데이터 플로우 다이어그램 <br/>\
- 상태차트 : 노드(상태)와 화살표(전이)로 구성 \
',

// VDM
'# 정의 : 표현의미론 기반의 명세언어 <br/><br/>\
# 특징 : 명세 이외 설계/구현 적용가능, 실무에 많이 이용 \
',
  
// 정형검증
'# 정의 : 수학과 논리학 기반 SW 검증 <br/>\
- 시스템의 동작 및 요구사항을 논리식이나 수학식과 같이 정형된 명세언어로 기술하고, 만족 여부를 증명하는 소프트웨어 검증기법 <br/><br/>\
# 특징 <br/>\
- 수학 및 논리학 : 오토마타를 활용, 수학모델 표현 <br/>\
- 반복모델 및 검증 : 정형명세 기준 반복적 검증 <br/>\
- 상태폭발 문제 : 규모에 따라 상태수 폭발적 증가 <br/><br/>\
# 정형검증 유형 <br/>\
<img src = "./img/FormalVerificationSpec.png" style = "max-width:100%; height:auto;"><br/>\
<img src = "./img/정형검증.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 절차 <br/>\
<img src = "./img/정형검증절차.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 상태폭발문제 해결방안 <br/>\
- 기호적 모델 체킹 : 너비 우선 탐색 <br/>\
- 추상화 기법 : 모델 경량화 <br/>\
- 릴레이 모델 체킹 : 수량 나누어 검사 <br/><br/>\
* KPC 93회 1교시 10번\
',

// Mccabe 순환복잡도
'# 정의 : 코드 논리적 복잡도 측정 기법 / Mccabe / 단순화, 테스팅 목적<br/>\
- Cyclomatic Complexity 회전 복잡도 <br/>\
- Mccabe가 창안한 기법으로 프로그램 단순화, 프로그램 테스팅의 목적으로 코드의 논리적 복잡도를 측정하는 기법<br/><br/>\
# 절차 : 제어흐름도 작성 > 논리 복잡도 측정 <br/><br/>\
# 특징 <br/>\
- DFD 기반 <br/>\
- 복잡할 수록 증가 <br/>\
- 다중선택(case)구조 경우 복잡도 급증 <br/><br/>\
# 복잡도 계산 <br/>\
- e - n + 2 <br/>\
- 폐쇄구간수(region) + 1 <br/>\
- 의사결정 수(if,while) + 조건 수(and or not) + 1<br/><br/>\
# 복잡도 분석 <br/>\
- 단순 : V(g) <= 5 <br/>\
- 구조적안전(단순화필요) : 5 < V(g) < 10 <br/>\
- 매우복잡(루틴분할) : V(g) >= 20 <br/><br/>\
# 단점 <br/>\
- Switch case문 사용시 복잡도 증가 <br/>\
- 데이터 복잡도 측정 x <br/><br/>\
# McCabe SEI 기준 (복잡도 vs 오차율) <br/>\
- 10미만 vs 5% <br/>\
- 11~20 vs 20% <br/>\
- 21~50 vs 60% <br/><br/>\
*[참고] 객체지향 Matrix <br/>\
- Fan-In : 클래스 자신 호출 횟수 <br/>\
- Fan-Out : 자신 클래스 호출 횟수 <br/><br/>\
<img src = "./img/McCabe_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/McCabe_2.png" style = "max-width:100%; height:auto;">\
',

// Haistead Metrics, 객체지향 Metrics
'# 정의 : 연산자, 피연산자 수 기반 규모 산정 <br/>\
- 프로그래밍 언어와 무관하게 연산자와 피연산자의 수를 기반으로 프로그램에 내재된 논리의 규모를 산정하는 방식 <br/><br/>\
# 복잡도 : n1/2 * N2/n2 (n1 : 연산자 개수, n2 : 피연산자 개수, N2 : 피연산자 사용개수) \
',

// Spring Framework
'# 정의 : EJB 기반 OSS Web APP Framework <br/>\
- EJB(Enterprise Java Baen) 기반의 복잡함과 무거움을 극복하고 개발생산성 향상과 고품질의 시스템 개발을 위한 자바 플랫폼 상의 경량화된 오픈 소스 웹 어플리케이션 프레임워크 <br/><br/>\
# 특징 <br/>\
- pojo 기반 <br/>\
- 경량 컨테이너 <br/>\
- test unit <br/>\
- ioc(inversion of control) <br/><br/>\
# 장단점 <br/>\
1. 장점 <br/>\
- 다양형태 트랜잭션 <br/>\
- 설정파일 통한 다양 프레임워크 통합 <br/>\
- 웹 FW와 ORM 지원 <br/>\
- AOP 쉬운 적용 <br/><br/>\
2. 단점 <br/>\
- 기본 선행지식 <br/>\
- 도입위한 추가작업 <br/>\
- layer간 인터페이스 생성 필요 <br/><br/>\
# 구성 : spring core(IoC), aop, dao, spring orm, context, web, mvc \
',

// IOC
'# 정의 : 컨테이너 위임 기법 <br/>\
- Inversion of Control <br/>\
- 기존의 프로그래밍에서 객체의 라이프 사이클을 개발자가 관리하던 것을 컨테이너에게 그 제어권을 위임하는 프로그래밍 기법 <br/><br/>\
# 특징 <br/>\
- 유지보수 용이 <br/>\
- 재사용성 <br/>\
- 테스트 <br/>\
- 자유로운 환경 설정 <br/><br/>\
# 구성 : 빈, 빈펙토리, 애플리케이션컨텍스트, IoC 컨테이너 <br/><br/>\
# DI 유형 <br/>\
1. Setter Injection : 클래스 사이의 의존관계를 연결시키기 위한 방법 <br/>\
2. Constructor Injection : 생성자를 통하여 클래스 사이의 의존관계를 연결시키는 방법 <br/>\
3. Method Injection : SIngleton 인스턴스와 Non Singlton의 의존관계 연결시키는 방법 <br/><br/>\
# 구현 방법 <br/>\
- DL(Dependancy Lookup) : 개발자들이 컨테이너에게 제공하는 API를 이용하여 사용하고자 하는 Bean을 Lookup(의존성 검색) <br/>\
- DI(Dependancy Injection) : 각 클래스 사이에 피룡로 하는 의존관계를 컨테이너가 자동으로 연결(의존성 주입) \
',

// MISRA-C, MISRA-C++
'# 정의 : 임베디드 시스템 C 개발표준 <br/>\
- C언어로 작성된 임베디드 시스템의 코드 안전성, 호환성, 신뢰성 보장 위한 C프로그래밍 개발 표준 <br/>\
- C++언어에 대한 가이드라인으로는 MISRA C++ 존재 <br/>\
- 영국 자동차 산업 신뢰성 협회(MISRA)에서 C프로그래밍 언어 개발표준 <br/><br/>\
# 등장배경 <br/>\
- 코드 에러율 <br/>\
- 컴파일러 자유도 <br/>\
- 이식성 \
',

// node.js
'# 정의 : Google Chrome V8 Javascript Engine 기반 고성능 Framework <br/><br/>\
# 특징 <br/>\
- Javascript 기반 <br/>\
- Event 기반 <br/>\
- Single Thread 기반 <br/>\
- non-blocking I/O \
',

// Javascript
'# 정의 : 동적 웹 지원 스크립트 언어 <br/>\
- 동적인 화면을 웹페이지에 구현하기 위해 웹 브라우저상에서 구동되는 클라이언트 기반의 스크립트 언어 <br/>\
- IoT 시대 경량, 빠른 플랫 폼 핸들러 <br/><br/>\
# 특징 <br/>\
- 성능 : 구동속도 빠름 <br/>\
- 호환성 : OS / Flatform 무관 <br/>\
- 상호운영 : Cross Platform <br/>\
- 편의 : 메모리 관리, UI/UX 강화 <br/>\
- 학습성 : 개발난이도 낮음 <br/>\
- 기능성 : 서버제어 <br/><br/>\
# 고려사항 : 보안, 구현 제한성, 프로그래밍 오류, 암묵적 전역 \
',

// 테스트 7
'# ISTQB의 SW테스트 7가지 원리 <br/><br/>\
# 유형 : 발완초집살정부 <br/>\
<img src = "./img/Test7.png" style = "max-width:100%; height:auto;"><br/><br/>\
- 기타 : 마이어의 법칙, Test Case, 결과 Review, 경제성의 원리, 요르돈의 법칙 (Snow Ball Effect) <br/>\
-> Test Case : 기대되는 표준 결과 포함(테스트 오라클), 예측오류, 기대되지 않은 결함이 있다는 가정 아래 Test Plan 수립 <br/>\
-> 마이어 법칙 : 프로그램 어느부분에서 오류가 존재할 확률은 그 부분에서 발견된 오류수에 비례함 <br/><br/>\
# Grouping <br/>\
<img src = "./img/Test7Rule.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 테스트케이스 사례 <br/>\
<img src = "./img/Test7RuleExample.png" style = "max-width:100%; height:auto;"><br/><br/>\
* KPC 93회 4교시 1번\
',

// 테스트 유형
'<img src = "./img/TestTree.png" style = "max-width:100%; height:auto;">\
', 
 
// 테스트 절차
'<img src = "./img/TestProcessFlow.png" style = "max-width:100%; height:auto;">\
', 

// V-Model 
'# 정의 : 숨어있는 결함 찾기위한 SW 작동 행위,절차 <br/><br/>\
# 절차 <br/>\
- 테스트 계획 : 목표,대상,범위선정 <br/>\
- 테스트 설계 : TC 도출, 원시데이터 수집 <br/>\
- 실행 및 측정 : 환경구축, 수행 <br/>\
- 결과보고 <br/>\
- 오류추적 및 수정 : Causal Effect 분석, 오류 수정<br/><br/>\
<img src = "./img/VModel.png" style = "max-width:100%; height:auto;">\
',

// [시험단계][단계]- 단위 테스트
'# 정의 : 최소단위-모듈 기준 테스트 <br/>\
- 소프트웨어 개발에서 테스트 가능한 최소단위-모듈을 기준으로 결함을 찾고, 기능을 검증하는 활동 (화면, Component(CBD), Class) <br/><br/>\
# 특징 <br/>\
- 화이트 테스트 테스트 기법 활용 <br/>\
- 개발자 중심 테스트 <br/>\
- 개발소스 중심 <br/><br/>\
# 유형 <br/>\
- I/F : 파일속성, 매개변수 <br/>\
- 자료구조 : 변수 초기화, Type 일관성 <br/>\
- 수행경로 <br/>\
- 오류처리 : 오류메시지 상세정보제공<br/>\
- 경계값\
',

// [시험단계][단계]- 통합 테스트
'# 정의 : 상호작용 결합 기능 검증 / 컴포넌트, I/F <br/>\
- 개발된 모듈, 서비스를 조합하여 최종 SW를 구성할 때, 컴포넌트들 사이의 상호작용, 사용자 I/F와 상호작용의 결함과 기능을 검증하는 활동 <br/><br/>\
# 특징 <br/>\
- 단위 테스트 완료된 모듈 대상, 모듈간 상호작용 중심 테스트 <br/><br/>\
# 통합 방식 <br/>\
1. 빅뱅 방식 <br/>\
- 개념 : 전체 모듈을 통합하여 한번에 테스트를 수행하는 비점진적 방식 <br/>\
- 장점 : 단시간에 수행 가능 <br/>\
- 단점 : 오류 발견 어렵고 수정 어려움 <br/><br/>\
2. 점진적 방식 <br/>\
- 개념 : 모듈 단위별로 점차적으로 통합하는 방식 <br/>\
- 장점 : 오류 발견 및 수정 용이 <br/>\
- 단점 : 장시간 소요 가능 <br/><br/>\
# 점진적 통합 방식 상세 <br/>\
1. 하향식 통합 (Top-Down) <br/>\
- 개념 : 상위 모듈을 통합후 세부 모듈 추가 통합하는 방식 <br/>\
- 절차 <br/>\
1) Test Stub 작성 및 하위 세부 모듈을 대체 <br/>\
2) 점진적 통합하여 Test Stub을 실제 모듈로 교체 <br/>\
3) 모듈 통합과 테스트를 반복적 수행 <br/>\
4) 회귀 검사 수행 <br/><br/>\
2. 상향식 통합 (Bottom-Up) <br/>\
- 개념 : 하위 모듈에서 상위 모듈로 통합하는 방식 <br/>\
- 절차 <br/>\
1) 하위 모듈을 클러스터로 결합 <br/>\
2) Test Driver 작성 <br/>\
3) 클러스터 검사 <br/>\
4) Test Driver 제거 및 클러스터 상위 모듈로 이동 <br/><br/>\
3. 혼합식 통합 (Sandwich) <br/>\
- 개념 : 하위 수준에서는 상향식 통합, 상위 수준에서는 하향식 통합을 혼합적으로 사용하여 점진적으로 통합하는 방식 <br/>\
- 선정된 모듈 중심 통합, Stub & Driver 필요 <br/><br/>\
* 그리타 \
',

// [시험단계][단계]- 시스템 테스트
'# 정의 : 사용자 요구사항 만족 테스트 / 기능,비기능 <br/>\
- 소프트웨어를 사용자에게 인도하기 전에 사용자 요구사항을 만족하는지 기능 및 비기능 요구사항에 대하여 진행하는 테스트<br/><br/>\
# 종류 <br/>\
- 회복 : 고의 실패유도, 회복수행 <br/>\
- 보안 : 비 인가자의 침투로부터 시스템 보호 수준 테스트 <br/>\
- 강도 : 과다정보량 부과 <br/>\
- 성능 : 응답시간, 처리량, 메모리활용도, 처리속도 / 루프백, 스파이크, 가용성 테스트<br/>\
- 구조 : SW 논리경로 복잡도 <br/><br/>\
# 성능지표 <br/>\
- CPU <br/>\
1) MIPS(Millions of Instructions Per Second) <br/>\
2) NW : BPS, PPS <br/>\
3) HW : TPC(Transaction Processing Performance Council) <br/>\
4) CS 시스템 : TPS \
',

// 성능 테스트
'# 정의 : 비기능 목표치 달성 시험 <br/>\
- 소프트웨어 프로그램이 주어진 환경하에서 응답속도, 처리량, 처리속도 등의 항목에 대하여 요구 되어진 목표치를 달성하는지를 확인하는 시험 <br/><br/>\
# 유형<br/>\
1. 방법 (루스티가) <br/>\
- 루프백 : 업무별 병목지점 <br/>\
- 스파이크 : 임계 측정 목표 <br/>\
- 티어 테스트 : 구간별 병목 <br/>\
- 가용성 : 업무처리의 가용성 측정 <br/><br/>\
2. 목적 (단복임확)<br/>\
- 단위성능 <br/>\
- 복합성능 : 가중치 적용 <br/>\
- 임계성능 : 임계도달 <br/>\
- 확장성 : 증설전후 성능 <br/><br/>\
* Little\'s Law : 공간 내에 머무는 객체수(L)는 객체의 공간 유입량(A)과 객체가 머무는 시간(W)에 비례한다 <br/>\
- L = AW \
',

// TPC
'# 정의 : OLTP 성능 규격 제공 기관 <br/>\
- Transaction Processing Performance Council <br/>\
- OLTP (Oline Transaction Processing) 시스템의 처리 성능을 측정하는 성능평가 기준의 표준 규격을 제공하기 위해 결성된 비영리 성능 평가 기관 <br/><br/>\
# 평가기준 <br/>\
- TPC-C : 트랜잭션 처리 속도 <br/>\
- TPC-E : 메모리 디스크 용량 산정 <br/>\
- TPC-H : 의사결정 지원 <br/>\
- TPC-App : 일반적 작업 수행 정도 초단위 측정 (단위 : SIPS) \
',

// SPEC 
'# 정의 : 컴퓨터 성능 측정 비영리 단체 <br/>\
- Standard Performance Evaluation Cooperation <br/>\
- 컴퓨터의 성능을 측정하기 위한 벤치마크 테스트 프로그램의 개발과 테스트 수행하는 선 마이크로시스템즈에 의하여 설립된 비영리 단체 <br/><br/>\
# 평가기준 <br/>\
- SPEC CPU2006 : CPU 벤치마크 모델 <br/>\
- SPEC jbb2015 : Java 비즈니스 응용 위한 모델 <br/>\
- SPEC jEnterprise2010 : Java Enterprise Edition 최신 Application 서버 DB 평가 모델 <br/>\
- SPEC virt_sc2013 : 서버가상화 위한 데이터 센터 서버 평가 모델 \
',

// Little's Law
'# 정의 : 객체수 유입량,시간 연관 법칙 <br/>\
- 공간내에 머무르는 객체수(N)는 객체의 공간 유입량(T)와 객체가 머무는 시간(R)에 비례함에 대한 법칙 <br/><br/>\
# TPS = AU / MRT <br/>\
- TPS : 성능 <br/>\
- AU : 사용자 <br/>\
- MRT : 평균응답시간 \
',

// [시험단계]- 인수 테스트 
'# 정의 : 구입자 운영환경에서 공급자에 의해 실시되는 테스트 <br/>\
- 계약상의 요구사항이 만족 됐는지 확인 위해, 설치후 "구입자 운영 환경"에서 공급자도 참여하여 "공급자에 의해" 실시되는 시스템 또는 기능 단위 공식 테스트 <br/><br/>\
# 유형 <br/>\
1. 비공식 <br/>\
- 알파 : 개발자 환경에서 사용자가 수행 <br/>\
- 베타 : 일정수 사용자 테스트 후 피드백 <br/>\
- 감마 : 필드 <br/><br/>\
2. 공식 <br/>\
- 사용자 인수 테스트 : 사용자, 사용성 <br/>\
- 운영자 인수 테스트 : 시스템 관리자, 백업/복원, 재난복구, 보안취약성 점검 <br/>\
- 계약사 인수 테스트 : custom-developed sw 계약범위 <br/>\
- 규정 인수 테스트 : 법률, 정부지침\
',

// [시험단계][테스트 유형][시각]- 확인/검증 
'# 검증(Verification) : 개발자 시각 입증<br/>\
- 개발자 혹은 시험자의 시각으로 소프트웨어가 명시된 기능을 올바로 수행하는지 알아보는 과정 <br/><br/>\
# 확인(Validation) : 사용자 시각 입증<br/>\
- 사용자 시각으로 올바른 소프트웨어가 개발되었는지를 입증하는 과정 \
',

// 정적 테스트
'# 정의 : 테스트 기법 / 시스템 구현전 / <br/>\
- 소프트웨어를 실행시키지 않은 채, 결함을 검출하는 방법 <br/>\
- 특정한 판단기준을 가지고 오류를 찾는 테스트 <br/><br/>\
# 유형 <br/>\
1. 수동 (피인워)<br/>\
- Peer Review : 동료간 상호교차 <br/>\
- Inspection : 공식적 검토 <br/>\
- Work Through : 요구사항, 소스코드, 비공식 <br/><br/>\
2. 자동 <br/>\
- 커버리지 : 코드 모든부분 수행 <br/>\
- 규칙 위반 검사 : 연산, 규칙 <br/>\
- 잠재적 결함 검사 : 런타임 오류, 내재 결함 <br/><br/>\
* 아이리포 23회 3교시 5번\
',

// [시험단계][테스트 유형][프로그램 실행여부][정적테스트]- Peer Review
'# 정의 : 상호교차 수행 활동 / 산출물, 제품 <br/>\
- 프로젝트 수행 과정에서 각 진행 단계별로 발생하는 산출물 또는 제품에 대해서 동료들이 상호 교차하여 검토를 수행하는 활동 <br/><br/>\
# 구성요소 <br/>\
- 관찰 대상 범위 : SDLC 단계별 산출물의 범위 및 기준선 여부를 확인 <br/>\
- 참여자 구성원 : 중재자, 검토자, 저자, 기록자 등의 정보를 수집하여 구성 <br/>\
- 체크리스트 항목 : 산출물에 대한 요구사항 명세서, 추적표, 설계 구현내용을 확인 <br/>\
(조기결함 발견을 통한 품질문제 예방 및 비용절감이 가능하며, 상호검토를 통해 설계자 및 개발자의 역량 향상이 가능)\
',

// [시험단계][테스트 유형][프로그램 실행여부][정적테스트]- Walkthrough
'# 정의 : 결함발견, 정보수집, 내용평가, 합의도출, 학습등의 목적 수행 리뷰 유형 <br/>\
- 인스펙션과 프로세스가 유사하지만, 결함발견, 정보수집, 내용 평가, 합의 도출, 학습등의 목적으로 수행하는 리뷰의 유형 <br/><br/>\
# 특징 <br/>\
- 작성자(Author)에 의해 주도되는 미팅<br/>\
- 시나리오들<br/>\
- 리허설(dry runs)<br/>\
- 동료 그룹 <br/><br/>\
# 구성<br/>\
- 내부인원 <br/>\
- 결함해결책 <br/>\
- 진행(작성자 주도) <br/><br/>\
# 종류 <br/>\
- 요구사항 Walkthrough <br/>\
- 소스코드 <br/>\
- 테스트 <br/><br/>\
# 진행 절차 <br/>\
1. 미팅 준비(사전자료제공) <br/>\
2. 미팅(모듈 실행, 해결책 도출) \
',

// [정적테스트]- 인스펙션 
'# 정의 : 공식적 평가 기법 / 개발 표준 위배사항 / 문제점 찾기 목적 <br/>\
- 개인 또는 그룹이 SDLC에서 개발 표준위배사항, 기타문제점을 찾는 것을 목적으로 하는 공식적 평가기법 <br/><br/>\
# 암기 <br/>\
- 준수원칙(5) : 문체회참충 <br/>\
- 절차(6) : popmrf <br/><br/>\
# 준수원칙 : 문서검토준비, 체크리스트, 회의시간 제약, 참석자4-6, 중재자(Moderater) <br/><br/>\
# 참석자 : 중재자(Moderator), 개발자(Author), 낭독자(Reader), 기록자(Recorder), 검토자(Inspector) <br/><br/>\
# 절차 : popmrf <br/>\
- 플랜 > 오버뷰 > 프리페어 > 미팅 > 리워크 > 팔로업 <br/>\
- 산출물(2) : 검사 보고서, 체크리스트 <br/><br/>\
# 종류(3) <br/>\
- 시스템 설계 : SW 요구, 성능명세 I/F <br/>\
- 상세 설계 : 모듈 설계 <br/>\
- 코드 \
',

// 페이건 인스펙션
'# 정의 : 페이건 / 비용절감 기법 / 사업초기 전문 인력 <br/>\
- 페이건이 만든 인스펙션 기법, 사업초기부터 전문인력을 투입하여 조기불량율을 낮추고 품질향상을 도모하여 비용을 절감하는 기법',

// 동적 테스트
'# 정의 : 테스트 기법 / 직접 실행 <br/>\
- 직접 실행 시켜보면서 SW가 예상대로 작용하는지의 여부를 판정하는 테스트 기법<br/><br/>\
# 구성요소 <br/>\
- 테스트 케이스 : 절차, Data, Result<br/>\
- 테스트 웨어 : Driver, Stub, Engine <br/>\
- 테스트 결과 : 오류 리스트, 결과 <br/><br/>\
# 종류 <br/>\
1. 명세기반 <br/>\
- 동등분할 : 영역별 분할 <br/>\
- 경계값 분석 : 경계값 부근 <br/>\
- 결정 테이블 : 결정 테이블 이용 <br/>\
- 상태전이 테스트 : 정의된 상태 변경 <br/><br/>\
2. 구조기반 <br/>\
- 커버리지 : White Box Test <br/>\
- 제어 흐름 : 흐름, 논리적 경로 <br/><br/>\
3. 경험 기반 <br/>\
- 탐색적 : 발견론적 <br/>\
- 분류트리 : 시나리오 결과 분류 <br/>\
- 체크리스트 : 동작 확인 <br/><br/>\
* 아이리포 23회 3교시 5번 <br/>\
* 라이지움 86회 2교시 4번\
',

// [시험단계][테스트 유형][프로그램 실행여부][동적 테스트]- Black Box TEST / 명세기반 테스트
'# 정의 : 명세서 기반 테스트<br/>\
- 명세기반 테스트 <br/>\
- 분석 및 설계 명세서를 바탕, 테스트 케이스화 작성, 모델의 결함을 발견하는 테스트 <br/><br/>\
# 종류 (동경원D상페도유) <br/>\
1. 동등분할 <br/>\
<img src = "./img/BlackBox_1.png" style = "max-width:100%; hegiht:auto;"><br/>\
- 데이터의 구간별 대표 값 도출, 테스트 기법 <br/>\
- 상호 독립적 등가집합 <br/><br/>\
2. 경계값 <br/>\
<img src = "./img/BlackBox_2.png" style = "max-width:100%; hegiht:auto;"><br/>\
- 경계 값 주변 다수 결함 발생 원리 이용 <br/>\
- 유효, 비유효 경계 값 고려한 케이스 설계 <br/>\
- 경계치에 치중하며 출력 유형 고려 <br/><br/>\
3. 원인결과 그래프 <br/>\
<img src = "./img/CauseEffectGraph.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
4. Decision Table <br/>\
<img src = "./img/BlackBox_3.png" style = "max-width:100%; hegiht:auto;"><br/>\
- 조건에 따른 참/거짓 조합으로 케이스 작성 <br/>\
- 조건과 상황기반 <br/>\
- 비즈니스 규칙의 명세화 <br/><br/>\
5. 상태전이 <br/>\
<img src = "./img/StateTransitionTesting.png" style = "max-width:100%; hegiht:auto;"><br/>\
- 상태 변화 요소들의 조합, 테스트 케이스 작성 <br/>\
- 상태전이, 상태를 변하시키는 입력과 이벤트의 모든 조합을 포함하는 전이 테이블 정의 후 테스트 케이스를 설계 <br/><br/>\
6. 페어와이즈 <br/>\
<img src = "./img/BlackBox_4.png" style = "max-width:100%; hegiht:auto;"><br/>\
- 상호작용 조합을 이용한 테스트 케이스 최소화 <br/>\
- 상호작용 요소 식별 <br/>\
- 경험적 의미 조합 <br/><br/>\
7. 도메인 <br/><br/>\
8. 유즈케이스 D<br/>\
- Use case 명세서를 이용한 테스트 케이스 설계 <br/>\
- 기본 흐름과 대안 흐름 고려 <br/>\
- 프로세스 흐름 확인 가능 <br/><br/>\
* 122회 3교시 4번\
',

// [시험단계][테스트 유형][프로그램 실행여부][동적 테스트][BlackBox]- 동등분할
'# 정의 : 상호 독립적 분할 테스팅 <br/>\
- 입력값/출력값 영역을 상호독립적으로 나누어 시험사례 유형들을 분할하여 테스팅 <br/><br/>\
# 사례 <br/>\
- 입력데이터 x값이 0 ~ 100 사이여야 한다면 <br/>\
-> TC를 (x<0), (x=50), (x>100) 으로 분할하여 적용 <br/>\
- 입력데이터 x값이 0.100 이라면 <br/>\
-> TC를 0.100, 0.101\
',

// [시험단계][테스트 유형][프로그램 실행여부][동적 테스트][BlackBox]- 경계값분석
'# 정의 : 경계값 포함 테스팅 <br/>\
- 경계부분에 해당하는 입력값에서 결함이 발생될 확률이 높기 때문에 경계값을 포함하여 테스팅 <br/><br/>\
# 사례 <br/>\
- x 값이 0~100 사이여야 한다면 <br/>\
-> TC를 (x=0), (X=100) 으로 정의 <br/><br/>\
# 경계갑 선택 지침 <br/>\
- 범위 : 범위 끝 유효 입력값, 범위 바로 바깥 유효하지 않은 입력값 <br/>\
- 몇 개의 값 : 입력값의 최소값과 최대값을 선택 <br/>\
- 파일/리스트/테이블과 같은 정렬된 집합 : 첫번째, 마지막 항목 \
',

// [시험단계][테스트 유형][프로그램 실행여부][동적 테스트][BlackBox]- 원인결과그래프
'# 정의 : 그래프 형태 테스트 케이스 생성 방법 <br/>\
- 자연어로 작성된 명세를 구조화되고 형식화된 그래프 형태로 변환하여 논리적인 상태와 결과의 관계를 표시하여 테스트 케이스를 생성하는 방법 <br/><br/>\
# 구성 <br/>\
- 기본 부호(Identity) : Not OR AND <br/>\
- 제약사항 기호 : Exclusive, Inclusive, Require, One and Only One, Masks <br/>\
- 원인 <br/>\
- 결과 <br/>\
- 인과 그래프 <br/><br/>\
# 절차 <br/>\
- 부분 기능 분할 <br/>\
- 원인, 결과에 일련 번호 할당 <br/>\
- 인과 그래프 작성 <br/>\
- 제한조건 표시 <br/>\
- 결정 테이블 작성 <br/>\
- 중복 축소 <br/>\
- 테스트 케이스 변환 <br/><br/>\
',

// [시험단계][테스트 유형][프로그램 실행여부][동적 테스트][BlackBox]- Decision Table
'# 정의 : 입력 조건 조합 테스트 케이스 도출 <br/>\
- 입력 조건의 모든 조합에 대한 시스템의 액션을 고려하여 테스트 케이스를 도출하는 방법 (조건과 행동으로 구분) <br/><br/>\
# 방법<br/>\
- 조건분석 <br/>\
- 조건은 위, 결과는 아래에 위치한 테이블 생성 <br/>\
- 모든 조건의 조합과 각 결과 기입 <br/>\
- 불가능 조건 조합 삭제 <br/>\
- 동일한 행동을 유발하는 조건 제외\
',

// [시험단계][테스트 유형][프로그램 실행여부][동적 테스트][BlackBox]- 상태전이 테스트
'# 정의 : 입출력 상태 식별 조합 고려 테스트 케이스 도출 <br/>\
- 상태를 가지는 프로그램의 모든 입출력 상태를 식별하고 도달 가능한 모든 상태의 입력 조합을 고려하여 테스트 케이스를 도출하는 방법 <br/><br/>\
# 절차 <br/>\
- 상태전이도 모델링 <br/>\
- 상태-이벤트 테이블 작성 <br/>\
- 상태 전이 트리 작성 <br/>\
- 테스트 케이스 도출 <br/>\
- 비정상 케이스 도출 <br/><br/>\
<img src = "./img/StateTransitionTestingMarking.png" style = "max-width:100%; hegiht:auto;">\
',

// [시험단계][테스트 유형][프로그램 실행여부][동적 테스트][BlackBox]- 페어와이즈
'# 정의 : 테스트 케이스 도출을 위한 기법 <br/>\
- 커버해야 할 기능적 범위에 비해 상대적으로 적은 양의 테스트 세트 구성하여 SW 결함 찾고, 테스트에 대한 확신 얻을 수 있는 테스트 방법 <br/>\
- 합리적으로 일정 수준의 보장성을 확보하면서 조합(케이스) 수를 줄여주는 테스트 방법 <br/><br/>\
# 원리 <br/>\
- 대부분 결함이 2개 요소의 상호작용에 따라 발생 <br/>\
- 필요한 각 값들은 다른 파라미터 값과 최소 한번씩은 조합을 이루는 테스트 케이스 사용 <br/><br/>\
# 사례 <br/>\
<img src = "./img/PairWise.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
# 한계 <br/>\
- 모두 발견 불가능 <br/>\
- 극복방안 : 자동화툴, 집중 테스트 <br/><br/>\
# 사용전략 <br/>\
- 경적 조합 전략 <br/>\
- 기능, 시간, 비용, 품질수준 고려 테스트 전략 수립 \
',

// [시험단계][테스트 유형][프로그램 실행여부][동적 테스트][BlackBox]- 도메인 테스트
'# 정의 : 상관관계 영역 분할 테스트 <br/>\
- 입력 변수들간에 상관관계가 존재하며 상관관계에 따라 영역을 분할하고 테스트 케이스를 도출하는 방법 <br/><br/>\
# 특징 <br/>\
- 경계값 분석의 확장형 <br/>\
- 상호작용하는 요소들에 대한 적합 <br/>\
- 테스트 케이스 수가 변수 <br/>\
- 요소에 의해 커질 수 있음 <br/><br/>\
# 구성 <br/>\
- IN : 경계값 내-TRUE <br/>\
- OUT : 경계값 외- FALSE <br/>\
- ON <br/>\
1) = : 경계값 TRUE <br/>\
2) <> : FALSE <br/>\
- OFF <br/>\
1) = : FALSE <br/>\
2) <> : TRUE <br/><br/>\
<img src = "./img/도메인테스트.png" style = "max-width:100%; hegiht:auto;">\
',

// [시험단계][테스트 유형][프로그램 실행여부][동적 테스트]- 구조기반 테스트',
'# 정의 : Whitebox TEST<br/>\
- 프로그램 내부 구조 및 복잡도 검증, 코드 구조의 효율성 및 오류사항 발견, Logic Driven 방식 <br/><br/>\
<img src = "./img/SWE_22_2.PNG" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/SWE_22_3.PNG" style = "max-width:100%; height:auto;"><br/><br/>\
# 종류 : 제자루 <br/>\
- 제어흐름 <br/>\
- 자료흐름 <br/>\
- Loop 테스트 <br/>\
- 기초 경로\
',

// [시험단계][테스트 유형][프로그램 실행여부][동적 테스트][구조기반]- 제어흐름 테스트
'# 정의 : Test Path 순회 입력 테스트 <br/>\
- 요구사항 문서-> 동적 제어흐름 그래프 모델 생성 -> Test Path 선택 순회하는 입력 값을 테스트 데이터 <br/><br/>\
# 종류 : 문장, 결정, 조건, MC/DC <br/><br/>\
# 목적 : Control Flow 오류감지 <br/><br/>\
# 시험 설계 : Statement, Branch, Condition Coverage \
', 

// 테스트 커버리지
'# 정의 : 소프트웨어의 테스트 수행시 얼마나 테스트가 충분한가를 나타내는 지표 <br/><br/>\
# 암기 <br/>\
- 코드의 구조(3) : 구조결 <br/>\
- 종류(6) : 구결조조변다 <br/><br/>\
# 구성 : 구문, 부분조건식, 전체조건식, 결정포인트 <br/><br/>\
# 유형 <br/>\
- 구문(Statement-SC) : 명령문 <br/>\
- 결정(Decision-DC) : 전체 조건식 <br/>\
- 조건(Condition-CC) : 부분조건 <br/>\
- 조건결정(CDC) : 부분, 전체조건 <br/>\
- 변형조건결정(MC/DC) : 개별조건식 <br/>\
- 다중조건(Multiple-MCC) : 개별조건 모든 조합 <br/>\
=> 분기n경우 MC/DC는 n+1, MCC는 2^n <br/><br/>\
<img src = "./img/Coverage.png", style = "max-width:100%; height:auto;"><br/><br/>\
* 라이지움 86회 2교시 4번\
',
  
// MCDC
'# 정의 : 개별조건식 <br/>\
- 의사결정에 포함된 기본 조건이 다른 조건과 독립적으로 구성되며, 그에 따른 결과가 테스트 데이터 집합에 의해 실행된 코드의 정도로 Condition / Decision 커버리지를 향상시킨 테스트 커버리지 <br/><br/>\
# 특징 <br/>\
- 결과에 독립적 <br/>\
- N+1 Test Case <br/>\
* 모든 조건 중에 결과에 영향 없는 조건 빼기 <br/><br/>\
# 사례 (대N중테) <br/>\
<img src = "./img/MCDC_Example.png", style = "max-width:100%; height:auto;">\
',

// [시험단계][테스트 유형][프로그램 실행여부][동적 테스트][구조기반]- 자료흐름 테스트
'# 정의 : definition-use paris 이행 설계 테스트 설계 기법 <br/>\
- 테스트 케이스가 변수들의 정의-사용쌍(definition-use pairs)을 이행하도록 설계하는 화이트박스(white box) 테스트 설계 기법 <br/><br/>\
# 특징 <br/>\
- 데이터 중심 <br/>\
- 독립적인 전문 테스트 의한 시험 수행 <br/>\
- 데이터 기준 및 시험 이상현상 항목 명확화 <br/>\
- 데이터 흐름 오류 감지 <br/><br/>\
# 구성(데이터 사용 유형) : DKU<br/>\
- d-정의 : defined, create, initialized <br/>\
- k-소멸 : killed, undefined, released <br/>\
- u-사용 : use, (c:연산, use in calcuation, p:결정 use in predication) <br/><br/>\
# 테스트 기준 : NED PC UP <br/>\
- all-node : statement <br/>\
- all-edge : statement의 흐름/결정 <br/>\
- all-dfes : 정의된 변수 변경전 활용되는 path <br/>\
- all-p-use : 변경되지 않고 결정활용되는 path <br/>\
- all-c-use : 변경되지 않고 연산활용되는 path <br/>\
- all-uses <br/>\
- all-paths <br/>\
- all-c-use / som-p-use <br/>\
- all-p-use / som-c-use \
',

// 경험기반 테스트
'# 정의 : 테스트 케이스 추출 기법 / 유사 App / 경험 / 직관 /능력 <br/>\
- 이전의 유사 App이나 기술에서의 경험, 직관, 테스터의 능력으로부터 테스트 케이스를 추출하는 기법 <br/><br/>\
# 암기 <br/>\
- 기법 : 오분탐체특 <br/><br/>\
# 특징 : Formal 기법이 찾기 어려운 결함 발견, 테스터의 경험에 따라 효과성의 차이가 존재 <br/><br/>\
<img src = "./img/경험기반테스트.png" style = "max-width:100%; height:auto;">\
',

// [경험기반 테스트]- 탐색적 테스팅 
'# 정의 : 경험기반 테스트 <br/>\
- Exploratory Testing <br/>\
- 직전의 테스트를 통해 얻은 통찰력을 다음 테스트에서 충분히 활용하면서 테스트 설계와 수행을 동시에 수행하는 휴리스틱 테스트 기법<br/><br/>\
# 특징 : 시간제한, 창의적 접근, 학습과 진화, 구조화된 관리, 테스트 의존적 <br/><br/>\
# 구성 <br/>\
- 테스트 차터 : 목표, 비전 / 테스트 설계서 <br/>\
- 타임 박스(테스트 세션) : 테스트 시간 / Short (60), Normal (90), Long (120) <br/>\
- 테스트 노트 : 최소한 설명 기록 / 목표, 특이사항, 수행시간 <br/>\
- 요약 보고(회고) : 경험 공유 / 5 ~ 10분 진행 <br/><br/>\
# 프로세스(Cycle) <br/>\
<img src = "./img/ExploratoryTestingProcess.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 테스트케이스 기반 테스트 비교 <br/>\
<img src = "./img/ExploratoryCaseCompare.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 아이리포 24회 관리 3교시 3번\
',

// [시험단계][테스트 유형][프로그램 실행여부][동적 테스트][경험기반][탐색적 테스팅]- 테스트 차터
'# 정의 : 이후 진행될 테스트 방향 조정 역할 <br/>\
- 테스트 수행시 주어진 테스팅 세션 시간 동안 커버해야할 테스팅 조건, 진행결과를 기반으로 이후 진행될 테스트 방향을 조정하는 역할 <br/><br/>\
# 구성 <br/>\
- 해당 세션에 대한 미션(목적) <br/>\
- 테스트 방법 <br/>\
- 발견 유형 문제 <br/>\
- 사전에 작성된 결함(Often created in advance) <br/>\
- 범위와 세부내용의 유연성 (Extent and level of detail flexible) \
',

// [시험단계]- 테스트 하네스
'# 정의 : 시험 지원 목적 코드, 데이터 <br/>\
- 시스템 및 시스템 컴포넌트를 시험하는 환경의 일부분으로 시험을 지원하는 목적하에 생성된 코드와 데이터 <br/><br/>\
# 구성 (스하드상) <br/>\
- Test Stub : 가상의 하위 모듈, 하향식(Top Down), 호출되어 결과값을 리턴 <br/>\
- Test Driver : 가상의 상위 모듈, 상향식(Bottom-Up)에 필요, 호출 기능만을 수행 <br/><br/>\
# 활용 : TUD, 자산화하여 회귀테스트 자동화에 활용 \
',

// 테스트 더블
'# 정의 : 대체 위한 테스트용 객체<br/>\
- 오리지널 객체 사용 어려운 경우, 실제구성요소 서버를 대체 위한 테스트용 객체 <br/><br/>\
# 유형 <br/>\
- Dummy Object : 구현제외 I/F, 객체자체 기능x <br/>\
- Test Stub : 기본 클래스 최소구현, 로직x, 값리턴 <br/>\
- Test Spy : 인스턴스 Client 제공, 호출멤버확인, 이력 <br/>\
- Fake Object : 완전구성, 느리거나 DB 미구성 <br/>\
- Mock Objecdt : Lib 사용 동적 데이터 처리 \
',

// 테스트 자동화 도구
'# 정의 : 테스트 수행시간 줄여주는 도구 <br/>\
- 테스트를 수행하는데 필요한 작업을 자동화하여 테스트 수행 시간을 줄여주는 도구 <br/><br/>\
# 특징 : 속도, 효율성, 정확성, 정밀성, 리소스절감, 지속성 <br/><br/>\
# 유형 <br/>\
1. 테스트 관리 지원도구 <br/>\
- 테스트, 요구사항, 형상 <br/><br/>\
2. 테스트 설계 지원도구 <br/>\
- 설계, 테스트 케이스 생성 <br/><br/>\
3. 정적테스트 지원도구 <br/>\
- 코드, 데이터 분석, 구조,순서 검사 <br/><br/>\
4. 동적테스트 지원도구 <br/>\
- 단위, 테스트 실행, 성능 테스트, 커버리지 측정, 동적 분석, 모니터링, 보안 검사 <br/><br/>\
* KPC 96회 관리 2교시 4번\
',

// 정적분석도구 
'# 정의 : 소스코드의 코딩표준, 스타일, 복잡도, 잔존결함 발견도구 <br/><br/>\
# 절차 <br/>\
1. 서버-엔진(SonarQube)에서 정적분석 결과 생성 및 DB 저장 <br/>\
2. 분석도구의 분석툴 이용 CI 서버 연계로 분석 <br/><br/>\
# 분류 <br/>\
- 코드분석 도구 <br/>\
- 구조검사 도구 <br/>\
- 의미기반 분석도구 \
',

// Record and Replay
'# 정의 : 결과 확인 방법 / 타겟 시스템 / 이벤트 기록 /테스트 스크립트 구성 / 재수행 <br/>\
- 타켓 시스템에서 발생하는 사용자 입력 및 외부 이벤트를 기록해서 테스트 스크립트로 구성하고 이를 재수행하여 결과를 확인하는 방법<br/><br/>\
# 암기 <br/>\
- 절차(9) : 캡이송저재이T임전 <br/><br/>\
# 특징(3) <br/>\
- 이벤트 시스템 대응여부 확인 <br/>\
- 이벤트 <br/>\
- 임베디드 시스템 사용 <br/><br/>\
# 절차(2) <br/>\
- Record(4) : 캡처시작 > 이벤트 후킹 > 송신 > 저장 <br/>\
- Replay(5) : 테스팅 재수행 > 이벤트 검색/변환 > Test Agent 전달 > 임베디드 시스템 전달 > 전달결과 <br/><br/>\
# 구성 <br/>\
- Test Agent <br/>\
- Test Target : 임베디드 SW <br/>\
- Event Hooking <br/>\
- Recorder <br/>\
- XML Repository<br/>\
- RePlayer <br/>\
- Reporter <br/><br/>\
# 활용 : 이벤트기반 시스템 테스트, 임베디드 SW 테스트 적합<br/><br/>\
<img src = "./img/RnR.png" style = "max-width:100%; hegiht:auto;">\
',

// 테스트 오라클 
'# 정의 : 미리 정의한 참 값 비교 방법 <br/>\
- 테스트 수행결과 판단하기 위해 미리 정의한 참 값을 대입하여 비교하는 방법 <br/><br/>\
# 특징 <br/>\
- 제한된 검증 <br/>\
- 수학적 기법 <br/>\
- 전문지식 <br/>\
- 자동화기능 <br/><br/>\
# 유형 <br/>\
- 참 : 회귀, 임베디드 SW <br/>\
- 샘플링 : 연구용 SW, 인공지능 <br/>\
- 휴리스틱 : 통계분석 <br/>\
- 일관성 검사 : Consistent Oracle, 상용 SW <br/><br/>\
# 구성 <br/>\
- 요구 명세서 <br/>\
- 시스템 제약 <br/>\
- 테스트 오라클 <br/>\
- 테스트 자동화 도구 <br/>\
- 테스트 케이스 <br/>\
- TestDB (결과보고) <br/>\
- 분석 및 보고 <br/>\
- 개선 활동 \
',

// 회귀 테스트 
'# 정의 : 변경후 검증 테스트 <br/>\
- 프로그램 변경후 영향 받는 기존 프로그램의 테스트를 수행하여 신규결함 유입여부를 검증하는 테스트 기법 <br/><br/>\
# 목적 <br/>\
- Ripple Effect : 파급효과 <br/>\
- Side Effect : 부작용 <br/><br/>\
# 절차 <br/>\
- Smoke Test <br/>\
- Test 진행 <br/>\
- 결과 기록 및 사후 검증 <br/><br/>\
# 기법 <br/>\
- reset all <br/>\
- selectivity <br/>\
- Priority <br/><br/>\
# 고려사항 : 전략적 Test Case 설계, 주요대상 선정, 반복횟수 선정, Test Case 관리, 추가적 테스팅 기법 활용 , stub/driver 재사용, Record&Replay\
',

// 위험기반 테스트
'# 정의 : 테스트 전략 / 우선순위 / 자원 집중 <br/>\
- 비즈니스/기술상 위협 정량 측정하여 우선순위 높은부분 테스팅 자원집중, 전체영향 줄이는 테스트 전략<br/><br/>\
# 암기 <br/>\
- 절차(4) : 식분대전추 <br/>\
- Risk Mtrix 영역(4) : 스타, 쓰타, 이타, 에프타 <br/>\
- 발장 : 엄강집기 <br/><br/>\
# 절차 <br/>\
- 위험식별 : 위험아이템, 카테고리 <br/>\
- 분석 : 위험/영향 Matrix <br/>\
- 리스크대응 계획 : 완화 방안 <br/>\
- 테스팅 전략 수립 : Master Test Plan <br/>\
- 리스크 추적 : 위험추적/관리대장 <br/><br/>\
# 효율화 방안 <br/>\
- 단계별 테스팅 <br/>\
- 선택과 집중 <br/>\
- 경험기반 테스트 병행 <br/>\
- 사용자 참여 유도 <br/>\
- 기술중심 테스트 <br/>\
- 테스트 자원 집중 분배 <br/><br/>\
# 리스크 매트릭스 : Y-발생가능성(Likelihood), X-장애영향(Impact)<br/>\
- 상상 : STA(엄격한 Server Test Area) 재테스팅 3회, Full Regession Test <br/>\
- 상하 : SSTA(강한 Strong Test Area) 재테스팅 2회, Full Regession Test <br/>\
- 하상 : ITA(집중 Intensive Test Area) 재테스팅 1회, Partial Regession Test <br/>\
- 하하 : FTA(기본 Fundamental Test Area) 재테스팅 1회, 확인 테스트 <br/><br/>\
# 유사 개념 <br/>\
- 결함 테스트 : 미발견 결함 탐색<br/>\
- 확인 테스트 : 수정 결과 확인 <br/>\
- 회귀 테스트 : 영향테스트 <br/><br/>\
* 제품리스크 = 가능성 * 손실 <br/><br/>\
<img src = "./img/RBT.png", style = "max-width:100%; height:auto;">\
',

// 소프트웨어 보안 테스팅
'# 정의 : 테스팅 기법 / SW 배포전 / 강건성 / 보안성 확인 예방 <br/>\
- SW배포전 강건성(Robustness)과 보안성을 확인하여 보안 취약점 예방 위한 테스팅 기법 <br/><br/>\
# 암기 <br/>\
- 목적(3) : 강보취 <br/>\
- 방법(5) : 위정퍼취침 <br/><br/>\
# 분류 : 정적분석, 동적분석 <br/><br/>\
# 방법 <br/>\
- 위험분석(Risk Analysis) <br/>\
- 정적분석 : 코드검토, 자동화된 정적분석(버퍼오버플로우, 타입체킹등) <br/>\
- 퍼즈테스팅(블랙/화이트) <br/>\
- 취약점 스캐닝 : 시그니처 매칭 방식 <br/>\
- 침투 테스트 : 블랙박스 테스팅, 윤리적 해킹\
',

// A/B 테스팅
'# 정의 : 동시 테스팅 <br/>\
- 두가지 이상 버전 통제된 상황에서 더 나은 것을 판별/실험하는 기법 <br/><br/>\
# 특징 : 저비용, 낮은 위험, 직관적 반응 확인, 근본적 원인 찾을 수 없음 <br/><br/\
# 절차 <br/>\
- 현상 측정 <br/>\
- 우선순위 결정 <br/>\
- 실시 <br/><br/>\
# 측정기준 : 클릭율, 전환율, 비용효율, 이탈율 <br/><br/>\
',

// 지각 테스팅 
'# 정의 : 바이너리 이미지 비교 테스트 <br/>\
- perceptual Testing <br/>\
- 애자일 방법론의 반복 개발개념에 기반하여 바이너리 이미지 비교를 통해 UI 테스팅의 일정부분 자동화를 가능케하는 테스팅 기법 <br/><br/>\
# 절차 <br/>\
- 스크린샷 저장 <br/>\
- 새 릴리즈 스크린샷 저장 <br/>\
- URL 페어링 <br/>\
- 그래픽 비교 <br/>\
- 수동 검사 <br/><br/>\
# 도구 <br/>\
- DPXDT : 구글, 파이썬으로 작성, 오픈소스, Restful API <br/>\
- Viff : ThroughtWorks 오픈소스, Selenium WebDriver <br/>\
- Pix-Diff : 자바스크립트로 작성됨, 오픈소스 <br/>\
- Applitools : 클라우드 기반, SDK제공, 사용, 다중브라우저 및 기기 지원 <br/><br/>\
# 적용분야 : Web App, 지능형 App, Big Data\
',

// 애자일 테스팅
'# 정의 : 짧은 주기 반복적 테스팅 <br/>\
- 애자일 SW 개발원칙에 따라 짧은 주기의 반복적인 테스트 수행하는 SW 테스팅 방법론 <br/><br/>\
# 절차 <br/>\
- 프로젝트 착수 <br/>\
- 출시계획 <br/>\
- 각 반복주기 테스트 <br/>\
- 시스템 테스트/최종게임(스모크 테스트) <br/>\
- 제품 릴리즈/지원 \
',

// 뮤테이션 테스트 
'# 정의 : 애매모호 찾기 위한 결함기반 테스트 기법 <br/>\
- 의도적으로 프로그램의 원시부호를 변형시키고 이에 맞게 디자인된 테스트 데이터를 실행시켜 프로그램 코드 내에 존재할 수 있는 애매모호한 부분을 찾아내기 위한 결함기반 테스트 기법 <br/><br/>\
# 특징 <br/>\
- 테스트 케이스 검증 <br/>\
- 테스트 케이스의 정당성과 신뢰감 확인 <br/>\
- 테스트 결과에 신뢰감 부여 <br/><br/>\
# 절차 <br/>\
- 원 프로그램 테스팅 <br/>\
- 뮤턴트(돌연변이) 생성 <br/>\
- 뮤턴트 테스팅 <br/>\
- 결과비교 <br/><br/>\
# 뮤턴트 생성 기법 <br/>\
1. 구조적 : 상수대치, 변수대치, 상수<-> 변수 대치 <br/>\
2. 객체지향적 : 상속성, 다형성 <br/><br/>\
# 기법 <br/>\
- Do Fewer : 샘플링, 효율성 유지, 비용절감 <br/>\
- Do Smarter : 분산처리, 비용절감 <br/>\
- Do Faster : 여러 뮤턴트를 하나로 통합, 일괄 컴파일하는 MSG 기법, 시간단축 \
',

// 비버깅
'# 정의 : 의도적 오류 삽입 <br/>\
- 의도적으로 오류코드를 삽입하여 해당 오류의 검출여부를 측정하는 결함기반 테스트 <br/><br/>\
# 특징 <br/>\
- 테스트 수행 수준 체크 <br/>\
- 의도적 오류 코드 삽입 <br/>\
- 잔존 오류 추정 <br/>\
- 디버깅 능력 측정 <br/>\
- 프로그램 배포 시기 결정 \
', 

// IAST
'# 정의 : 보안 취약점 검증 기법 / 소스코드 / 동적 분석 / 재검증 / 오탐률 최소화 / Exploit <br/>\
- 소스코드상의 보안 취약점을 검증하고, 탐지된 취약점을 동적 분석으로 재 검증하여 오탐률을 최소화하며, 탐지된 보안 취약점에 대한 Exploit 기능 제공으로 보안 취약점을 검증기법',

// 백투백 테스트
'# 정의 : 테스트 기법 / Dual TEST <br/>\
- 2개 이상의 상이한 버전의 프로그램상에서 동일한 입력값에 대한 출력결과를 비교하는 테스트 기법 <br/><br/>\
# 기술 <br/>\
- 동일 요구 명세서 <br/>\
- 병행 개발<br/>\
- 병행 테스트<br/>\
- 구현 정확성 판단<br/><br/>\
# 절차 <br/>\
- 어플리케이션 개발 : 동일명세, 다른팀 <br/>\
- 버전별 테스트 : 병행, 구현 정확성 판단<br/><br/>\
# 활용범위 <br/>\
- ISO 26262 처럼 결함이 Near Zero 수준의 Mission Critical 한 소프트웨어 테스트 및 오류 검출시 <br/>\
- 원자력 발전, 풍력 발전처럼 문제 발생시 Risk한 파장이 예측되지 않은 경우<br/>\
- 자동차의 Safety-Critical SW에 모델 기반 테스트 방법론 적용 <br/><br/>\
# 지멘스 적용 사례 <br/>\
- 개요 : 전기차 e-drive 차량의 핵심 컴포넌트, 파워일렉트로닉스, 지능형 탑재 충전기술<br/><br/>\
- 개발 방법론 : V-Cycle 기반의 SW 개발 및 자동화 Compliance 준수 (핵심: Automotive SPICE 가이드라인 및 CMMI-Dev) <br/><br/>\
- 모델 기반 개발 요구 조건 : ISO 26262, ASPICE, ISO 표준 6Part(제품개발:SW준수), ASIL, A-D 요구 준수 -> ISO 26262 맥락에서 Simulink, TargetLink 활용 모델 아키 및 설계 절차, 패널 정의, 요구조건 역추적성 제공, 생성 코드 활용 전 모델 수준 요구조건 대기 테스트 가능 <br/><br/>\
- 테스트 방법 : 요구조건 기반 테스팅, 인터페이스 테스팅, 모델과 코드 사이 백투백 테스팅 (핵심: SW모듈 및 기능 테스트)\
',

// Smoke Testing
'# 정의 : 시스템 테스트 / 테스트 수행전 / 테스트 가능 여부 판단 <br/>\
- 본격적 테스트 수행전, 시스템/컴포/구축환경에서 테스트가 가능한지 여부를 판단, 간단 모듈/시스템 테스트 <br/><br/>\
# 암기 <br/>\
- 스-스, 세-레<br/><br/>\
# Keyword <br/>\
- 빌드 수용 테스트 (BAT) <br/>\
- 빌드 검증 테스트 (BVT, Build Verification Test)<br/>\
- 안전성(Stability) 검증 <br/>\
- 스크립트 테스트 <br/>\
- 회귀 테스트, 통합테스트 전 <br/>\
- 전체 시스템 대상 <br/><br/>\
<img src = "./img/smoke.png" style = "max-width:100%; hegiht:auto;">\
',

// Sanity Testing
'# 정의 : 사용자 관점 테스트 / 마무리 단계 / 추가 컴포넌트 / Side Effect / UAT / 테스터가 확인 <br/>\
- 주로 마무리 단계의 안정빌드 대상으로 추가 컴포넌트에 의한 Side Effect는 없는지, 테스트 대상 빌드가 UAT(User Acceptance Testing, 사용자 인수 검사) 가 가능한 수준인지 여부를 테스터가 확인하는 사용자 관점 테스트 <br/><br/>\
# Keyword : 합리성(Rationality) 검증 / Unscripted 테스트 / 인수 테스트 전 / BAT <br/><br/>\
* Sanity : 온전한 정신(상태), 분별 \
',

// Cursory Test 
'# 정의 : 개발자가 테스트 주체가 되어 테스트 케이스 없이 주요한 단위 모듈이나 시스템 모듈을 즉흥적으로 여기저기 테스트하는 기법 \
',

// Concolic Test
'# 정의 : 데이터 생성 테스트 기법 / 모든 경로 탐색 <br/>\
- 특정 프로그램 경로나 포인트 대신에 프로그램의 모든 경로들을 탐색하여 테스트 데이터를 생성하는 테스트 기법 <br/><br/>\
# 암기 : 콘실심 <br/><br/>\
# Keyword : 실제 실행(Concrete execution) + 심볼릭 수행(Symbolic execution) <br/>\
- 실제 실행(Concrete Execution) : 대상 프로그램을 정적으로 테스트하는 도구 <br/>\
- 심볼릭 경로 수식(Symbolic Path Formula) 추출 방법 : 심볼릭 경로 수식을 추출하기 위해 수정된 가상머신을 활용하는 방법 \
',

// 34
'# 정의 : 취약점 테스트 방법 / 무작위 데이터 입력 / 조직적 실패 유발<br/>\
- SW에 무작위 데이터를 입력하여 SW의 조직적 실패를 유발함으로써 SW의 보안 취약점을 찾아내는 테스트 방법 <br/><br/>\
# 암기<br/>\
- 커-다인로 <br/><br/>\
- 생-덤스에 <br/>\
- 투-벨,인스,인페 <br/>\
- 대-뮤,제 <br/>\
- 기법-화블 <br/><br/>\
# 커버리지 <br/>\
- Direct Physical Attack : NW(OBD), File System, File/Media <br/>\
- Indirect Physical Attack : Application <br/>\
- Local/Remote Wireless Attack : Application, NW <br/><br/>\
# 유형 <br/>\
- 데이터 생성 : Dumb Fuzzing, Smart Fuzzing, Evolutionary <br/>\
- 데이터 투입 : Valid Case Fuzz Testing, Invalid Case Skip Testing, Invalid Case Fail Testing <br/>\
- 변조 대상 : Mutation base Fuzzing, Generation based Fussing <br/>\
- 테스팅 기법 : Whitebox Fuzzing, Blackbox Fuzzing <br/><br/>\
# 고려사항 : 종료 조건 생성, 취약점 분석 능력, 풍부한 프로토콜 및 프로그램 지시\
',

// Shift-left Testing
'# 정의 : 과정 최적화 테스트 / 초기 결함 발견 / 빠른 피드백 <br/>\
- 소프트웨어 개발 라이프 사이클 (SDLC) 초기에 결함을 발견하고 해결하여 결함 분석 시간을 줄이고 빠른 피드백을 통해 개발 전 과정을 최적화시키는 테스트\
',

// TMMi 
'# 정의 : SW 테스트 활동의 전략, 정책, 프로세스 진단하고 개선하기 위한 성숙도 모델 <br/><br/>\
# 특징 : CMMi 보완, 테스트 조직 평가, 글로벌 통용 <br/>\
# 단계 <br/>\
- Initial > Managed > Defined > Managed & Measurement > Optimization \
',

// ISO/IEC/IEEE 29119
'# 정의 : SW Testing 국제 표준 <br/>\
- SW개발 생명주기 전 과정에 걸쳐 있는 테스팅 프로세스와 관련 산출물에 대한 국제 표준 (표준적 테스트 기법 포함) <br/>\
- 테스팅과 품질에 대한 인식 개선, 객관적 지표 수립 <br/><br/>\
<img src = "./img/ISOIEC29119_2.png" style = "max-width:100%; hegiht:auto;">\
',

// ISO/IEC 33063
'# 정의 : 테스팅 프로세스 심사를 위한 국제 표준 모델 <br/>\
- ISO/IEC 29119-2(Teset Process)를 기반으로 한 소프트웨어 테스팅 프로세스 심사를 위한 국제 표준 모델 <br/><br/>\
# 특징 <br/>\
- T-PAM(Testing Process Assessment Model) 표준화 <br/>\
- 한국 주도 심사모델 <br/><br/>\
',

// ISO/IEC 20246
'# 정의 : SW 테스트 산출물 국제 표준 / 주석, 개발 산출물 포함 <br/>\
- SW 테스트 작업 산출물 리뷰(Work product Reviews)에 대한 국제표준. 작업산출물은 소스코드의 주석, 개발 산출물 등을 포함하는 개념임<br/><br/>\
# 암기 <br/>\
- 내용 : 프유기 <br/><br/>\
프로세스 : 계준,오,미,이분,수리 <br/>\
- 유형 : MPWTI <br/>\
- 기법 : 에체시관 <br/><br/>\
# 특징 <br/>\
- T-PAMT(Testing Process Assessment Model) 표준화 (TPI, TMMi, Test SPICE등 통합표준화)<br/>\
- 한국 주도 심사모델 : 국가 기술표준원, STA <br/>\
- 참조 모델 : 29119-2, 15504-5 <br/><br/>\
# 심사 대상 : 테스트 전략수립, 환경구축, 결함관리, 리포팅 등 100여개로 구성되며 SW 테스팅 전 생명주기가 대상 <br/><br/>\
# 구성 <br/>\
- Scope : 테스트 프로세스 범위 <br/>\
- Normative Reference : 참조모델 소개 <br/>\
- Terms and Definitions<br/>\
- Overviews of the exampler<br/>\
- Test Process Assessment Model<br/>\
- The Process Dimenssion and Process Performance Indicators (OTDS <- 2019) <br/>\
- Test Process Capability indicator : 5등급 PMEPO <- 15504-5 <br/><br/>\
<img src = "./img/ISOIEC20246_1.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
<img src = "./img/ISOIEC20246_2.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
',

// TPI
'# 정의 : 테스트 프로세스 단계적 향상, 개선 <br/>\
- 조직내 테스트 프로세스의 단계적 향상과 테스트 프로세스 개선을 쉽게 수행하기 위한 모델 <br/><br/>\
# 구성 <br/>\
- Key Area : 테스트 프로세스에서 관련기술, 도구, 보고서 <br/>\
- Levels : KA 시험 성숙도 레벨 분류 <br/>\
- Test Maturity Matrix : KA간 의존관계, 테스트 프로세스 수준 보여줌 <br/>\
- Check point : 각 레벨별 요구사항 정의 <br/>\
- Improvement Suggestrion : 특정 레벨 취득 위한 제안 \
',

// TCoE 
'# 정의 : 테스트 역량 증진 센터 <br/>\
- Test Center Of Excellence <br/>\
- 개별 조직이나 프로젝트 단위로 수행되는 테스트 업무를 한 곳에 집중해 프로세스와 툴 등의 Resource를 효율적으로 사용, 이를 통해 최고의 테스팅 성과를 거두기 위한 테스트 FW, 표준화된 테스트 방법론, 모범사례, 자동화, 측정 및 도구를 제공하는 소프트웨어 테스트에 대한 역량을 증진하는 센터 <br/><br/>\
# 목적 <br/>\
- 테스트프로세스 개선 <br/>\
- 전문지식 서비스 <br/>\
- 프로젝트 지원 <br/>\
- 테스트 역량강화를 통한 기업의 품질 경영 및 비즈니스 효과적 지원 <br/><br/>\
# 핵심요소 <br/>\
- 전략 : 테스트 정책 및 전략 <br/>\
- 프로세스 : 생명주기 <br/>\
- 도구/인프라 : 테스트관리도구, 결함관리도구 <br/>\
- 인력/조직 <br/><br/>\
# 구현 방법 : 인식 > 내재화 > 전개 > 개선 \
',

// 테스팅 가이드 
'# 정의 : 테스팅 실무에 필요한 Nipa 소프트웨어공학센터 제공 가이드 <br/>\
- 소프트웨어 테스팅에 대해 기본부터 테스팅 도구, 테스팅 지표 등 실무에 필요한 사항까지 정리한 Nipa 소프트웨어 공학센터 제공 가이드 <br/><br/>\
# 특징 : 기본/실무전반, 국제표준활용, 무료SW도구 위주 제시 <br/><br/>\
# 유형 <br/>\
- 테스팅 관리 지원도구 <br/>\
- 정적테스팅 지원도구 <br/>\
- 테스팅 설계 지원도구 <br/>\
- 테스트 실행 및 로깅 지원도구 <br/>\
- 성능과 모니터링 지원도구 \
',
 
// 테스트 케이스(IEEE 829)
'# 정의 : 프로그램의 측정 가능한 상태에 대한 정보, 상황, 이벤트, 입출력 값을 포함하는 데이터로 구성된 테스트를 수행하기 위해 기본이 되는 문서화된 항목 <br/><br/>\
# Key word : 식별자, 테스트 항목, 입력 명세, 출력 명세, 환경 설정, 특수 절차 요구, 의존성 기술 <br/><br/>\
# 구성도 <br/>\
<img src = "./img/IEEE829.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 구성요소(IEEE 829) <br/>\
- 식별자 : 추적성 <br/>\
- 테스트 항목 : 테스트 대상 <br/>\
- 입력 명세 : 입력 값 <br/>\
- 출력 명세 : 출력 값 <br/>\
- 환경 설정 : 테스트 베드 <br/>\
- 특수절차 요구 : 프로세스 <br/>\
- 의존성 기술 : 선/후 관계 <br/><br/>\
* 라이지움 87회 1교시 5번\
',
 
// Agile Test
'# 정의 : 개발과 테스트 사이의 지속적 통합을 목표로 비연속적이고 짧은 반복 주기를 갖는 테스트 방법론 <br/><br/>\
# Agile Test 4분면 <br/>\
<img src = "./img/AgileTest4Metrix.png" style = "max-width:100%; height:auto;"><br/><br/>\
# Agile Test 기법 <br/>\
<img src = "./img/AgileTestMethod.png" style = "max-width:100%; height:auto;"><br/><br/>\
* KPC 96회 관리 2교시 4번\
',

// 레만의 원리
'# 정의 : 변화 원리, 핵심 개념 <br/>\
- SW 변화의 원리와 유지보수의 핵심개념을 설명한 이론 <br/>\
- E-type 소프트웨어에 대해 변화 원리를 제시 <br/><br/>\
# 내용 <br/>\
- 프로세스 : 계속적 변경, 복잡도증가, 자가규제 <br/>\
- 조직 : 조직적 안정화 유지 <br/>\
- 시스템 : 친근성 유지, 게속적 성장, 감소하는 품질\
',

// Code Smell
'# 정의 : 비효율적 프로그램 <br/>\
- 읽기 어려운 프로그램이나 중복된 로직을 가진 프로그램 <br/>\
- 복잡한 조건문이 포함된 프로그램등 리팩토링으로 해결될 수 있는 문제가 있다는 징후를 알려주는 것 <br/><br/>\
# 특징 <br/>\
- 읽기 어려운 프로그램 <br/>\
- 중복된 로직을 가진 프로그램 <br/>\
- 실행 중인 코드를 변경해야 하는 특별한 동작을 요구하는 프로그램 <br/>\
- 복잡한 조건문이 포함된 프로그램 <br/><br/>\
# 유형 및 리펙토링<br/>\
- 중복된 코드 : 중복 제거 <br/>\
- 긴 메소드 : 메소드 분리<br/>\
- 큰 클래스 : 클래스 경량화<br/>\
- 긴 파라미터 리스트 : 파라미터 경량화<br/>\
- 두가지 이상의 이유로 수정되는 클래스 : 클래스 수정<br/>\
- 여러 클래스를 동시에 수정 : 응집도 증가<br/>\
- 다른 클래스를 지나치게 이용 : 매소드 이전<br/>\
- 유사 데이터들의 그룹 중복 : 독립된 클래스 정의<br/>\
- 기본 데이터 타입 선호 : 같은 작업을 수행하는 기본 데이터의 그룹을 별도의 클래스로 만듦<br/>\
- Siwtch, if 문장 : 다형성으로 변경<br/>\
- 병렬 상속 계층도 : 호출 당하는 쪽 변경<br/>\
- 게으른 클래스 : 제거, 합병<br/>\
- 지나친 일반화 : 상속 제거<br/>\
- 임시 속성 : 속성을 메소드의 내부로 옮김<br/>\
- 메시지 체인 : 직접 사용<br/>\
- 미들 맨 : 미들 맨 역할 객체 제거<br/>\
- 부적절한 친밀성 : 다른 클래스 레퍼런스 유지 금지<br/>\
- 미완성 라이브러리 클래스 : wrapping class 이용<br/>\
- 데이터 클래스 : 이 클래스의 데이터를 주로 사용<br/>\
- 상속 거부 : 클래스 합병<br/>\
- 주석 : 주석 없이도 코드를 이해할 수 있도록 변경<br/><br/>\
* 라이지움 78회 3교시 1번\
',

// Refactoring
'# 정의 : 내부 구조 개선 기법 <br/>\
- 소프트웨어의 기능은 변경하지 않고 내부 구조를 개선하여 가독성, 성능, 로직개선을 수행하는 품질 향상 기법 <br/><br/>\
# 절차 <br/>\
<img src = "./img/Refactoring_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
1. 소규모 변경 : 단일 리펙토링 <br/>\
2. 코드가 전부 잘 작동되는지 테스트 <br/>\
3. 전체가 잘 작동하면 다음 리펙토링 단계 전진 <br/>\
4. 작동하지 않으면 문제를 해결하고 리펙토링 한 것을 undo 하여 시스템이 작동되도록 유지 <br/><br/>\
# 주요기법 <br/>\
1. 클래스의 역할 명확화 <br/>\
- Extract Class / Method : 명확한 단위 분리<br/>\
- Push Down Method : 일부만 관련된 경우 이동<br/><br/>\
2. 커플링 최소화 <br/>\
- Move Method : 결합도 높은 경우 이동<br/>\
- Move Attribute : 결합도 높은 경우 이동<br/><br/>\
3. 접근제어 <br/>\
- Self Encapsulated Field : 참조시 접근 제어<br/><br/>\
4. 조건 단순화 <br/>\
- Decompose Condition : 작은 조건식으로 분해<br/>\
- Remove Parameter : 파라미터 제거 조건 단순화<br/><br/>\
5. 가독성 향상 <br/>\
- Replace Temp with Query : 임시변수를 메소드 호출로 대체<br/>\
- Rename Method : 메소드 명칭 명확화<br/><br/>\
6. 기타 <br/>\
- Inline Method : 호출하는 곳에 메소드의 몸체를 넣고 메소드를 삭제<br/>\
- Subtitute Algorithm : 메서드의 몸체를 새로운 알고리즘으로 교체<br/><br/>\
* 라이지움 78회 3교시 1번\
',

// 3R
'# 정의 : S/W 생산성 극대화 기법 (Reverse Engineering, Re-engineering, Re-use) <br/>\
- 완성된 소프트웨어 실체를 Repository 기반으로 역공학, 재공학, 재사용을 통해 소프트웨어 생산성을 극대화하는 기법 <br/><br/>\
# 특징 : 생산성 향상, 표준화, 유지보수 용이 <br/><br/>\
# 고려사항 : 비용증가, 전문인력 필요 <br/><br/>\
# 상세 설명 <br/>\
- Reverese Eng : 기존 시스템 역 분석 <br/>\
- Re-Eng : 기존 시스템 변환 <br/>\
- Re-Use : 재사용 SW 파악 <br/><br/>\
# 관계도 <br/>\
<img src = "./img/3R_Relation.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 실무사례 <br/>\
<img src = "./img/3R_Stragetic.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 119회 관리 4교시 2번\
',

// Reverse Engineering (저작권)
'# 정의 : 호환성 확보 <br/>\
- 일반적인 역공학은 디컴파일, 실행, 조사하는 행위로 부터 원시 프로그램을 추출하여 분석하는 일련의 과정으로 이해되는 반면, 저작권 측면에서의 역공학이란 호환성 확보를 위한 목적 <br/><br/>\
# 규정 <br/>\
- 허가 : 저작권기반(정당한 권리), 기술향상(호환에 필요한 부분해석), 고객 needs확보(대체 가능성) <br/>\
- 제한 : 무단복제, 변환/개작/재배포, 계약위반 <br/><br/>\
# 기술적 보호조치 : 디지털 저작물 확인/증명, 위변조 방지, 추적기술 \
',
 
// Reverse Engineering 
'# 정의 : 자동화된 도구(CASE)의 도움으로 물리적 수준의 소프트웨어 정보를 논리적인 소프트웨어 정보의 서술로 추출하는 프로세스 <br/><br/>\
# 특징 : 기존 SW 분석 지원, 유지보수성 향상, CASE 사용 용이 <br/>\
<img src = "./img/ReverseEngineering.png" style = "max-width:100%; height:auto;"><br/><br/>\
* CASE(Computer aided software engineering) : 컴퓨터 지원 시스템 공학 <br/><br/>\
* 119회 관리 4교시 2번\
',
 
// Re Engineering
'# 정의 : 자동화된 도구로 현존하는 시스템을 점검 또는 수정하는 프로세스로 시스템의 재설계, 교체를 CASE 도구로 사하도록 순공학을 준비하는 과정 <br/><br/>\
# 특징 : 유지보수성 향상, 표준 준수 <br/><br/>\
<img src = "./img/ReEngineering.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 119회 관리 4교시 2번\
',
 
// Re use
'# 정의 : 이미 개발 완료된 결과물을 신규 개발 SW에 적용하는 Process <br/><br/>\
# 특징 <br/>\
<img src = "./img/ReUse.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 119회 관리 4교시 2번\
',

// Anti-Reversing
'# 정의 : 원 소스코드를 분석하는 컴파일 과정의 역과정 기술인 리버싱 행위를 방해하는 기술 <br/><br/>\
# 주요도구 <br/>\
1. Themida <br/>\
- Anti-Debugger Detection : 디버거 탐지시 SW 보호하는 기능 <br/>\
- Anti Dumpers : 메모리 덤프 회피 방안 제시 <br/><br/>\
2. Code Virtualizer <br/>\
- 원소스 가상명령어 변환 : 가상머신이 매번 난독화할 때마다 벼경 <br/>\
- 머신 호환 이진코드 생성 : 특정 머신의 이진코드를 다른 머신에서 생성할 수 있도록 변경 <br/><br/>\
3. VMProject <br/>\
- 프로그램 바이너리 변경 : 내부 파일에서 보호되고 있는 코드의 일부분을 변경 <br/>\
- 복호화 없이 상태 실행 가능 : 가상 CPU에서 코드 실행 \
',

// 코드가상화
'# 정의 : Protector 통한 Virtualized Code 생성 Anti Reversing 기술 <br/>\
- 원래의 코드를 Protector 통해 Virtualized Code 생성하여 개발자가 만든 SW적 핸들러가 처리하는 안티리버싱 기술 <br/><br/>\
# 구성요소 <br/>\
- Virtualized Code <br/>\
- Virtual CPU <br/>\
- Real CPU <br/>\
- Normal Code <br/>\
- Protector <br/><br/>\
# 동작 <br/>\
1. 가상화 코드 생성 <br/>\
2. Virtual CPU 동작 <br/>\
3. 핸들러 처리 \
',

// ISO/IEC 14764
'# 정의 : 유지보수 프로세스 상세 유형 국제 표준 / ISO 12207 참고 / 4가지 유지보수 유형 <br/>\
- ISO 12207의 SW SDLC 참고하여 유지보수 프로세스의 상세 유형 제시한 국제 표준, ISO/IEC에서 정의한 유지보수 표준 4가지 유지보수 유형 정의 <br/><br/>\
# 암기 <br/>\
- 유형 : 수적완예 <br/>\
- 대상 : 데프문시 <br/>\
- 기법 : 3R <br/>\
- 절차 : 프로임, 프라모어, 모임, 메리억, 마, 리 <br/><br/>\
# 특징 : SW특성 무관, SW SDLC 모델 비종속, 유지보수 공정 반복 <br/><br/>\
# 유형 (수적완예) <br/>\
- reactive(수정, 적응)<br/>\
- Proactive(완전, 예방) <br/><br/>\
# 대상 : 데이터, 프로그램, 문서, 시스템 <br/><br/>\
# 기법 : 프로그램 이해, 재공학, 역공학, 재구조화 <br/><br/>\
# 절차 : 프분구검이페 / 프로임.프라모어.모임.메리억,마,리 <br/>\
1. 유지보수 프로세스 구현(Process Implementation) <br/>\
2-1. 문제 및 수정 분석 (Problem and Modification Analysis <br/>\
2-2. 수정 구현(Modification Implementation) <br/>\
2-3. 검토/승인(Maintenance Review / Acceptance) <br/>\
3. 이전(Migration) <br/>\
4. 폐기 (Retirement) <br/><br/>\
# 고려사항 : SLA, ITSM, ITIL, ISO/IEC 12207, SP인증기반 <br/><br/>\
<img src = "./img/ISO_IEC_14764.png" style = "max-width:100%; height:auto;">\
',

// [ISO/IEC 14764]- PERT/CPM, CCM, CCPM
'ISO 14764 : 소프트웨어 유지보수 표준<br/><br/>\
PERT/CPM : 불확실한 프로젝트의 일정, 비용등을 합리적으로 계획하고 관리하는 기법 <br/><br/>\
PERT(Program Evaluation and Review Technique) <br/>\
- 확률적인 추정치를 이용하여 단계중심의 확률적 모델을 전개 <br/>\
- 최단기 기간에 목표를 달성하기 위함 <br/><br/>\
CPM(Critical Path Method) <br/>\
- 과거 실적이나 경험등의 확정적 결과값을 이용하여 활동중심의 확정적 모델을 전개 <br/>\
- 목표기일 단축과 비용 최소화를 달성하기 위함. <br/><br/>\
CCM: CPM에 자원가용성, 일정제약을 고려하고 버퍼관리를 통해 일정을 관리하는 기법<br/><br/>\
CCPM: 핵심자원의 자원경합을 해소하여 Critical Chain 관리기법<br/><br/>\
',
  
// 일정관리
'# 정의 : SW 품질 준수 일련 활동 / 계획, 수립, 일정중심 통제 <br/>\
- 일정계획 수립, 일정 중심 통제 수행하여 SW 품질 준수하는 일련 활동<br/><br/>\
# 암기 <br/>\
- 프로세스(7) : 일계활순자기개통 <br/>\
- 추정기법(6) : PCCW칸 <br/>\
- 최적화기법 : 레스 <br/>\
- 단축기법 : CF리왓 <br/><br/>\
- 3점 추정 : 비가낙 <br/><br/>\
# 절차 <br/>\
- Activity 정의 : WBS 근거, 목록작성 <br/>\
- 순서배열 : 프로젝트 일정 네트워크도 <br/>\
- 자원산정 : Activity 자원 요구사항 <br/>\
- 기간산정 : 활동기간산정치 <br/>\
- 프로젝트 일정 개발 <br/>\
- 일정 통제 <br/><br/>\
# 절차 <br/>\
1. 일정관리 계획 수립 <br/>\
- T : 분석기법, 미팅 <br/>\
- O : 일정관리계획서 <br/><br/>\
2. 활동 정의 <br/>\
- T : 분할, 연동계획 <br/>\
- O : 활동목록, 마일스톤 목록 <br/><br/>\
3. 활동 순서 배열 <br/>\
- T : 선후행도형법, 의존관계 설정 <br/>\
- O : 플젝일정 NW Diagram, 플젝문서 갱신 <br/><br/>\
4. 활동 자원 선정 <br/>\
- T : 대안분석, SW대가산정, PMS <br/>\
- O : 일정 기준선, 플젝 일정 <br/><br/>\
5. 일정 통제 <br/>\
- T : 성과검토, PMS, 자원최적화 <br/>\
- O : 작업성과 정보 <br/><br/>\
# Activity 순서 배열 <br/>\
- PDM(Precedent Diagramming Method) : 선후행도표, AON <br/>\
- ADM(Arrorw DM) : 화살도형법, AOA <br/>\
- 의존관계 : FS(Finish to Start), FF, SS, SF) <br/>\
- 선도 및 지연 : 선도 Lead, 지연 Lag <br/><br/>\
# 기간 산정 기법 <br/>\
- 유모3점-경험기반 : 유사산정, 전문가판단 <br/>\
- 산술/통계 : 모수산정(과거 실적 기반 함수식 생성), PERT(3점 추정), CPM(1점 추정) <br/><br/>\
# 일정 추정 기법(6) <br/>\
- PERT(비관치, 가능치, 낙관치3점추정, 액티비티 수행기간 산정에 확률반영)<br/>\
- CPM<br/>\
- Critical Path<br/>\
- CCM<br/>\
- CCPM<br/>\
- WBS<br/>\
- 간트차트 <br/><br/>\
# 자원 최적화 기법 <br/>\
- 자원 평준화(Resource Leveling) : 가용자원 한계내 여유일정, 순서 조정 <br/>\
- 자원 스무딩(Resource Smoothing) : 정해진 자원 한도 내 일정 모델 활동 조정, Free Float와 Total Float 안에서만 지연 <br/><br/>\
# 일정 단축 기법 <br/>\
- Crashing : CP 상 Activity 추가자원 투입, 공정압축법, Cost증가, Risk 증가 <br/>\
- Fast Tracking : CP상 순차 진행 계획 병행 추진, 공정중첩 단축법, 재작업 위험 증가, Risk 증가 <br/>\
- Re-Estimation : CP상 불확실성 여유일정 변경 <br/>\
- What-If 시나리오 : 일정 영향 Factor 기준 분석/대안 시뮬레이션 <br/><br/>\
* PMS : Project Mgmt SW <br/>\
* 대안 분석 : 고급개발자1 vs 초급개발자5<br/>\
* 3점 산정 : (낙관치 + (평균치*4) + 비관치) / 6<br/>\
* 예비분석 <br/>\
- Contigency Reservers : 우발적 예비-사전파악 위험버퍼<br/>\
- Management Reservers : 관리적 예비비-일정기준선 포함x, 사전파악x, 위험 버퍼 <br/><br/>\
* 고려사항 : PODB \
',
  
// 3점 산정
'# 정의 : 일정 산정 기법 <br/>\
- 프로젝트 일정산정에 있어 낙관치(O), 비관치(P), 평균치(M)의 산정 값을 계산하여 일정을 산정하는 기법 <br/><br/>\
# 구성요소 <br/>\
1. 추정치 요소 <br/>\
- 낙관치(Optimistic) : 낙관적 추정치 <br/>\
- 평균치(Most likely) : 가능성 가장 높은 추정치 <br/>\
- 비관치(Pessimistic) : 비관적 추정치 <br/><br/>\
2. 계산식 종류 <br/>\
- 삼각분포 : (O+M+P)/3 <br/>\
- 베타분포 : (O+4M+P)/6 <br/>\
- 표준편차 : sigma(P-O)/6 \
',
  
// 일정 단축 기법
'# 정의 : 프로젝트 납기 준수 <br/>\
- 프로젝트 납기 준수를 위해 프로젝트의 범위 변경 없이 일정을 조정하는 기법 <br/><br/>\
# 종류 (크자 패병)<br/>\
- Crashing : 자원추가 <br/>\
- Fast Tracking : 작업 병행 추진 \
',
  
// CPM
'# 정의 : 프로젝트 일정관리 <br/>\
- 프로젝트의 일정 개발을 위해 활동의 시간, 비용, 의존관계를 파악하여, 시작, 종료, 예정일을 산정하는 프로젝트 일정개발 기법 <br/><br/>\
# Critical Path <br/>\
- 정의 : 프로젝트 납기일에 영향을 미치는 일련의 액티비티의 집합 <br/>\
- 의미 : 가장 긴 경로, 작업이 늦어지면 그만큼 전체가 늦어짐 <br/><br/>\
# 절차 <br/>\
- WBS 전후관계 목록표 작성 <br/>\
- Network 도표 작성 <br/>\
- 가장 많이 소요된 경로 탐색 <br/><br/>\
# 경로 도출 방법 <br/>\
<img src = "./img/CPM_Calc.png" style = "max-width:100%; height:auto;"><br/>\
- Total Float : LS-EF or LS-ES <br/>\
- Free Float : 후행 ES - EF -1<br/><br/>\
* 83회 관리 4교시 5번\
',
  
// CCM
'# 정의 : 주공정연쇄법 <br/>\
- Ciritical Chain Method <br/>\
- 자원제약사항을 고려하여 계획수립시 과다하게 설정될 수 있는 여유시간을 줄여 통합된 버퍼로 책정하고 버퍼의 소진율을 모니터링하여 전체 프로젝트 일정을 관리하는 기법 <br/><br/>\
# 납기 지연 4가지 법칙 (파자후학)<br/>\
- 파키슨의 법칙 : 주어진 시간 모두 사용 <br/>\
- 자기방어 : 작업완료 숨김 <br/>\
- 후행공정 작업준비 미흡 : 후속작업 자원 미비시 <br/>\
- 학생 증후군 : Deadline 전 효율 \
',
  
// Lehman 소프트웨어 변화
'# 정의 : 소프트웨어는 요구에 의해 계속적으로 변경되며, 변경에 따른 복잡성, 프로그램의 고유한 변경 추세, SW조직 생산성의 일관성, 소프트웨어 각 버전의 변화에 대한 일관성을 제시한 SW 변화의 원리 <br/><br/>\
# 소프트웨어 분류 <br/>\
- S-Type(Static) : 정해진 명세에 따라 정확히 동작하는 S/W (계산기) <br/>\
- P-Type(Practical) : 절차나 실행 입력 값에 따라 다르게 수행되는 S/W (체스게임) <br/>\
- E-Type(Embedded) : 실 세계의 환경적 상황과 밀접하게 연관되어 동작하는 S/W (Tax 시스템)\
',
  
// 프로젝트 관리 계획서
'<img src = "./img/ProjectAdminReport.png" style = "max-width:100%; height:auto;"><br/>\
- 개범일인교통품인측\
',

// 통합관리
'# 정의 : 총괄관리 절차, 활동 <br/>\
- 각 영역의 계획과 활동이 유기적으로 결합되도록 조정하고 총괄 관리하는 절차 및 활동 <br/><br/>\
# 구성 : PJT헌장 개발 > 관리계획개발 > 작업지시 및 관리 > 감시 및 통제 > 변경 통제 > 종료 <br/><br/>\
# 도구 : 전문가판단, 촉진기법(브레인 스토밍, 갈등해결, 미팅)\
',

// 범위관리
'# 정의 : 범위 통제 관리 <br/>\
- 프로젝트 수행범위 및 결과물에 대한 범위를 통제 관리하는 활동 <br/><br/>\
# 종류 <br/>\
- 제품범위(산출물 위주)<br/>\
- 프로젝트범위(지정기능 결과물) <br/><br/>\
# 절차 (계요정W검통)<br/>\
- 계획 수립 : 범위관리 계획서 작성 <br/>\
- 요구사항수집 : 이해관계자 니즈, 요구사항 결정 <br/>\
- 범위정의 : 상세 범위, 목표인수 기준 결정 <br/>\
- WBS 작성 : 관리가능한 작업 패키지 분할 작성<br/>\
- 범위 검증 : 프로젝트 범위, 인도물 범위 공식적 수용<br/>\
- 범위 통제 : 범위 관리 단계<br/><br/>\
# 범위 기술서 요소 (범인도제제가)<br/>\
- 제품 범위명세서 : 특성 점진적 구체화 문서 <br/>\
- 인수기준 : 완료 조건 <br/>\
- 프로젝트 인도물 : 완료 위해 산출하는 검증 가능한 제품 <br/>\
- 프로젝트 제외사항 : 제외되는 대상 식별 <br/>\
- 프로젝트 제약사항 : 영향 미치는 제한 요인 <br/>\
- 프로젝트 가정사항 : 잠재적 영향도 설명 \
',

// WBS
'# 정의 : 실행작업 인도물 중심 분할 계층구조 체계 <br/>\
- Work Breakdown Structure<br/>\
- 프로젝트 목표를 달성하고 필요한 인도물을 산출하기 위하여 프로젝트 팀이 실행할 작업을 인도물 중심으로 분할한 계층구조 체계 <br/><br/>\
# 구성 (프단작패소)<br/>\
<img src = "./img/WBS.png" style = "max-width:100%; height:auto;"><br/>\
- 작업 패키지 : WBS 최하위 구성요소 / 80시간 내외 <br/>\
- 작업분류 코드 : 고유 식별자 <br/>\
- WBS 사전 : 패키지별 작업 내용 <br/>\
- 통제 계정 : 범위, 예산, 일정, 성과 측정 단위 <br/><br/>\
# 특징 <br/>\
- 산출물 중심 <br/>\
- 8/80 법칙 : 8~80 사이 WP 크기 <br/>\
- Report 법칙 : Report 크기 따라 WP 크기 정의 <br/>\
- 유용성 법칙 : 세분화 <br/>\
- 연동기획 : Rolling Waver Planning 가까운 미래만 상세히 작성 <br/>\
- 100% Rule <br/><br/>\
# 사례 <br/>\
<img src = "./img/WBS_Example.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 라이지움 87회 관리 1교시 7번\
',

// Gold Plating
'# 정의 : 경험적 초과 개발 <br/>\
- 고객이나 이해관계자가 요구하지 않은 사항을 개발자나 PM의 추측으로 인해 초과 개발하는 현상 <br/><br/>\
# 원인 : 요구사항과 관계없는 개발로 시간, 배용의 낭비 <br/><br/>\
# 영향 : 불필요 기능, 과도한 품질 양산 <br/><br/>\
# 방지 방안 <br/>\
- 제안전략 및 SOW 품질 <br/>\
- 요구기준 및 Baseline 정량화 <br/>\
- 업무시각화 및 의욕관리 \
',

// Scope Creep
'# 정의 : 요구사항 관리 오류, 시간,비용,자원 증가 현상 <br/>\
- 고객이나 이해관계자의 요구사항의 관리 오류로 인해서 프로젝트의 시간, 비용, 자원을 증가시키는 현상 <br/><br/>\
# 원인 : 프로젝트 범위 증가 <br/><br/>\
# 영향 : 프로젝트 범위, 시간, 자원의 과다소모 <br/><br/>\
# 방지방안 <br/>\
- 리뷰/승인 필수 <br/>\
- Service Desk 활용 <br/>\
- SRS, 변경관리 시스템, Request Freezing \
',

// Resource Leveling 
'# 정의 : 자원 조정 기법 <br/>\
- 자원의 한계에 따라 시작일과 종료일을 조정하는 기법, 자원의 양/사용가능기간 한정되거나, 동시에 두개 이상의 활동에 포함된 경우 이를 조정해주는 방법 <br/><br/>\
# 유형 <br/>\
- 자원 고정형 : 자원제한, 제한된 자원 조건하 최단기간 <br/>\
- 시간 고정형 : 자원무제한, 기간제한 <br/.<br/>\
# 절차 <br/>\
1. CPM 계산 <br/>\
2. 자원히스토그램 작성 <br/>\
3. 평균화 최적값 도출 <br/>\
4. 자원 히스토그램 비교 \
',

// 브룩스 법칙
'# 정의 : 인력투입 역설 상황 <br/>\
- 지연되는 프로젝트에 인력을 더 투입하면 오히려 일정이 지연됨 <br/><br/>\
# 의사소통 라인수 = N(N-1) / 2 <br/><br/>\
# 원인 <br/>\
- 추가투입이녈 교육 필요 <br/>\
- 커뮤니케이션 비용증가 <br/>\
- 엽무진행 오류 가능성 증가 <br/>\
- 오류해결 위해 추가일정지연 가능성 <br/><br/>\
# 대응 <br/>\
- 고급인력, 잔업, 아웃소싱, 병행 작업, Critical Chain, Re-Estimation \
',

// 원가관리
'# 정의 : 예산 범위 위한 통제활동 <br/>\
- 승인 예산 범위 내 프로젝트 완료위해 원가 산정, 프로젝트 분석, 통제하는 활동 <br/><br/>\
# 절차 <br/>\
- 원가관리 계획 수립 <br/>\
- 원가 산정 <br/>\
- 예산 결정 <br/>\
- 원가 통제 <br/><br/>\
# 원가 산정 기법 <br/>\
- 유사산정, 모수산정, 3점산정, 상향식산정, 예비비 분석, 품질 비용 \
',

// 품질관리
'# 정의 : 품질보증, 통제 수행 절차 <br/>\
- 품질 정책, 목표 책임사항을 결정하여 품질보증, 통제를 수행하는 절차 <br/><br/>\
# 구성 <br/>\
- 품질 계획(QM) : 품질계획 관리 <br/>\
- 품질 통제(QC) : 변경요청 <br/>\
- 품질 보증(QA) : 품질통제측정치, 변경요청<br/><br/>\
# 품질계획도구 <br/>\
- 7QC Tools : 기본 품질도구 <br/>\
- 벤치마킹 : 품짊고표 수준설정시 <br/>\
- 실험설계법 : 제품에 영향 요인 분석시 <br/>\
- 브레인스토밍 : 문제해결 의견모집시 <br/>\
- 명목집단법 : 간섭없이 우선순위 정할때 <br/>\
- 흐름도 : 프로세스 개선점 도출시 <br/>\
- 친화도 : 브레인스톰이 아이디어 그룹핑 <br/>\
- 우선순위 매트릭스 : 여러 대안 체계적 평가시 <br/><br/>\
# 절차 <br/>\
- 품질계획 수립 <br/>\
- 품질보증 수행 <br/>\
- 품질통제 수행 \
',

// 품질비용 
'# 정의 : 품질 실현 발생 비용 <br/>\
- 요구된 품질을 실현하기 위한 원가, 품질활동 수행을 위해 발생하는 비용 <br/><br/>\
# 구성요소 <br/>\
- 적합비용 : 예방비용, 평가비용 <br/>\
- 부적합비용 : 내부 실패, 외부 실패 <br/>\
- 총비용 : 통제비용 + 통제실패비용 <br/>\
- 적절 품질비용 : 수용가능 품질수준 확보수준 확보할 수 있는 비용 \
',

// 품질관리QC7도구
'# 정의 : 데이터의 기초적인 정리 방법 <br/>\
- 적은 데이터로부터 가능한 한 신뢰성이 높은 정보를 얻는데 가장 유효한 수단으로서 품질의 개발, 개선, 관리의 재활동에 대한 유용한 도구로, 데이터의 기초적인 정리방법으로 널리 쓰이며, 품질관리를 하는데 있어서 가장 필수적인 통계적 방법 <br/><br/>\
# 구성 (인산관히파체층)<br/>\
P 인과관계도 : 특성요인도-원인규명 <br/>\
P 산점도 : 영향을 주는 2개 인과관계 <br/>\
P 관리도 : 공정수준 유지 관리 <br/>\
P 히스토그램 : Data 분포 <br/>\
- 파레토 차트 : 문제의 중점화, 우선순위 파악 <br/>\
- 체크시트 : 간단히 체크 <br/>\
- 층별 : 불량 요인마다 데이터 구분 \
\
',

// 품질관리신QC7도구
'# 정의 : 언어데이터를 이용한 문제 분석 정성적 방법 <br/>\
- QC 7가지 도구가 수치데이터를 해석, 신 QC 7가지 도구는 언어데이터를 이용하여 문제를 분석하는 정성적 방법 <br/><br/>\
# 구성 <br/>\
- 친화도 <br/>\
- 연관도 <br/>\
- 계통도 <br/>\
- 애로우 다이어그램 <br/>\
- 매트릭스도 <br/>\
- PDPC <br/>\
- 매트릭스 데이터 해석법\
',

// 인적자원관리
'# 정의 : 프로젝트 팀원 관리, 방법 <br/>\
- 프로젝트 팀을 구성, 관리하는 방법 및 프로세스 <br/><br/>\
# 절차 <br/>\
- 인적자원 계획서 개발 <br/>\
- 프로젝트 팀 확보 <br/>\
- 팀 개발 <br/>\
- 팀 관리 \
',

// 터크만 팀 발달 5단계 
'# 정의 : 그룹 개발 모델 <br/>\
- 조직이 성장하고 도전에 대응하고 문제의식을 갖고 해결책을 찾으며 작업계획을 세우고 결과를 전달하기 위해 필요한 5가지 단계를 표현한 그룹개발 모델 <br/><br/>\
# 사이클 <br/>\
- 형성기(탐색) <br/>\
- 격동기(준비) <br/>\
- 규범기(형성) <br/>\
- 성과기(실행) <br/>\
- 해산기(휴지) \
',

// 동기부여이론
'# 정의 : 조직원 분석 이론 <br/>\
- 조직원들이 어떤 욕구나 보상에 의해 어떠한 행동을 보이고, 그 성과는 어떠한가를 분석하는 이론 <br/><br/>\
# 유형 <br/>\
- 내용이론 : 동기 욕구가 무엇이냐 <br/>\
- 과정이론 : 어떻게 그 행동을 이끄냐 \
',

// 내용이론
'# 정의 : What <br/>\
- 어떤 요소와 내용이 사람들을 동기부여하는지 살피는 연구 <br/><br/>\
# 초기 동기유발 이론 <br/>\
- 메슬로의 인간 욕구 단계설 <br/><br/>\
# 최근 동기유발 이론 <br/>\
- ERG 이론 <br/>\
- 맥클러랜드의 욕구이론 <br/>\
- 인지적 평가이론 <br/>\
- 목표설정이론 <br/>\
- 강화이론 \
',

// 과정이론
'# 정의 : How <br/>\
- 동기부여가 어떤 프로세스를 거쳐 일어나는가에 관심을 갖는 연구 <br/><br/>\
# 종류 <br/>\
- 공정성 이론 <br/>\
- 빅터 브룸 기대 이론 \
',

// [관리표준]- 프로젝트 위험
'# 정의 : 불확실 위험요소 <br/>\
- 발생여부가 불확실하지만 발생하게 되면 잘못된 결과나 손실을 주게되는 위협요소 <br/><br/>\
# 위험의 범주 <br/>\
- Project Risk : 일정 및 비용 증가 위험 <br/>\
- Techincal Risk : 구현이 어려워지거나 불가능 해지는 위험 <br/>\
- Business Risk : 생존 가능성에 대한 위협 <br/><br/>\
# 위험의 종류 <br/>\
- Known Risk : 발견된 위험, 관리 계획을 통해 대응 가능 <br/>\
- Predictable Risk : 과거 경험을 통해 예측 가능한 위험, 관리 계획 통해 대응 가능 <br/>\
- Unpredictable Risk : 사전 예측이 어려운 위험, 계획 수립 불가, 예비비 통한 대응 <br/><br/>\
* 그리타\
',

// 모의실험
'# 정의 : Random Data 시뮬레이션 <br/>\
- 몬테카를로 시뮬레이션 <br/>\
- 확률분포를 고려하여 Random Data를 발생시켜 시뮬레이션 하는 방법 \
',

// [PMBOK 5th edition]- 민감도 분석 <br/>\
'# 정의 : 평가 방법 / 불확실성 / 목표 영향 <br/>\
- Sensativity Analysis <br/>\
- 프로젝트 요소의 불확실성이 검토 대상 목표에 미칠 영향력을 평가하는 방식 <br/><br/>\
# 예시 <br/>\
- Tornado diagram : 어떤 특성치가 가장 큰 영향을 주는지에 대한 분석 결과를 민감도가 높은 순서대로 배열하여 나타낸 도표 \
',

// [관리표준]- 금전적 기대값 분석 
'# 정의 : 통계적 개념 / 발생 가능 / 시나리오 평균 결과 /<br/>\
- 발생할 수도 있고 발생하지 않을 수도 있는 시나리오가 미래에 포함될 때 사안별로 확률의 가중치를 합한 값 <br/>\
- 프로젝트의 위험요소인 특정 사건의 가치와 발생할 확률로 기대화폐가치 (기대값)을 계산하는 기법 <br/>\
- 성공했을 때의 기대 수익에 송공 확률을 적용한 기대값과 실패했을 때의 손실에 실패 확률을 적용한 기대값을 기준으로 위험을 분석하는 방법 <br/><br/>\
- EMV = 성공했을때 수익 * 성공확률 - 실패했을때의 수익 * 실패확률 <br/><br/>\
# 특징 <br/>\
- 의사 결정 나무형태 표현 <br/>\
- 기회는 양수, 리스크는 임수 표현 <br/>\
- EMV = SUM(예상 결과값*발생확률) <br/><br/>\
# 사례 <br/>\
<img src = "./img/EMV_1.png" style = "max-width:100%; height:auto;"><br/>\
<img src = "./img/EMV_2.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 라이지움 85회 1교시 2번\
',

// [관리표준]- 프로젝트 위험관리
'# 정의 : Stake-holder 관리 방법 <br/>\
- 프로젝트 이해 당사자(Stake-holders)간에 효율적인 정보 전달체계를 계획, 조직, 관리하는 방법 <br/>\
- 기회는 극대화하고 위험은 최소화하여 프로젝트의 성공 가능성을 높이는 일련의 관리 활동 <br/>\
- 프로젝트 위험관리는 정성적 분석과 정량적 분석방법이 있으며, 효과 측면에서 정량적 분석기법이 현업에서 많이 활용됨 <br/><br/>\
<img src = "./img/위험관리.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 절차 (계식성량대(계실)감) <br/>\
<img src = "./img/위험관리_0.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/위험관리_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 대응방안 <br/>\
1. 부정적 위험 대응 (회전완수)<br/>\
- 에스컬레이션 : PM 권한 밖 <br/>\
- 회피 : 고립, 변경 <br/>\
- 전가 : 제3자 책임이동 <br/>\
- 완화 : 수용가능까지 낮춤 <br/>\
- 수용 : 능동적, 수동적 <br/><br/>\
2. 긍정적 위험 대응 (활공증수)+<br/>\
- 에스컬레이션 : PM 권한 밖 <br/>\
- 활용 : 리스크 선택 <br/>\
- 공유 : 제3자 기회 <br/>\
- 증대 : 극대화 <br/>\
- 수용 : 활용하지만, 기회추구 x <br/><br/>\
* 라이지움 85회 1교시 2번<br/>\
* KPC 94회 2교시 2번 \
',
  
// 위험분석
'# 정성적 <br/>\
- 수집 : 인터뷰 <br/>\
- 분석 (영품기) : 영향력 평가, 품질 평가, 기타 위험 모수평가 <br/>\
- 표현 (영계) : PI Matrix, 계층적 차트 <br/>\
- 대인 : 촉진 <br/>\
- 기타 (전유미) : 전문가 판단, 위험유형분류, 미팅 <br/><br/>\
# 정량적 <br/>\
- 수집 : 인터뷰 <br/>\
- 분석 (영민의모) : 영향도, 민감도 분석, 의사결정, 모의실험 <br/>\
- 대인 : 촉진 <br/>\
- 기타 (불전) : 불확실성 표현, 전문가 판단 <br/>\
<img src = "./img/영민의모.png" style = "max-width:100%; height:auto;">\
',

// 조달관리(구매)
'# 정의 : 외부 구매 <br/>\
- 과업수행에 필요한 제품, 서비스, 결과물을 외부에서 구매, 획득하기 위한 프로세스 <br/><br/>\
# 절차 <br/>\
- 조달관리계획 수립 <br/>\
- 조달수행 <br/>\
- 조달통제 <br/>\
- 조달종료 <br/><br/>\
# 계약유형 <br/>\
- 확정가격/총괄계약 <br/>\
- 비용상환 계약 <br/>\
- T&M 계약\
',

// 이해관계자관리
'# 정의 : 관리 전략 / 식별 / 기대사항 / 영향력<br/>\
- 프로젝트에 영향미치는 사람,그룹,조직을 식별하고 이해관계자의 기대사항과 영향력 파악하여 관리하는 전략<br/>\<br/>\
# 암기 <br/>\
1. 프로세스 <br/>\
- 식별 : 정보분석, 문서화 <br/>\
- 계획 : 전략 개발 <br/>\
- 관리 : 의사소통 <br/>\
- 감시 : 모니터링 <br/><br/>\
2. 영향도표 : 밀만정감 <br/><br/>\
<img src = "./img/이해관계자관리_1.png" style = "max-width:100%; height:auto;">\
',

// 현저성 모델
'# 정의 : 이해관계자 설명 모델 <br/>\
- Salience Model <br/>\
- 권력성, 긴급성, 적합성에 따라 이해관계자 그룹을 설명하는 모델 <br/><br/>\
# 유형 <br/>\
- Power (영향력) <br/>\
- Legitimacy (프로젝트와 상호작용 및 적합성) <br/>\
- Urgency (의사소통 요구의 긴급성 및 민감성) <br/><br/>\
# 구성 <br/>\
7. Definitive (가장 중요한) <br/>\
4. Dominant (우세한) <br/>\
5. Dangerous (위험한) <br/>\
6. Dependent (의지하는) <br/>\
1. Dormant (휴면기의) <br/>\
2. Discretionary (자유재량에 의한) <br/>\
3. Demanding (요구가 많은) \
', 

// 갈등관리
'# 정의 : 갈등 대처, 기능 최적화 <br/>\
- 갈등을 적절히 대처하여 역기능은 최소화 하고 순기능은 극대화하기 위한 방안 <br/><br/>\
# 원인 : 일정, 프로젝트 우선순위, 자원, 기술적 옵션, 관리절차, 원가, 대인관계 <br/>,br/>\
# 해결전략 <br/>\
- 관철 <br/>\
- 해결 <br/>\
- 타결 <br/>\
- 회피 <br/>\
- 수용 \
',

// ISO 21500
'# 정의 : 프로세스 지침 국제 표준 <br/>\
- 프로젝트 성공을 위한 중요한 프로젝트 관리 및 프로세스에 대한 일반적인 지침을 제공하는 국제 표준<br/><br/>\
# 프로세스 그룹 (착기이통종) <br/>\
- 착수 : 프로젝트 헌장 개발 <br/>\
- 기획 : 계획 수립 <br/>\
- 이행/실행 : 프로젝트 작업지시 <br/>\
- 통제 : 프로젝트 작업통제 <br/>\
- 종료 : 교훈 수집 <br/>\
<img src = "./img/ISO21500_ProcessGroup.png" style = "max-width:100%; height:auto;">\
',

// SWEBOK
'# 정의 : SW 엔지니어링 지식 정리 체계<br/>\
- IEEE Computer Society 에서 제정한 SW 엔지니어링 분야의 지식 정리한 체계 <br/><br/>\
# 특징 <br/>\
- 가이드 라인/개발지침서 포함 <br/>\
- SW 공학에 대한 총체적 접근 <br/>\
- What 제공, How 제공 x <br/>\
- 2004년 SWEBOK 2.0(ISO 24773) 발표 <br/>\
- 2014년 SWEBOK 3.0(ISO 19759) 발표 (15확장) <br/><br/>\
# 구성 (요설개테유형공프도품 전경컴수공)<br/>\
- SW 요구사항 <br/>\
- SW 설계 <br/>\
- SW 개발 <br/>\
- SW 테스트 <br/>\
- SW 유지보수 <br/>\
- SW 형상관리 <br/>\
- SW 공학관리 <br/>\
- SW 공학프로세스 <br/>\
- SW 공학도구와 방법 <br/>\
- SW 품질 <br/>\
+ SW 전문가 실천 <br/>\
+ SW 경제학 <br/>\
+ SW 컴퓨팅 기반 <br/>\
+ SW 수학적 기반 <br/>\
+ SW 공학적 기반 \
',

// 요르돈 법칙
'# 정의 : 초기 체계적 필요 법칙 <br/>\
- 개발초기에 체계적 분석, 설계 수행되지 않으면 후반에 상대적으로 커진다는 법칙 <br/><br/>\
# 품질비용 : 1:10:100의 법칙 <br/><br/>\
# 프로젝트 유형 <br/>\
- 제1형 : Mission Impossible (성공하면 모두 만족) <br/>\
- 제2형 : Kamikaze (성공해도 팀은 희생) <br/>\
- 제3형 : Sucide (성공못함) \
',

// SW 품질
'# 정의 : Software Quality <br/>\
- 주어진 요구사항을 만족시키는 소프트웨어 제품의 특성과 생산성 <br/><br/>\
# 표준 모델 <br/>\
- 제품품질 : ISO 9126, ISO 14598, ISO 12119, ISO 9001, 9002, ISO 25000<br/>\
- SW 프로세스 품질 : ISO 12207, CMMI, SPICE <br/>\
- 품질경영 : 6 시그마, ISO 9000 \
',

// SW 품질관리 
'# 정의 : 경영자원 품질 확보 활동 <br/>\
- 품질통제를 통해 제품의 품질을 확보하고 품질관리 통한 품질 보증으로 프로세스의 품질을 확보함으로써 궁극적으로 경영자원의 품질을 확보하는 활동 <br/><br/>\
# 절차 <br/>\
- 품질계획 수립 <br/>\
- 품질보증 수행 <br/>\
- 품질통제 수행 \
',

// SW 품질보증
'# 정의 : Quality Assuarnce <br/>\
- QP에서 정의한 QC를 제대로 하고 있는지를 확인하는 활동 <br/><br/>\
# 기법 (PMBOK5) (메테워인감) <br/>\
- Management Review : 진행상태 점검 / 경영 결과 보고서 <br/>\
- Technical Review : 기술 적합성 / 기술 검토 보고서 <br/>\
- Walkthrough : 팀 내 결함 찾기 / 비공식적 동료 검토 미팅 <br/>\
- Inspection : 공식적 동료 검토 검사 / 고객 미팅 <br/>\
- Audit : 요구분석, 설계 프로그램 품질검사 / 정보시스템 감리 <br/><br/>\
# 절차 : 품질보증계획 수립 > 엔지니어링활동 검토 > 품질특정평가 > 문서화 > 승인 > 보고 및 통보 <br/><br/>\
# 활동 : 형상관리, 문서관리, 품질기록, 합동검토, 검증 및 확인, 시정조치, 위험관리 \
',

// SW 품질통제 
'# 정의 : 준수여부 감시, 기록, 제시 활동 <br/>\
- Quality Control <br/>\
- 프로젝트 결과가 관련 품질 기준을 준수하는지를 결정하기 위해 감시하고 성과를 평가하고 권고안을 제시하는 활동 <br/><br/>\
# 도구 <br/>\
- 부적합 식별 및 수정 : 통제차트, 검사, 결함수정검토, 런차트 <br/>\
- 부적합 유형 분류 및 우선순위 결정 : 히스토그램, 특성요인도, 파레토 차트 <br/>\
- 원인분석 : 산점도, 흐름도 <br/>\
- 기타 : 통계적 표본추출 \
',

// 품질경영
'# 정의 : 경영 관리 체계<br/>\
- ISO9001, 6 Sigma <br/>\
- 품질을 통해 기업 우위성을 확보하는 한편, 고객만족, 인간성 존중을 바탕으로 전 사원이 혁신과 개선에 참여해 경쟁력을 키우는 경영 관리 체계 \
',

// ISO 9001
'# 정의 : 제품을 생산, 공급하는 품질경영시스템을 평가하여 인증하는 국제표준 \
',

// 품질평가
'# 정의 : SW 제품이 요구사항과 일치하는지 확인하는 체계적이고 계획적인 작업 <br/><br/>\
# 필요성 : 요구사항 검증, 생산성 향상, 품질 향상 <br/><br/>\
# 품질평가 모델 <br/>\
<img src = "./img/SourceCodeQualityEvaluation.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
# 신뢰도 측정 방법 <br/>\
- 성숙성 : 고장을 피해가는 능력 (문제 해결이력, 사용환경 시험) <br/>\
- 오류 허용성 : 결함 발생시 성능 수준 유지 (다운 회피율, 오조작 회피율) <br/>\
- 회복성 : 데이터 복구 능력 (회복율, 복구율) <br/>\
- 준수성 : 목표 이행 능력 (정보제공, 준수율) <br/><br/>\
# 프로세스 인증모델 개선 부각배경 <br/>\
<img src = "./img/SWProductEvaluationBackground.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
# 대응전략 방안 <br/>\
<img src = "./img/SW_Autheorization_Model_Change.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
* KPC 97회 관리 4교시 3번 <br/>\
* 라이지움 87회 2교시 1번 <br/>\
* 119회 응용 4교시 4번\
',

// McCall 품질요소 
'# 정의 : 사용자 요구사항 지표 제시 항목 <br/>\
- 사용자가 요구하는 소프트웨어 제품의 품질을 구체화하였으며, 소프트웨어의 품질에 영향을 미치는 요소들을 제품운영, 제품개선, 제품변환과 같이 세 가지 측면으로 분류하고 이들에게 각각 적용할 수 있는 척도를 제시하고 소프트웨어가 요구된 제품 품질을 달성하기 위해 얼마나 진행되었는지 파악할 수 있도록 지표를 제시 <br/><br/>\
# 구성 <br/>\
- 제품운영 : 운영상 특징 / 정확성, 신뢰성, 효율성, 무결성, 사용성 <br/>\
- 제품개선 : 변화 견디는 능력 / 유지보수성, 시험성, 유연성 <br/>\
- 제품전이(변화) : 새로운 환경 적응력 / 이식성, 재사용성, 상호운영성 \
',

// ISO 9126, 25023
'# 정의 : 사용자관점 품질 특성 국제 표준 <br/>\
- 사용자관점에서 품질 특성을 정의하고 객관적 측정을 위한 품질 평가 매트릭스 제공하는 국제 표준 <br/><br/>\
# 구성 <br/>\
- 품질모델(9126-1) : 주특성(기신사효유이), 부특성 <br/>\
<font color = "red">-> 기능 : 기능성, 유용성, 호환성, 보안성 <br/>\
-> 비기능 : 신뢰성, 사용성, 효율성, 이식성 </font><br/>\
- 외부메트릭(9126-2) : 외부적 성질(시험,운영,관찰가능) <br/>\
- 내부 메트릭(9126-3) : 내부적 성질(설계,코드 산출물 측정) <br/>\
- 사용메트릭(9126-4) : 실제 사용자 환경, 제품 효과 측정 정량적 <br/><br/>\
* 라이지움 87회 관리 2교시 1번\
',
 
// ISO 12119
'# 정의 : 품질 요구사항, 시험에 대한 국제 표준 / <font color = "red">패키지</font> 형태 <br/>\
- 정보기술 및 소프트웨어 패키지 형태의 제품에 대한 품질 요구사항 및 시험에 대한 국제 표준<br/><br/>\
# 대상 <br/>\
- 1단계 : 패키지SW <br/>\
- 2단계 : SW패키지 <br/>\
- 3단계 : 패키지, Critical 수주개발 SW <br/><br/>\
# 구성 (제사실)<br/>\
- 제품 : 기본적인 요구사항과 적절한 문서화 체계 평가 <br/>\
- 사용자문서 : 정확, 이해, 쉬운 구조 평가 <br/>\
- 실행프로그램 : 정확, 안정적 실행 평가 <br/><br/>\
# 절차 : 제품 설명서 시험 > 사용자 문서 시험 > 실행 프로그램 시험 > 시험 기록 > 시험 보고서 작성 <br/><br/>\
* ISO/IEC 25051로 대체 <br/><br/>\
<img src = "./img/ISOIEC12119.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
* 라이지움 87회 관리 2교시 1번\
',

// ISO 14598
'# 정의 : 프로세스 표준 / ISO 9126 사용 / 절차, 기본사항, 평가 프로세스<br/>\
- ISO 9126의 사용을 위한 절차와 기본 상황 및 소프트웨어 평가 프로세스에 대한 표준<br/><br/>\
# 특징 : 반복성, 재사용성, 공정성, 객관성 <br/><br/>\
# 구성 (일기개구평평) <br/><br/>\
- ISO 14598-1 : 일반 사항 (ISO 25040) <br/>\
- ISO 14598-2 : 기획 및 관리 (ISO 25001) <br/>\
- ISO 14598-3 : 개발자를 위한 프로세스 (ISO 25042) <br/>\
- ISO 14598-4 : 구매자를 위한 프로세스 (ISO 25043) <br/>\
- ISO 14598-5 : 평가자를 위한 프로세스 (ISO 25044) <br/>\
- ISO 14598-6 : 평가 모듈 (ISO 25041) <br/>\
<img src = "./img/ISOIEC14598_2.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 라이지움 87회 관리 2교시 1번\
',
 
// ISO 12207
'# 정의 : 체계적인 소프트웨어 획득, 공급, 개발, 운영 및 유지보수를 위해서 소프트웨어 생명주기 공정 표준을 제공함으로써, 소프트웨어 실무자들이 개발 및 관리에 동일한 언어로 의사소통할 수 있는 기본틀을 제공하기 위한 프로세스<br/><br/>\
# 암기 <br/>\
# 구성 : 3개의 생명주기 프로세스, 17개의 세부프로세스, 74개 활동(Activity) 및 224개의 세부활동(Task)로 구성 <br/>\
<img src = "./img/ISO12207Overview.png" style = "max-width:100%; height:auto;"><br/>\
- 기본(획공개운유)<br/>\
- 지원(품검확합감문형문)<br/>\
- 조직(관기훈개)<br/><br/>\
# 유지보수 프로세스 <br/>\
- 프로세스 구현 <br/>\
- 문제 및 변경 분석 <br/>\
- 변경 구현 <br/>\
- 유지보수 검토 및 승인 <br/>\
- 이전(마이그레이션) <br/>\
- SW 폐기<br/><br/>\
* 라이지움 87회 관리 2교시 1번\
',
 
// [ISO 21500]- ISO 15504(SPICE)
'# 정의 : SW 프로세스 품질 표준 <br/>\
- 여러 프로세스 개선모형을 국제표준으로 통합한 ISO의 소프트웨어 프로세스 모형 <br/>\
- SW프로세스 전반을 심사하여 조직의 SW개발 프로세스를 개선하고 개발자의 개발능력을 향상시킴으로써 개발위험을 통제하기 위한 목적으로 ISO에서 추진하는 SW품질 표준화 심사평가 모형<br/><br/>\
# 등장배경 <br/>\
- ISO 9000-3이 SW 분야 특성 및 프로세스면 개선하지 못함 <br/>\
- ISO 12207 : What만 있고 How가 없는 단점 해결 <br/><br/>\
# 기본목표 <br/>\
- 프로세스별 성능수준 제시 <br/>\
- 구체적 향후 개선방향 제시 <br/>\
- S/W 프로세스 개선 + S/W 프로세스 수행능력수준 판단 <br/><br/>\
# 수행능력 차원 평가 (Y축 / IPMEPO) <br/>\
0. Incomplete : 미구현 혹은 목적의 미달성 <br/>\
1. Performed : 프로세스의 수행 및 목적 달성 <br/>\
2. Managed : 프로세스 수행의 계획 및 관리 <br/>\
3. Established : 표준 프로세스의 사용 <br/>\
4. Predictable : 프로세스의 정량적인 이해 및 통제 <br/>\
5. Optimizing : 프로세스의 지속적 개선 <br/><br/>\
# 프로세스 차원 평가 (ISO 12207 생명주기 프로세스 기반)(X축 / CESMO) <br/>\
1. 기본 프로세스 <br/>\
- CUS(Customer-Supplier) : 인수, 공급, 요구도출, 운영 <br/>\
- ENG(Engineering) : 시스템과 소프트웨어 개발, 유지보수 <br/><br/>\
2. 지원 프로세스 <br/>\
- SUP(Support) : 문서화, 형상, 품질보증, 검증/확인, Review, 감사, 문제해결 <br/><br/>\
3. 조직 프로세스 <br/>\
- MAN(Management) : 프로젝트 관리, 품질관리, 위험관리 <br/>\
- ORG(Organization) : 조직배치, 개선활동, 인력관리, 측정도구, 재사용 <br/><br/>\
<img src = "./img/ISO15504_4.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
* ISO 33000으로 표준 Family화 진행 <br/><br/>\
* 라이지움 87회 관리 2교시 1번\
',
 
// CMMI
'# 정의 : 기업 능력수준 지표 모델 (de facto)<br/>\
- Capability Maturity Model Integration <br/>\
- SW 및 시스템 품질인증 수행하여 정보시스템 구축하는 기업의 능력수준 나타내기 위해 SW-CMM과 SE-CMM을 통합해 개발한 모델 <br/><br/>\
# 연혁 <br/>\
- V1.0(1999) : 미국 개발 <br/>\
- V1.1(2002) : SW-CMM의 발전된 형태 <br/>\
- V1.3(2010) <br/>\
- V2.0(2018) : 2020년 10월부터 V2.0 심사만 허용<br/><br/>\
# 심사단계 <br/>\
- 예비심사(문서위주) <br/>\
- 본심사(문서,인터뷰,실제활동) <br/><br/>\
# 수행절차 : 평가준비 > 평가수행 > 평가결과보고 <br/><br/>\
# 성숙도 <br/>\
<img src = "./img/CMMI_Level.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
* 라이지움 87회 관리 2교시 1번\
',
 
// CMMI V2.0
'# 정의 : 성과에 대한 비즈니스적 가치입증에 중점을 두고, 비즈니스의 동향 반영을 통해 사용자 친화적인 모델로 진화한 CMMI 1.x 후속 모델 <br/><br/>\
# 변화 방향 <br/>\
1. CMMI 적용의 ROI와 Value 강조 <br/>\
2. 유연한 통합 모델로 개선 <br/>\
3. 쉽고, 사용하기 편리한 모델 <br/>\
4. CMMI 벤치마킹 및 심사 Value 증대 <br/><br/>\
# 특징 <br/>\
- 최종 심사 이후 성과보고서 제출, 성과 개선 강조 <br/>\
- 보안, 안전 등의 최신 트랜드 추가 <br/>\
- 현재의 모범 사례들을 활용한 모델 구조 변경 <br/><br/>\
# 구조도 <br/>\
<img src = "./img/CMMI_Model.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
# 심사방법 <br/>\
<img src = "./img/CMMI_Appraisal.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
# 구성 <br/>\
<img src = "./img/CMMI_Detail.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
# 전문가 의견 <br/>\
- 변화 방향 : 긍정적 <br/>\
- 심사 방향 : 부정적 <br/><br/>\
# 해결 과제 <br/>\
- 신규 프랙티스 대한 정기적 측정 및 경영평가 도입 <br/>\
- 프로세스 단계별 이행 <br/>\
- 정량적 관리, 개선성과 가시화 필요 <br/><br/>\
* KPC 97회 관리 4교시 3번\
',
 
// ISO/IEC 33000
'# 정의 : 프로세스 능력 평가를 위한 프로세스 심사모델의 구성을 전체 Framework를 제공하는 ISO 국제 표준 <br/><br/>\
# 구성 <br/>\
<img src = "./img/ISOIEC33000Overview.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 프로세스 수준 모델 <br/>\
<img src = "./img/ISOIEC33000Model.png" style = "max-width:100%; height:auto;"><br/><br/>\
* KPC 97회 관리 4교시 3번\
',
 
// ASPICE
'# 정의 : 자동차 SW 개발 프로세스 모델 <br/>\
- Automotive SPICE <br/>\
- ISO/IEC 33000 표준 기반의 자동차 소프트웨어 개발에 특화된 국제표준 프로세스 모델 <br/>\
- 유럽의 완성차 업체 연합 주도의 자동차 소프트웨어 개발 프로세스 모델 <br/><br/>\
# 암기 <br/>\
- PAM : 33020 : 수-IPMEPI <br/>\
- PRM : 12207 : 프-어.스플.시소 / 서/ 맨.핌.레우 : 3프로세스군 : 32프로세스 <br/><br/>\
# 등장배경 <br/>\
- 자동차 SW 중요성 <br/>\
- 자동차 전장 범위,복잡도 증가 <br/>\
- 복잡도 증가, 품질문제 발생 <br/><br/>\
<img src = "./img/ASPICE.png" style = "max-width:100%; height:auto;">\
',

// CAR
'# 정의 : 결함 재발 방지 시정 조치 활동 <br/>\
- Casual Analysis & Resolution <br/>\
- Level 4에서 5로 진입하기 위해 만족되어야 하는 두가지 프로세스 영역(CAR, OPM) 중 하나 <br/>\
- 결함, 기타문제들의 근본 원인을 분석하고 향후 재발을 방지하기 위한 시정조치를 취하는 활동 <br/><br/>\
# 절차 : 평가 대상 식별 > 원인분석 회의 > 해결방안 도출 > Pilot 수행 > 조직프로세스 적용 \
',

// SP 인증
'# 정의 : 한국형 SW 프로세스 평가모델 <br/>\
- SW 산업진흥법 23조 근거, SW 개발 단계별 작업절차, 산출물 관리역량 분석하여 SW 역량 수준 평가, 인증하는 한국형 SW 프로세스 평가모델 <br/><br/>\
# 평가영역 <br/>\
- 2등급 : 프로젝트 관리, 개발, 지원 <br/>\
- 3등급 : 조직, 프로세스 개선 <br/><br/>\
# 인증등급 <br/>\
- 1등급 : 프로젝트 임기응변식 수행 <br/>\
- 2등급 : 시행착오 프로젝트 팀내 반복 발생하지 않으나 조직 차원 발생 <br/>\
- 3등급 : 안정되고 품질수준 조직차원 방지 <br/><br/>\
# 인증 체게 <br/>\
- 정책기준 : 과기정통부 <br/>\
- 인증기관 : nipa \
',

// IEEE 1633
'# 정의 : SW 신뢰성 평가 프로세스 표준 <br/>\
- SW 신뢰성 분석한 데이터 수집절차, 신뢰성 평가 위한 프로세스, 가이드라인 제공 국제 표준 <br/><br/>\
# 암기 <br/>\
- 프로세스(6) : 도신합(정운테) 데평(부모)개 <br/><br/>\
# 평가 프로세스 <br/>\
<img src = "./img/IEEE1633_1.jpg" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/IEEE1633_2.png" style = "max-width:100%; height:auto;">\
',
  
// [제품품질]- ISO 25000(SQuaRE)
'# 정의 : 품질 측정 및 기법, 평가 및 방안에 대한 국제 표준 / 각 단계 산출 제품 / <br/>\
- SQuaRE / Software product Quality Requirements and Evaluation <br/>\
- 소프트웨어 개발 공정 각 단계에서 산출되는 제품이 사용자 요구를 만족하는지 검증하기 위한 품질 측정 및 기법, 평가 및 방안에 대한 국제 표준 <br/>\
- SW 품질측정 및 평가의 복잡성 해소 위해 S/W 품질평가모델 ISO 9126와 S/W 평가 절차모델 ISO 14598을 통합 정리한 SW 품질평가 통합모델 <br/><br/>\
# 암기 <br/>\
- 구성(6) : 관모메요평확 <br/>\
- 품질특성(8) : 기신유수유이보호 <br/><br/>\
# 구성 : 관모메요가 <br/>\
- 2500n : 품질관리 - 25000(가이드라인), 250001(14598-2(계획/관리)) <br/>\
- 2501n : 품질모델 - 25010(제품품질모델 9126-1), 25012(데이터 품질모델)<br/>\
- 2502n : 품질메트릭 - 25020(매트릭 참조 모델), 25021(품질 측정요소), 25022(내부 매트릭 9126-3), 25023(외부 메트릭 9126-2), 25024(사용중 품질 9126-4)<br/>\
- 2503n : 품질요구- 25030(품질요구 15288) <br/>\
- 2504n : 품질평가 - 25040(평가개요 14598-1), 25041(평가모델 14598-6), 25042(개발자프 14598-3), 25043(획득자프(14598-4), 25044(평가자프 14598-5), 25045(복구평가모델)<br/>\
- 25050~99 확장 : 25051(COTS 품질 요구사항), 25060(사용성 품질 특성 구조), 25062(사용성 시험구조) <br/><br/>\
<img src = "./img/ISO25000.png" style = "max-width:100%; hegiht:auto;">\
',

// ISO 25010
'# 정의 : SW 품질 특성과 품질평가를 Metrics를 정의한 국제표준 <br/>\
- 소프트웨어의 품질특성과 품질평가 척도를 정의한 국제표준 <br/>\
- 사용자 관점의 소프트웨어 품질특성에 대한 표준 <br/><br/>\
# 특징 <br/>\
- 정량적 품질 평가 <br/>\
- 세분화 및 계층화 <br/>\
- 품질평가 지침 <br/>\
* ISO/IEC 9126 -> ISO/IEC 25010으로 개정 요약 <br/><br/>\
# 주특성 : 기능성, 신뢰성, 사용성, 효용성, 유지보수성, 이식성, 호환성, 보안성 \
',

// GS 인증
'# 정의 : 국내 품질인증제도 <br/>\
- TTA가 국내 SW완성도, 기술력, 사용성, 신뢰성 평가하여 제품에 부여하는 품질인증제도 <br/><br/>\
# Overview <br/>\
<img src = "./img/GS_Overview.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
# 인증 대상 <br/>\
<img src = "./img/GS_Target.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
# 인증제도 기준 (측시평)<br/>\
<img src = "./img/GS_Standard.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
# 절차 <br/>\
<img src = "./img/GS_Process.png" style = "max-width:100%; hegiht:auto;"><br/>\
<img src = "./img/GS_Process_Detail.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
# 효과 <br/>\
<img src = "./img/GS_Effect.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
# 등급별 차이점 <br/>\
<img src = "./img/GSGrade.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
* KPC 93회 관리 3교시 6번\
',

// NEP 인증
'# 정의 : 최초 개발 촉진 제도 <br/>\
- New Excellent Product <br/>\
- 국내에서 최초로 개발되는 기술 또는 이에 준하는 대체기술을 적용한 제품을 인증하고, 제품의 초기 판로를 지원 및 기술개발을 촉진하기 위한 제도 <br/><br/>\
# 근거 <br/>\
- 산업기술혁신 촉진법 <br/><br/>\
# 인증 예외 <br/>\
- 국내 일반화된 기술 적용 <br/>\
- 핵심 부품 일체가 수입제품 <br/>\
- 적용한 신기술이 신제품의 고유기능과 목적 구현에 불필요 <br/>\
- 엔지니어링 기술이 주된 기술이 되는 시설 <br/><br/>\
# 인증 혜택 <br/>\
- 공공기간 우선 구매, 사업우대, 홍보지원 <br/><br/>\
# 인증 주체 <br/>\
- 산저부 : 기술표준원 <br/>\
- 정통부 : 전파연구소 <br/><br/>\
# 유효기간 <br/>\
- 3년 (최대 6년) \
',

// NET 인증
'# 정의 : 신기술 국가 인증제도 <br/>\
- New Excellent Technology <br/>\
- 신기술을 조기에 발굴하고 그 우수성을 정부가 인증함으로써, 신기술의 상용화와 기술거래를 촉진, 제품의 원활한 시장진출을 돕기 위해 도입된 국가 인증제도 <br/><br/>\
# 근거 : 산업기술혁신 촉진법 <br/><br/>\
# 인증 대상 <br/>\
- 정량적 평가 지표확보한 2년이내 상용화 가능한 기술 <br/><br/>\
# 인증 혜택 <br/>\
- 국가/공공기관 구매지원, 자금지원, 조세지원, 기술지도, 지경부 산업기술 개발 사업 참여지원 <br/><br/>\
# 인증 주체 <br/>\
- 과기부 : 산업기술진흥협회 <br/>\
- 건교부 : 건설교통기술평가원 <br/>\
- 환경부 : 환경관리공단 <br/><br/>\
# 유효기간 : 3년 (최대10년) \
',

// 공개SW컴플라이언스이슈
'# 정의 : 저작권 보호, 사용간 상충 문제 <br/>\
- 저작자를 보호하기 위해 사용조건과 의무조항이 공개 SW 사용에 있어 컴플라이언스 이슈를 발생시키는 문제 <br/><br/>\
# 공개 SW 활성화를 위한 방안 <br/>\
- 소스코드 분리 : 분리정책 사용 <br/>\
- 저작권 선언문구와 라이선스 정보의 보존 <br/>\
- 공개 SW 명세 정보의 표준화 \
',

// 저작권, 특허권
'# 저작권(Copyright) : 창작자가 취득하는 권리 <br/>\
- 창작물에 대하여 창작자가 취득하는 권리. 저작물은 저작권자의 허락을 얻어야 저작물 복제, 배포, 수정 가능함 <br/><br/>\
# 특허권(Patent) : 발명자가 갖는 독점적 배타권 <br/>\
- 발명에 관하여 발명자가 갖는 독점적 배타권. 저작권과 달리 출원, 심사, 등록 절차가 수행되어야 권리가 발생 <br/><br/>\
* 라이지움 86회 1교시 5번 \
',
  
// FRAND
'# 정의 : Fair, Reasonable And Non-Discriminatory Terms <br/>\
- 공정하고 합리적이고 비차별적인 표준이 된 특허기술의 권리자가 이 특허 사용자 중 일부를 차별할 수 없도록 하는 개념적 용어 <br/>\
- ETSI가 제정한 특허기술 사용에 관한 조항에 포함되면서 널리 쓰이게 됨 \
',
  
// 지식재산권
'# 정의 : 인간의 지적 창작물 보호 <br/>\
- 인간의 창조적 활동 또는 경험 등을 통해 창출하거나 발견한 지식,정보,기술이나 표현, 표시 그 빡에 무형적인 것으로서 재산적 가치가 실현될 수 있는지적 창장물에 부여된 재산에 관한 권리 <br/><br/>\
# 종류 <br/>\
- 산업 재산권 : 특허, 실용신안, 디자인, 상표 <br/>\
- 저작권 : 저작권, 저작인접권(음악제작자) <br/>\
- 신지식재산권 : 첨단사업재산권(AI), 산업저작권(SW), 정보재산권(DB, 영업비밀) <br/><br/>\
# 보호 기술 <br/>\
- 난독화 : Reverse Engineering 방지 <br/>\
- Finger printing : 저작권 정보 삽입 <br/>\
- Water mark : 저작자 정보 삽입 <br/>\
- Encryption : 전체 알고리즘 적용 \
',

// SDLC 
'# 정의 : 소프트웨어 생명주기 모형 <br/>\
- SW가 타당성 조사로부터 개발, 유지보수, 폐기까지의 전 과정을 하나의 주기로 보고, 전 과정을 단계별로 나눈 생명주기 모형 <br/><br/>\
# 절차 <br/>\
- 타당성 조사 -> 요구분석 -> 설계 -> 개발 -> 시험 -> 유지보수 -> 폐기 <br/><br/>\
# 종류 <br/>\
- 폭포수 : 분석, 설계, 개발, 구현, 시험, 납품 <br/>\
- 프로토타입 : 시제품, 점진적 개발 <br/>\
- 나선형 : 계획, 위험분석, 개발, 고객 평가 <br/>\
- 반복적점증적 : 정의, 시스템아케틱처, (증분명세,구현,검증,통합), 증분인도, 운영 <br/>\
- RAD : 빠른개발 모델(60~90일), CASE 도구 <br/>\
* CASE(Computer-Aided Software Engineering) : 시스템 개발 방법론 자동화 지원 <br/><br/>\
# 연계도 <br/>\
<img src = "./img/SDLC_Model_Interraction.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 라이지움 87회 관리 1교시 10번\
',

// 폭포수모델
'# 정의 : 순차적 접근 방법 / 고전 / SDLC<br/>\
- 고전적 라이프 사이클 패러다임의 분석, 설계, 개발, 구현, 시험 및 유지보수과정을 순차적으로 접근하는 방법<br/><br/>\
# 암기 <br/>\
- 선정기준 : 방통시인규 <br/>\
- 구성 : 타요설개시유폐 <br/><br/>\
# 구성 : 타당성조사 -> 요구분석 -> 설계 -> 개발 -> 유지보수 -> 폐기 <br/><br/>\
# 선정기준 : [방통시인규]<br/>\
- 개발소요 방법/도구 <br/>\
- 통제수단 <br/>\
- 시간/비용 <br/>\
- SW산출물 인도 방식 <br/>\
- 프로젝트 규모/성격 \
',

// 51
'# 정의 : 초기 실제 운영 모델 개발 / 이해향상 / 요구사항 도출 용이<br/>\
- 개발하려는 시스템의 주요기능을 초기에 실제 운영할 모델로 개발하여 사용자 이해향상, 요구사항 도출이 용이한 모델<br/><br/>\
# 장/단점 <br/>\
- 장점 : 요구사항 도출용이, 시스템 이해와 품질 향상, 개발자와 사용자 의사소통 원활 <br/>\
- 단점 : Prototype 폐기 따른 비경제적, 산출물 문서화 어려움, 프로젝트 관리소홀, 최종결과물 오해 <br/><br/>\
# 적합 : 사용자 요구가 불투명할 때, 프로젝트 타당성이 의심스러운 경우 신기술 실현가능성 검증시 <br/><br/>\
# 유형 <br/>\
- 수평 프로토타입 : 다양한 기능 고려해 결과물 전반적 예상 가능 <br/>\
- 수직 프로토타입 : 주요기능만 선별 세부 기능까지 구현 <br/>\
=> 단계별 선별 적용 : 초기 범위 결정시 수평 프로토타이핑 활용, 설계 검증단계에서 수직 프로토타이핑 활용, 3D 프린팅과 연결 <br/>\
=> Hybrid Prototyping : 핵심 주요 기능에 대해 수평과 수직을 동시에 적용한 시나리오 프로토타이핑 수행 <br/><br/>\
<img src = "./img/Prototype_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/Prototype_2.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/Prototype_3.png" style = "max-width:100%; height:auto;">\
',

// 52
'# 정의 : 점진적 완성 모델 / 폭포수, 원형 + 위험분석 / 지속적 프로토타입 개선 <br/>\
- 폭포수모델과 원형모델에 위험분석 추가하여 개발된 프로토타입을 지속적으로 개선하여 최종 SW를 점진적으로 완성해 나가는 모델 <br/><br/>\
# 암기 : 계위개평 <br/><br/>\
# 단계 : 계획(목표)수립 -> 위험분석 -> 개발 -> 고객 평가 <br/><br/>\
# 장/단점 <br/>\
- 장점 : 신속한 사용자 요구 파악, Risk 감소 <br/>\
- 단점 : 개발기간 장기화 가능성(프로젝트 관리 어려움, 다수고객 사용제품에 부적합)<br/><br/>\
# 적용방안 : 위험관리 강화를 위해 다양한 위험관리 기법 적용 <br/><br/>\
<img src = "./img/SWE_52.PNG" style = "max-width:100%; hegiht:auto;">\
',

// 반복적개발모델
'# 정의 : 반복 개발 완성 모델 / 핵심 요구사항 /<br/>\
- Iterative 모델 <br/>\
- 핵심 요구사항 일부분 혹은 제품의 일부분을 반복적으로 개발하여 최종 시스템으로 완성하는 모델<br/><br/>\
# 암기 <br/>\
- 유형 : 증진 <br/><br/>\
# 적용방안 <br/>\
- 빌드관리 어려움 => CTIP, ALM 등의 자동화된 통합체계 적용 <br/><br/>\
# 유형 <br/>\
- Incremental(증분형) : 범위 확대, 일부분 개발 <br/>\
- Evolutionary(진화형) : 핵심 요구사항부터 개발 <br/><br/>\
# 프로세스 : 분석(증분)-> 설계 -> 구현/시험 -> 설치/운영 <br/><br/>\
# 진화<br/>\
- 특징(3) : 릴리즈 버전관리, 요구사항 명확화, 재사용 <br/><br/>\
<img src = "./img/Iterative_1.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
<img src = "./img/Iterative_2.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
<img src = "./img/EveloutionalModelCompare.png" style = "max-width:100%; hegiht:auto;">\
',

// RAD
'# 정의 : 짧은 기간 개발 방법 <br/>\
- Rapid Application Developmen <br/>\
- 중요한 시스템을 빠르게 개발하면서도 개발 비용을 줄이고 품질을 유지하기 위해 CASE등 최신개발도구 사용해 2~3개월의 짧은 기간동안 신속하게 개발하는 방법 <br/><br/>\
# 특징 <br/>\
- 도구 CASE 사용 <br/>\
- Prototyping 사용 <br/>\
- 사용자 적극참여 <br/>\
- 소요기간 (60~90일간) 짧은기간 <br/><br/>\
# 프로세스 <br/>\
- 비즈니스 모델링 JRP(Joint Requirement Planning) <br/>\
- 데이터 모델링 <br/>\
- 프로세스 모델링 JAD(Joint App Design) <br/>\
- App 생성 : CASE, RDB, 4GL <br/>\
- 시험 및 인수 \
',

// JAD 
'# 정의 : 집중적 회의 개발 프로세스 <br/>\
- Joint Application Development / Design <br/>\
- 사용자, 관리자, 분석가들이 일정기간(time-box) 내 시스템 요구사항을 규정하기 위해 집중적인 회의를 진행하는 개발 프로세스 <br/><br/>\
# 참여자 <br/>\
- Facilitator (Session Leader) <br/>\
- Analysis <br/>\
- Stakeholders (주제별 전문가, 프로젝트 sponsor 포함) <br/><br/>\
# 절차 <br/>\
- JAD Project 정의 <br/>\
- 사용자 요구조사 (예비정보수집) <br/>\
- JAD session 준비 (Team Building) <br/>\
- JAD session 실행 <br/>\
- 종료 \
',

// Clean Room
'# 정의 : 수학적 기초 완전 무결시스템 목표 모델 / 반복, 박스구조, 함수적 등가성 이용 검증 <br/>\
- 시스템의 핵심 영역을 최초로 개발 후 반복, 박스구조 또는 함수적 등가성 이용 검증하여 수학적 기초의 완전무결시스템 목표하는 모델(IBM사 고안)<br/><br/>\
# 암기 <br/>\
- 명세검증(3) : 박함통 <br/>\
- 박스구조(3) : 블상클 <br/>\
- 함수적등가성 순분선반 <br/>\
- 단계(4) : DRPR <br/><br/>\
# 특징 <br/>\
- 목표는 완전 무결한 시스템<br/>\
- 엄격한 설계 <br/>\
- 수학적 기법 활용한 Test <br/><br/>\
# 증가분 인크리먼트 검증 방법 <br/>\
1) 박스구조 분석에 의한 단계적 상세화 : 증가분 상세 검증 <br/>\
2) 함수등가성에 기초한 검증 : 상세화한 것이 정확한지의 검증 <br/>\
3) 이용 시나리오에 의한 통계적 테스트 <br/><br/>\
# 구성 <br/>\
1. 박스구조(블상클) <br/>\
- 블랙박스 : 입출력 데이터 흐름 중심 <br/>\
- 상태박스 : 블랙박스에 상태추가 <br/>\
- 클리어박스 : 상태박스에 제어흐름 추가 <br/><br/>\
2. 함수적 등가성(순분선반) : 순차, 분기, 선택, 반복 <br/><br/>\
# 단계 <br/>\
- SW Development : 박스구조 이용 <br/>\
- Reliability Certification : MTTF, 사용법 TEST <br/>\
- Project Mgmt : 점진개발 <br/>\
- Review : 재검토 <br/><br/>\
<img src = "./img/CleanRoom_1.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
<img src = "./img/CleanRoom_2.png" style = "max-width:100%; hegiht:auto;">\
',

// 함수적 등가성
'# 정의 : 명세, 결과물 등가 확인 <br/>\
- 명세를 입력과 출력의 대등관계로 정의된 함수관계로 보고 반복적 개발시 원래 명세와 등가함을 확인 \
',

// SW 개발 방법론 <br/>\
'# 정의 : SW공학원리 + SW개발생명주기 적용 개념 <br/>\
- SW공학원리를 SW개발생명주기에 적용한 개념으로 작업활동, 절차, 산출물, 기법등을 체계적으로 정리한 이론 <br/><br/>\
<img src = "./img/SW개발방법론.png" style = "max-width:100%; hegiht:auto;">\
',

// 구조적 방법론
'# 정의 : 요구사항 및 문서화 기반 SW 개발 방법론 / 모듈화 하향식 분할 수행 <br/>\
- 소프트웨어 모듈화를 위해 하향식 분할의 분석/설계 수행하며 사용자 요구사항 및 문서화를 기반으로 소프트웨어를 개발하는 방법론<br/><br/>\
# 암기 <br/>\
- 특징(3) : 프모폭 <br/>\
- 구성(4) : 분설언프 <br/>\
- 한계(3) : 단위 데이터 복잡성 <br/><br/>\
# 특징 <br/>\
- 프로세스 중심 <br/>\
- Top Down 방식 : 정보공학과 동일 <br/>\
- 분할과 정복 : 정보공학과 동일 <br/>\
- 단계적/절차적 Waterfall 기반 <br/><br/>\
# 단계<br/>\
1. 구조적 분석 : 도형중심, Top Down방식 기능 분해 <br/>\
- 산출물 : DFD, ERD, STD(상태전이도), Mini-Spec(소기능명세서), Data Dictionary(자료 사전) <br/>\
2. 구조적 설계 : 추상화, 결합도, 응집도 고려<br/>\
- 산출물 : Structure Chart, 프로그램 명세서, Multi-Level DFD <br/>\
3. 구조적 개발 : 계층적 형식, 제한된 제어구조, 작성순서대로 PG실행 <br/>\
=> 3개의 논리적 구조 : 연속(Sequence), 조건(IF-Then-Else), 반복(Repetition) \
',

// V Model 
'# 정의 : Verification, Validation 지원 개발 검증 모형 <br/>\
- 소프트웨어 개발모델 중 폭포수모델의 각 단계별 Verification과 최종 완성물의 Validation을 지원하기 위해 개발된 검증 모형 <br/><br/>\
# 장단점 <br/>\
1. 장점 <br/>\
- 모든 단계에 검증과 확인 과정이 있어 오류를 줄일 수 있음 <br/>\
- 비용 시간 감소 <br/><br/>\
2. 단점 <br/>\
- 생명주기의 반복을 허용하지 않아 변경을 다루기가 쉽지 않음 \
',

// DESS V Model
'# 정의 : 유럽 ITEA, 실시간 임베디드 개발모델 <br/>\
- 유럽 ITEA 협회 고안, 실시간 임베디드 SW 개발위한 SW 개발 생명주기 모델 <br/><br/>\
# 특징 <br/>\
- H/W, S/W 이원화 개발환경 <br/>\
- Relation V : 구현 관점 <br/>\
- Validation V : 확인 및 검증관점 <br/>\
- Model Checking, Review, C-Testing, Integration Testing 중점 <br/><br/>\
<img src = "./img/DESS_VModel.png" style = "max-width:100%; height:auto;">\
',

// Multiple V Model
'# 정의 : Model, Prototype, Final Product Model <br/>\
- 기존의 V 모델을 모델, 프로토타입, 최종제품으로 나누어 연결한 모델 <br/><br/>\
# 구성<br/>\
1. Model : PC를 통해 Simulation TEST <br/>\
2. Prototype : 실험용 HW에서 Prototyping TEST <br/>\
3. Final Product : 실제 HW 및 운영환경에서 테스트 <br/><br/>\
# 각 단계 는 Design, Build, Test 순차적인 개발과정 포함\
',

// W Model 
'# 정의 : 동적 한계 극복 모델 <br/>\
- V 모델의 동적인 테스트 사이클만 제공하는 단점을 보완, 다양한 테스트 단계와 테스트 기반들 사이를 연결한 모델 \
',

// COMET
'# 정의 : 초기단계 명확화 모델 <br/>\
- Concurrent Object Modeling and [architectural] design mETod <br/>\
- 하드웨어 및 소프트웨어의 동시 설계 위험성을 최소화하기 위하여 중간에 모형 주택과 같은 의미의 폐기형 프로토타이핑 기법을 적용하여 하드웨어와 소프트웨어간의 역할분담 등을 개발 초기 단계에서 명확히 하는 모델 <br/><br/>\
# 특징 <br/>\
- 임베디드 시스템에 적합 <br/>\
- 개발 중간단계에서는 점증적 프로토타이핑 기법을 적용 <br/>\
- 점진적 반복적 \
',

// 정보공학방법론
'# 정의 : 데이터 중심 개발 방법론 / 기업 정보 + 공학적 기법 /<br/>\
- 기업 정보시스템에 공학적 기법을 적용하여 시스템계획, 분석, 설계 및 구축을 하는 데이터 중심의 개발 방법론<br/><br/>\
# 암기 <br/>\
- 특징(5) : 기데도분공 <br/>\
- 단계(4) : 정업분설구 <br/>\
- 원칙(3) : 분데모 <br/>\
- 기술(9) <br/>\
- 한계(4) <br/><br/>\
# 특징 : 기업중심, ISP 중심, 데이터중심 분석/설계, 프로세스/데이터 분리, 분할과 정복, 공학적 접근(자동화도구), 사용자참여, Repository, 통합 CASE툴, 4세대 언어, 프로토타이핑 <br/><br/>\
# 절차: ISP -> BAA(업무영역분석) -> BSD(업무시스템설계) -> BSC(구축) <br/><br/>\
# 원칙(3) : 분할과 정복, 데이터,프로세스 균형유지, 모듈화에 의한 하향식 구성 <br/><br/>\
# 핵심기술 (9) : FW, UML, ERD, Architecture, DB, Repository, CRUD, 프로토타이핑, 통합 CASE Tool <br/><br/>\
# 한계(4) <br/>\
- 구조적 방법론 SDLC 그대로 사용 <br/>\
- 중소규모 Prj 적용 어려움 <br/>\
- CASE Tool 사용 어려움 <br/>\
- 복잡한 논리구조와 많은 산출물 <br/><br/>\
<img src = "./img/SWE2_56_1.PNG" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/SWE2_56_2.PNG" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/정보공학방법론_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
',

// CRUD 매트릭스 
'# 정의 : 상관관계 분석 매트릭스 <br/>\
- Data의 Create, Read, Update, Delete를 업무 Process와 매칭한 프로세스와 데이터 모델링의 상관관계 분석 매트릭스 <br/><br/>\
# 절차 <br/>\
- ERD 분석 및 작성 <br/>\
- 업무 기능 분해도 작성 <br/>\
- CRUD Matrix 작성 \
',

// SW 추상화
'# 정의 : 간결화 모델링 표현 <br/>\
- 복잡한 문제 및 상황을 간결하고, 명확하게 모델링하여, 자료 처리, 제어 행위에 대한 표현, 클래스 내의 메소드를 설계하여, 특정 대상을 프로그램 언어로 표현하는 SW 특징 <br/><br/>\
# 유형 <br/>\
- 자료 추상화 <br/>\
- 제어 추상화 <br/>\
- 구조적 추상화 <br/>\
- 단위 추상화 <br/>\
- 프로시저 추상화 <br/>\
- 기능 추상화\
', 

// CBD
'# 정의 : 소프트웨어 민첩성(생산성 확보)과 품질향상을 위한 방법론 <br/>\
- 기 개개발된 SW 컴포넌트를 조립, 새로운 시스템을 구축한느 방식으로 객체지향의 단점인 SW 재사용성을 극대화한 개발방법론 <br/><br/>\
# 특징 (생고재편기관사) <br/>\
- 생산성 : 시간 단축 <br/>\
- 고품질 : 품질 검증 컴포넌트 사용 <br/>\
- 재사용성과 대치성 : 실행기반의 재사용 <br/>\
- 변경 용이성 : 요구사항 변화 수용 안정적 <br/>\
- 기술 집약석 : 기술 숙련에 대한 집중 <br/>\
- 관리 용이성 : 독립적인 컴포넌트 단위의 관리로 복잡성 최소 <br/>\
- 사용자 중심 <br/><br/>\
<img src = "./img/CBD_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/AgileCBD.png" style = "max-width:100%; height:auto;">\
',

// SOA
'# 정의 : 비지니스 프로세스 기반 개발 방법론 / 서비스 조합 <br/>\
- Service Oriented Architecture 서비스 기반 방법론(SOA) = 서비스 기반 아키텍처 <br/>\
- 서비스를 조합하여 새로운 서비스를 생성하는 비즈니스 프로세스 기반의 개발 방법론<br/><br/>\
# 암기 <br/>\
- 특징(4) : ILMC <br/>\
- 구성 : 브프컨리 <br/>\
- 기술(4) : 교미호기등 <br/><br/>\
# 특징 <br/>\
- 프로세스 중심 <br/>\
- 플랫폼 독립적 어플리케이션 통합 <br/>\
- Loosely coupled <br/>\
- 메시지 및 프로세스 상태관리 <br/>\
- 현업과 재사용 <br/><br/>\
# 구성 <br/>\
- Service Broker <br/>\
- Service Provider <br/>\
- Service Consumer <br/>\
- Service Repository <br/><br/>\
# 기술 <br/>\
- 데이터 교환(XML) <br/>\
- 미들웨어 (ESB) <br/>\
- 서비스호출(SOAP) <br/>\
- 서비스 기록(WSDL) <br/>\
- 서비스 등록 (UDDI) <br/><br/>\
<img src = "./img/SOA_1.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
<img src = "./img/SOA_2.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
<img src = "./img/SOA_3.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
<img src = "./img/SOA_4.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
<img src = "./img/SOA_5.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
* 사례 : 구글맵 \
',

// Agile 방법론
'# 정의 : 사람 중심 효율적 시스템 개발 방법론 / 유연성 / 신속성<br/>\
- 절차보다는 사람이 중심이 되어 변화에 유연하고 신속하게 적응하면서 효율적으로 시스템을 개발할 수 있는 방법론<br/><br/>\
# 4대 가치 (개변동고)<br/>\
<img src = "./img/Agile_1.png" style = "max-width:100%; hegiht:auto;">\
',

// xp
'# 정의 : 유연하고 신속한 개발 방법론 <br/>\
- 의사소통과 TDD를 기반으로 짧은 개발 주기를 통해 소프트웨어를 생산하는 Agile 개발 프로세스의 대표적 개발 방법론 <br/><br/>\
# 핵심 가치 (용단커피존) <br/>\
- 용기 : 요구사항 능동대처 <br/>\
- 단순성 : 부가 기능 배제 <br/>\
- 의사소통 : 이해관계자 <br/>\
- 피드백 : 빠른 피드백, 일처리 <br/>\
- 존중 : 상호간 존중 <br/><br/>\
# 단계 (유릴사스)<br/>\
<img src = "./img/XP.png" style = "max-width:100%; hegiht:auto;"><br/>\
- User story : 요구사항 수집 <br/>\
- Release Planning : 전체 배포 계획 <br/>\
- Spike : 핵심 기능 프로토타입 <br/>\
- Acceptance Test : 고객 진척 확인 <br/>\
- Small Release : 짧은 사이클, 빠른 피드백 \
',

// Scrum
'# 정의 : 짧은 시간 관리 중심 <br/>\
- 매일 정해진 시간, 정해진 장소에서 짧은 시간 개발하는 팀을 위한 프로젝트 관리 중심의 Agile 방법론 <br/><br/>\
# 구성 <br/>\
- 기간 : 스프린트 <br/>\
- 미팅 : 일일스크럼, 스프린트 계획, 스프린트 리뷰 <br/>\
- 산출물 : 제품 백로그, 스프린트 백로그, 소멸차트 <br/><br/>\
# 프로세스 <br/>\
<img src = "./img/Scrum.png" style = "max-width:100%; height:auto;"><br/>\
- 요구정의 : 린스타트업, 디자인 싱킹 <br/>\
- 프로젝트 준비 : 제품 백로그 <br/>\
- 스프린트 수행 : 스프린트 계획 회의, 일일 스크럼, 스프린트, 스프린트 종료 데모, 스프린트 회고 <br/>\
- 프로젝트 종료 : 프로젝트 교훈 미팅 <br/>\
<img src = "./img/ScrumMeeting.png" style = "max-width:100%; height:auto;"><br/>\
',
  
// Product Backlog
'# 정의 : 소프트웨어 제품의 기능 목록 <br/>\
- 소프트웨어 제품의 모든 요구사항에 대한 우선 순위화된 목록으로서, 모든 변경 요구사항을 포함하는 개발해야 할 우선순위가 정의된 제품의 기능 목록 <br/><br/>\
# Keyword : 우선순위화, 요구사항, 기능목록, Sprint Backlog <br/><br/>\
# 특징 <br/>\
- 초기 제품의 요구사항 기능 목록 <br/>\
- 스프린트 백로그에 개발할 분량 할당 <br/><br/>\
* 116회 응용 1교시 9번\
',

// Burn down Chart
'# 정의 : Scrum의 Sprint 일정관리 도구 <br/>\
- Agile 프로젝트기반 조직에서 점수(Story Point)를 산정하여 Sprint 계획대비 현재 진행을 파악할 수 있는 차트 <br/><br/>\
# 구성요소 <br/>\
<img src = "./img/BurnDownChart.png" style = "max-width:100%; height:auto;"><br/>\
- x축 : 시간, 스프린트 반복 주기 <br/>\
- y축 : 완료된 작업의 추정 일수 (Story Point) <br/>\
- 계획 그래프 <br/>\
- 실제 그래프 <br/><br/>\
* 119회 관리 2교시 5번\
',

// SafeScrum
'# 정의 : IEC 61508 + scrum <br/>\
- SW 안전성 표준 IEC 61508과 Scrum 방법론을 접목한 Safety Critical SW Agile 개발 방법론 <br/><br/>\
# 구성요소 <br/>\
- SRC, 개발 Scrum, RAM 검증 \
',

// 회고
'# 정의 : 정기 개선 활동 <br/>\
- Retrospective <br/>\
- 프로젝트의 비효율적인 프로세스나 커뮤니케이션을 주기적으로 개선하기 위해 스프린트 종료 시점이나 월 1~2회 정기적 수행하는 활동 <br/><br/>\
# 구성 <br/>\
- 1~3 시간 <br/>\
- 팀원전체 & 제품책임자 <br/>\
- 오픈된 장소 <br/>\
- 스프린트 백로그/요약자료 <br/>\
- 회고항목 (만족/개선/반성) <br/><br/>\
# 절차 <br/>\
- 사전 준비 : 작어규칙 공유 <br/>\
- 자료 수집 : 브레인스토밍 <br/>\
- 실행항목 선정 : 점투표 <br/>\
- 실행목표 수립 : 구체적, 측정가능, 달성가능, 적절 <br/>\
- 회고종료 \
',

// CI
'# 정의 : 지속적 QC 적용 <br/>\
- Continuous Integration <br/>\
- 지속적으로 Quality Control을 적용하는 프로세스 실행 Practice <br/><br/>\
# 특징 <br/>\
- 초기 발견<br/>\
- 짧은 사이클 <br/>\
- 빈번한 적용,빌드,자동화 <br/><br/>\
# 기술요소 (버C빌P자)<br/>\
- 버전관리 저장소 : CVS, Subversion, GIT <br/>\
- CI 시스템 : Hudson, Jenkins <br/>\
- 빌드스크립트 : 스크립트, 배치파일 <br/>\
- PM Tool : 이메일, UC <br/>\
- 자동화 테스트 : SmartQube \
',

// CD(Continous Delivery)
'# 정의 : 진화된 CI <br/>\
- CI 보다 진보된 상태, 단위 시험 자동화 뿐만 아니라, 특정 환경하에서의 인수시험을 일부 자동화 \
',

// CD(Continous Deployment)
'# 정의 : 모든 인수 시험 자동화 <br/>\
- CD(Continous Delivery)에서 진보된 상태, 모든 인수시험이 자동화가 되는 수준 \
',

// 제품백로그
'# 정의 : SRS + WBS <br/>\
- 제품 개발에 필요한 모든 업무를 우선순위화한 목록 (요구사항정의서 + 작업분류체계 혼합 형태 )<br/><br/>\
# 특징 <br/>\
- 요구기능 중심 기술 <br/>\
- 세부 작업 미포함 ( 스프린트 계획에서 도출 -> 변경 용이성 도출 목적) <br/><br/>\
# 작성 지침 <br/>\
- 스토리간 상호 독립적 <br/>\
- 변경 가능 <br/>\
- 사용자와 고객에 가치 부여 <br/>\
- 추정가능 <br/>\
- 크기 적절(1~2주) <br/>\
- 테스트 가능 수준 <br/><br/>\
# 작성 예시 (인터넷 서점 시스템 개발) <br/>\
* 사례 1 <br/>\
- 업무구분 : 인터넷 서점 V1.0 <br/>\
- 상위기능(에픽) : 사용자 로그인 <br/>\
- 스토리 : 사용자는 회원 ID와 빔리번호를 입력하여 로그인 할 수 있다 <br/>\
- 스토리 점수 : 1 <br/>\
- 완료조건 : 회원 ID와 비밀번호가 불일치 할 때는 메시지를 표시하여 다시 입력하게 한다 <br/><br/>\
* 사례 2 <br/>\
- 업무구분 : 비기능 <br/>\
- 상위기능(에픽)/스토리 : 시스템은 정기 점검을 제외한 24일 365일 가동해야 한다 \
',

// 사용자스토리
'# 정의 : 기능 요구사항 기술할 때 사용하는 방식 <br/>\
- User Story <br/>\
- 제품 백로그에서 기능 요구사항을 기술할 때 사용하는 방식으로 고객과 사용자에게 가치를 줄 수 있는 기능을 서술한 소프트웨어 기능 혹은 사용자의 요구사항 <br/><br/>\
# 특징 <br/>\
- 일반적으로 한 두문장으로 짧게 표현 <br/>\
- 스토리 카드 간략히 적어, 의사소통 <br/>\
- 고객 직접 작성 원칙 <br/><br/>\
# 구성요소 <br/>\
- 카드 : 포스트잇 등, 스토리추정/계획 활용 <br/>\
- 대화 : 고개과 대화, 스토리 내용 구체화 <br/>\
- 확인 : 완료조건, 스토리 완료 확인 <br/><br/>\
# 작성원칙 <br/>\
- 독립성 : 스토리간의 의존성 배제 <br/>\
- 간결성 : 간결 작성, 세부 내용은 고객과 대화를 토애 구현여부 협상 <br/>\
- 추정성 : 개발자들은 각 스토리의 크기 혹은 소요시간 추정 가능해야 함 <br/>\
- 소단위 : 한 두명의 개발자가 0.5일 이내 구현, 테스트 가능한 크기 적당 <br/>\
- 검증성 : 모든 사용자 스토리는 테스트 가능하도록 작성되어야 함 <br/><br/>\
# 작성 예시 <br/>\
- 교육생은 수강신청을 위해 신청, 취소, 리스트보기를 할 수 있다 \
',

// 기술 스토리 
'# 정의 : 기술적, 관리적 업무 서술 <br/>\
- Techincal Story <br/>\
- 사용자 스토리를 지원하는 기술적, 관리적 업무를 서술할 때 사용하는 제품 백로그 항목중 하나 <br/><br/>\
# 특징 <br/>\
- 형식 없음 <br/>\
- 고객 이해할 수 있는 수준으로 작성 <br/>\
- 개발팀 중심 도출 (사용자 스토리는 고객과 책임자 중심 도출) <br/>\
- 비용 추정 기준 <br/><br/>\
# 포함활동 <br/>\
- 요구분석과 아키텍처, 도구 셋업등 기술적인 활동 <br/>\
- 비기능 요구사항과 인프라 시스템 개선 활동 <br/>\
- 코드리뷰, 리팩토링, 인스팩션 등 품질 개선활동 <br/>\
- 버그수정, 모듈 안정화\
',

// [Agile 방법론]- 스토리 포인트 
'# 정의 : 상대적 단위 / 작업 규모 표현 <br/>\
- 사용자 스토리나 기능 또는 어떤 작업의 규모를 표현하기 위해 사용되는 상대적인 단위 -> 사용자 스토리별 우선순위와 개발시간 산정기준 <br/><br/>\
# 특징 : 시간단위와는 대비되는 개념, 요구사항을 완성하기 위해 사용되는 기간과 달리 요구사항의 복잡도 혹은 크기를 상대적인 측정 단위로 사용 <br/><br/>\
# 추정기법 : 유사추정, 전문가추정, 플래닝포커, 삼각측량 <br/><br/>\
# 요구사항 우선순위 선정기법 <br/>\
- MosCow 방법 : 4가지 기준 분류-필수(must have) <br/>\
- 종료(Should have) <br/>\
- 선택(Could have) <br/>\
- 보류(Won\'t have this item) <br/>\
- 가치점수 : 요구기능간 상대적 가치 평가 활용, 가치점수와 스토리 점수 함께 고려 <br/><br/>\
<img src = "./img/StoryPoint_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/StoryPoint_2.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 스토리 점수 기준 작성 필요 : 최소 점수 산정후 비율적 적용 <br/>\
* 조직, 기업마다 상이 <br/>\
* 운영업무 고려 필요 \
',

// Pair Programming 
'# 정의 : 두사람이 한 컴퓨터 사용 <br/>\
- 두 사람이 한 컴퓨터를 사용해서 Pair work 로 프로그래밍을 하는 것으로 Extream Programming(XP)에서 표방하는 프로그래밍 방법 중 한 가지 <br/><br/>\
# 구성 <br/>\
- Driver : Coder <br/>\
- Partner : Supporter \
',

// Lean 방법론
'# 정의 : 낭비 줄이는 개발 방법론 / 빠른 프로토타입 제작 / 신속한 고객 피드백 / CI / 신속 회피 <br/>\
- 빠른 프로토타입 제작과, 신속한 고객 피드백 및 CI를 통해 시장에 대한 잘못된 가정을 신속히 검증 및 회피하여 낭비를 줄이는 개발방법론 <br/><br/>\
# 암기 <br/>\
- 낭비(8) : 운과대재과결움기 <br/>\
- 원칙(7) : 낭배늦팀빠통전 <br/>\
- 낭가 피반동집 대마의 자동 리건 당대지 인개리테 측계<br/><br/>\
# 낭비 : 운반, 과잉생산, 대기, 재고, 과잉처리, 결합, 움직임, 기술<br/><br/>\
# 원칙 <br/>\
- 낭비의 재고 : 낭비 찾기, 가치 흐름도<br/>\
- 배움 증폭 : 피드백, 반보그 동기화, 집합기반 개발<br/>\
- 늦은 결정 : 대안적 사고, 마지막 순간, 의사결정<br/>\
- 팀에 권한 위임 : 자기결정권, 동기부여, 리더십, 전문지식<br/>\
- 빠른 납품 : 당김 시스템, 대기 행렬이론, 지연비용<br/>\
- 통합성 구축 : 인식 통합성, 개념 통합성, 리펙토링 테스트<br/>\
- 전체를 볼것 : 측정, 계약<br/><br/>\
* 22가지 도구\
',

// Lean UX
'# 정의 : 핵심가치, 핵심지표 조정 과정 <br/>\
- 핵심가치를 만들고 그에 기반한 가설, 검증을 빠르게 진행한 뒤 핵심지표를 보며 계속 조정해가는 과정 <br/><br/>\
# 원칙 <br/>\
- 디자인 사고, 애자일 개발, 린 스타트업 <br/><br/>\
# 적용 프로세스 <br/>\
- Proto-Personas : 팀원들, 가정에 의해 페르소나 만듦 <br/>\
- 디자인 협업 : 디자인 사고 적용 <br/>\
- MVP : 최소기능 사용 <br/>\
- 가설검증 <br/>\
- Feed Back <br/><br/>\
# 도구 : Google Docs, Jira, GitHub \
',

// Kanban 방법론
'# 정의 : JIT 지원 방법론 / 애자일 프로세스 전반 <br/>\
- 애자일 프로세스 전반에 걸친 JIT(Just in Time Development)를 지원하는 방법론 <br/><br/>\
# 암기 <br/>\
- 규칙(3) : 워W플 <br/><br/>\
# 규칙(3) <br/>\
- 워크플로 가시화 : 일을 잘게 분할->backlog <br/>\
- WP 제한 : 동시진행 가능 항목제한 <br/>\
- 플로우의 측정 및 최적화 : 완료 평균시간, Cycle Time <br/><br/>\
* 매우 적은 규칙을 갖고 있는 방법이기에 다른 방법론 특히 스크럼과 함께사용 : TDD, CI도 함께 사용\
',

// 방법론 테일러링
'# 정의 : 기 개발 산출물 최적화 활동 <br/>\
- 프로젝트의 특성에 따라 각 산출물의 적용여부 및 변경여부를 체크하고 변경시에는 사유와 변경 문서명을 기재하는 작업 <br/><br/>\
# 필요성 <br/>\
- 방대한 표준방법론 <br/>\
- 프로젝트 다양성 <br/>\
- 선리스크 제거 <br/>\
- 최적 기술 도입 <br/><br/>\
# 테일러링 기준 <br/>\
- 사업적 특성 : 업무, 재무적 특성 <br/>\
- 프로젝트 특성 : 일정 <br/>\
- 기술적 특성 : 개발언어, 플랫폼, 기술 <br/><br/>\
# 고려사항 <br/>\
1. 환경<br/>\
- 외부 환경 : 법,제도 <br/>\
- 프로젝트 규모/복잡도 <br/>\
- 기존 시스템 이해 <br/><br/>\
2. 수행 <br/>\
- 참여인력, 기술, 개발환경, 방법론 교육 \
',

// MOM, MOA
'# 정의 : Message Queing 기술 이용 비동기 통신 지원 아키텍처 <br/>\
- Message Oriented Middleware(Architecture) <br/>\
- Message Queuing 기술을 이용하여 상이한 어플리케이션간 통신을 비동기식으로 지원하는 메시지 기반 미들웨어 (아키텍처) <br/><br/>\
# 특징 <br/>\
- 비동기식/ 비연결형 메시징 지원 <br/>\
- 큐잉 기술 기반 통신<br/>\
- 느슨한 커플링에 따라 C/S와 객체지향 컴퓨팅 확장 \
',

// EIP
'# 정의 : 메시지 기반 아키텍처 방법론 / 기업 애플리케이션 통합 / Loosely Coupled <br/>\
- Loosely coupled 방식으로 메시지 기반(MOA : Message Oriented Architecture)의 기업 애플리케이션 통합을 정의하는 아키텍처 방법론 <br/>\
- 기업의 분산 컴퓨팅 환경에서 시스템 간 통신, 애플리케이션 통합을 위한 새로운 아키텍처 방법론<br/><br/>\
<img src = "./img/EIP.png" style = "max-width:100%; height:auto;">\
',

// TDD
'# 정의 : Simple Code 추구 목적 Agile 개발 방법론 <br/>\
- Simple code의 추구를 목적으로 Testcase를 먼저 개발하고 Testcase를 통과하는 실제코드를 나중에 개발하는 Agile 개발 방법<br/><br/>\
# 절차 <br/>\
<img src = "./img/TDD.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
# 패턴 <br/>\
- 빨간 막대 패턴 : 실패하는 작은 테스트 작성 <br/>\
- 초록 막대 패턴 : 테스트에 통과할 만한 작은 코드 작성 <br/>\
- 테스팅 패턴 : 테스트-모듈간 적합성 <br/>\
- xUnit 패턴 : xUnit계열 테스트 프레임워크 <br/>\
- 디자인 패턴 : 유사 도메인에서 발생하는 문제 해결 위한 Best Practice 모음 \
',

// ATDD
'# 정의 : TDD테스트 확장 개발 방법론 <br/>\
- Acceptance Test Driven Development <br/>\
- 소스 품질을 점검하는 TDD에서의 테스트를 더 확장하여 전체 시스템 관점에서의 품질을 검증하는 애자일 개발 방법론 <br/><br/>\
# 프로세스 <br/>\
- 사용자 스토리 작성 <br/>\
- 인수(시스템) Testcase <br/>\
- 시스템 구현 <br/>\
- 테스트 수행 \
',

// BDD
'# 정의 : TDD + DDD / SW 개발 방법 <br/>\
- TDD에 DDD(Domain Driven Design)의 스타일(유비쿼터스 언어, 임베디드 도메인 전용 언어 등)을 적용하여 탄생한 SW개발 방법 <br/>\
- 사용자의 스토리로부터 요구사항을 식별, 충족시키는 Outside-in TDD라고도 함 <br/><br/>\
# Keyword : Outside-in, DDD, 유비쿼터스 언어, User Story, 시나리오 <br/><br/>\
# 프로세스 <br/>\
1. 행위 표현 스토리 작성 <br/>\
2. 실패하는 스토리 실행 <br/>\
3. 첫번째 단계 정의 <br/>\
4. 테스트 성공하도록 어플리케이션 코드 작성 <br/>\
5. 시나리오 통과할 때까지 4,5 과정 반복하여 리팩토링 <br/>\
6. 시나리오 통과 <br/>\
7. Application 리펙토링 <br/><br/>\
# BDD 테스트 행위 명세법 <br/>\
<img src = "./img/BDD_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/BDD_2.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 유비쿼터스랭귀지와 MDD가 DDD 구현위한 핵심 기술임 <br/><br/>\
<img src = "./img/BDD_3.png" style = "max-width:100%; height:auto;">\
',

// DDD
'# 정의 : 설계(개발) 방법론 / 도메인 초점 / 도메인 표현 모델 <br/>\
- 도메인에 초점을 맞추어 도메인을 잘 표현한 모델을 만들고 모델이 최종 SW 개발에 까지 기여하도록 하는 설계(개발) 방법론 <br/><br/>\
# 암기 <br/>\
- 구성 : 메서공유씨 <br/><br/>\
# 주요구성 <br/>\
- Main Model : 구축하고자 하는 도메인의 요구사항을 유비쿼터스 언어를 통해 일관성있게 표현 <br/>\
- Sub Model : 독립적인 업무단위, 프로젝트 팀 단위 로 메인 모델을 구체화하기 위해 분할 <br/>\
- 공유커널 : 도메인 중심의 공유 업무, 횡단 관심사의 공통로직 등을 별도의 공유 커널로 분리 <br/>\
- 유비쿼터스 언어 : Usecase, BPM등의 도메인에 대해 통일된 언어로 의사소통할 수 있는 언어 체계 <br/>\
- CI : 지속적 통합, 공유커널의 변경시 발생할 수 있는 의존성 문제를 파악 및 대응하기 위한 지속적 통합 <br/><br/>\
# 기본 구성요소 <br/>\
- Entity : 고유 식별값 / Employee <br/>\
- Value Object : 데이터 표현(고유x) / Address<br/>\
- Aggregate : 관련 객체 묶음 / 주문-고객-상품<br/>\
- Repositiory : Entity 보관 장소 / 리포트 집계<br/>\
- Service : 별도 분리 / 계좌이체\
',

// AOSE
'# 정의 : 캡슐화된 모델링/개발 방법론 <br/>\
- Agent-Oriented Software Engineering <br/>\
- 특정환경 상황에서 유연하고, 자율적인 조치를 취할 수 있는 설계를 목표로 캡슐화된 컴퓨터 시스템 개발 위한 모델링/개발 방법론 <br/><br/>\
# 특징 <br/>\
- 캡슐화, 목적적응, 반응, 자체판단, 선행성, 상호작용, 영속성 <br/><br/>\
# 방법론 유형 <br/>\
- Gaia : Agent 조직 역할, 상호작용 <br/>\
- Prometheus : 단일 Agent 상세한 정의 <br/>\
- Tropos : 조기 요구분석 중심 \
',

// 68
'# 정의 : 프로그래밍 기법 / 객체지향 보완 / 공통관심사 횡단 관심 분리 / 코드 삽입 <br/>\
- 객체지향기법을 보완하여 공통관심사를 횡단관심으로 분리하여 코드에 삽입하는 프로그래밍 기법<br/><br/>\
# 암기 <br/>\
- 구성(5) : JPAAW <br/><br/>\
# 구성요소 <br/>\
- Join Point : 횡단관심이 삽입될 위치 <br/>\
- Point Cut : 클래스의 어느 Joint Point를 사용할 것인지 선택기능 <br/>\
- Weaving : Join Point에 해당하는 Advice를 삽입하는 과정 <br/>\
- Advice : Joint Point에 삽입되어 동작하는 모듈(Before, After Returning, After Throwing, Around Advise) <br/>\
- Aspect : Product과 Advice를 합쳐놓은 코드 <br/><br/>\
# 프로그램 : Code + Aspect (PointCut + Advise) <br/><br/>\
# 절차 <br/>\
- Primary Concern 코드 작성 <br/>\
- Cross Cutting 코드 작성 <br/>\
- Point Cut 정보이용 Weaving <br/>\
- Point Cut<br/><br/>\
<img src = "./img/AOP.png" style = "max-width:100%; height:auto;">\
',

// SSPL
'# 정의 : 가변 요소 집중 개발 SW 공학 방법론 <br/>\
- System & Software Product Line <br/>\
- SW와 HW 생산성 제고를 위해 단일 제품군 내에서 아키텍처나 컴포넌트, 문서 등 핵심 자산은 재사용하고, 가변요소만 선택적으로 집중 개발해 이를 조립하는 SW공학 방법론 <br/><br/>\
# 특징 <br/>\
- 재사용성 <br/>\
- 아키텍처 기반 <br/>\
- 리엔지니어링 <br/>\
- 포괄적 개발방법론 : 플랫폼 + 프로세스 + SW + 시스템 <br/>\
- 대량고객 맞춤화 <br/>\
- 요구사항 공통성 <br/>\
- 요구사항 가변성 <br/><br/>\
# 구성요소 <br/>\
- 도메인 공학 : 아키텍처 설계, 컴포넌트 생성 <br/>\
- 애플리케이션 공학 <br/>\
- 관리활동 : Core Asset 개발과 Product 개발의 연동/조율 <br/>\
- 기술관리 : 형상,프로세스 <br/>\
- 조직관리 : 구성, 자원 할당 <br/><br/>\
# 4대 핵심요소 : 대량고객맞춤화, 역량 플랫폼, 프로세스, SW와 시스템 통합 <br/><br/>\
# 제품 개량 활동(5개영역) <br/>\
- 제품군 정의 <br/>\
- 제품군 플랫폼 개발 : 도메인 아키스타일, 가변성 모델링, 도메인 V&V, 도메인아키 trade-off평가) <br/>\
- 제품군 멤버 제품 개발 <br/>\
- 재사용 자산 베이스 구축품 개량 <br/><br/>\
# SSPL 방법론 <br/>\
1. Proactive <br/>\
- FORM : SW제품라인 위한 초기 마케팅 및 제품 계획 단계부터 정해진 의사결정을 바탕으로 Feature 모델 구성, 선행적 방식 개발 적합 기법 <br/>\
2. Reactive <br/>\
AHEAD(Algebraic Hierarchical Equation for Application Design) : 반복적 Feature 정렬(Refinement)통해 SW제품라인 점차 확대반응식 (Reactive) 방식 <br/>\
GP(Generative Programming) : 상세한 Feature 모델 바탕으로 프로그램 코드 생성시키는 방식 <br/>\
3. Extractive <br/>\
- PulSE(Productline Software Engineering) : 재공학 통해 기존 제품들로 부터 SW 제품라인 구성하는 추출 방식 적용 용이 <br/><br/>\
# SSPL Framework <br/>\
<img src = "./img/SSPL_Framework.png" style = "max-width: 100%; height: auto;"><br/><br/>\
',

// Feature
'# 정의 : 시스템 행위 논리적 단위 <br/>\
- 제품군 혹은 제품에 대한 일련의 기능 및 품질 요구사항에 근거하여 명문화 된 시스템 행위의 논리적 단위 \
',

// MDA
'# 정의 : 모델기반의 SW 개발 아키텍처 <br/>\
- Model Driven Architecture <br/>\
- 모든 컴포넌트 기술 요소의 표준 메타모델을 정의하고 이를 기반으로 각 구성요소를 정의함으로써 호환성 및 시스템간 자동성을 보장하고자 하는 소프트웨어 개발 아키텍처 <br/><br/>\
# 등장배경 <br/>\
- 다양한 미들웨어 플랫폼 <br/>\
- 다양한 컴포넌트 아키텍처의 등장 <br/>\
- 개발 패러다임의 변화 <br/>\
- CORBRA의 복잡성 : 개방형 객체표준, 무겁고 복잡한 표준규격, 외면 <br/><br/>\
# 개념도 <br/>\
<img src = "./img/MDA_Overview.png" style = "max-width: 100%; height: auto;">\
',

// MDD
'# 정의 : 소스코드 자동생성 개발 방식  <br/>\
- 프로그래밍 언어로 직접코딩하는 방식이 아닌 SW 설계모델을 통해 소스코드를 자동생성하는 개발방식<br/><br/>\
# Keyword : 메타모델, CIM, PIM, PSM, 도메인 전문가, MDD 도구 개발자, 프레임워크 담당자 <br/>\
* PIM : Platform Independent Model <br/>\
* PSM : Platform Specefic Model <br/><br/>\
# 개념도 <br/>\
<img src = "./img/MDD_Concept.png" style = "max-width: 100%; height: auto;"><br/><br/>\
# 개발 참여자 <br/>\
1. 일반 프로젝트 <br/>\
- 도메인 전문가 : DLS 정의, 기본설계 수행 <br/>\
- MDD 도구 개발자 : 모델, 소스코드 변환 <br/>\
- 프레임워크 담당자 : 하위 시스템 호환 위한 MDD 도구 수정 및 교육 <br/><br/>\
2. 대형 프로젝트 <br/>\
- Modeler : SI 프로젝트 수행에 필요한 모델 생성 <br/><br/>\
* 119회 응용 3교시 6번\
',

// ASD
'# 정의 : 코드자동생성 + 유연성, 호환성 중심 방법론 <br/>\
- Automated Software Development <br/>\
- MDD의 비즈니스 기반의 코드자동생성의 장점과 모델의 유연성 및 호환성을 중심으로 한 SW 개발 방법론 \
',

// EDA
'# 정의 : 외부 감지 대응 가능한 IT 구조 / 비즈니스<br/>\
- Application을 통해 이벤트 발생, 응답하는 형태의 이벤트 처리 능력과 프로세스 이벤트를 가진 아키텍처<br/>\
- 비즈니스 상에서 발생하는 이벤트와 비즈니스에 영향을 줄 수 있는 외부 이벤트의 감지와 대응이 가능한 IT구조 (시스템 아키텍처) <br/><br/>\
# 암기 <br/>\
- 특징 : 디N트비 <br/>\
- 구성요소(3) : 메프 구관 통외 <br/>\
- 절차(5) : 이수엔의R <br/><br/>\
# 특징 <br/>\
- Decouple 인터렉션 <br/>\
- N:N 통신 <br/>\
- 이벤트기반 트리거 <br/>\
- 비동기식 <br/>\
[참고] SOA는 roosely coupled, 1:1연결, 순차적프로세스 , 동기식 <br/><br/>\
# 구성 <br/>\
- 이벤트 메타데이터 : 규격, Rule, 이벤트소스, 수신자, 처리자 <br/>\
- 이벤트 프로세싱 : SEP, ESP, CEP <br/>\
- 이벤트 도구 <br/>\
- 이벤트 관리 도구 : 모니터링, 디시보드 <br/>\
- 엔터프라이즈 통합 : by Enterprise Integration Backbone <br/>\
- 통합할 외부 자원 : 외부서비스 <br/><br/>\
# 절차 : 이벤트 -> 이벤트 수집 -> EDA 엔진 복합이벤트 -> 의사결청체계 -> RTE <br/><br/>\
# 처리기법 <br/>\
- SEP(Simple Event Processing) : 실시간 작업 흐름 / BRE, Alert <br/>\
- ESP(Event Stream Processing) : 실시간 정보 흐름 / BAM <br/>\
- CEP(Complex Event Processing) : 이벤트 통한 추론 / 주식 등락 통해 투자 시기 추론 = ESP(Event Stream Processing) + 패턴 감지 기능\
',

// DevOps
'# 정의 : 개발 + 운영 문화, 방법론 <br/>\
- 개발과 운영이 분리되면서 오는 문제점(사후관리, 서비스등)을 해결하기 위해서, 개발과 운영을 하나의 조직으로 합쳐서 팀을 운영하는 문화이자 방법론 <br/><br/>\
# 암기 <br/>\
- 발전단계 : 3 3-9-8 <br/>\
- 구성요소(3) : 품프도<br/>\
1) 품질 : 기통테 <br/>\
2) 프로세스 : CC완릴 <br/>\
3) 도구 : C어프 <br/>\
- 개발 사이클(12) : 요스범이 의솔개테 릴법운서 <br/><br/>\
# 발전 단계 : 초기단계(3) > 성숙조직(9) > DevOps 단계(8) <br/><br/>\
# 핵심요소 CAMS<br/>\
- Culture : 개발, 운영, 책임 공유 <br/>\
- Automation : 개발 ~ 배포 <br/>\
- Measure : 제품 생성 로그, 정보, 지표등 운영이 개발에 피드백 <br/>\
- Share : 개발지식을 운영과정 적용 <br/><br/>\
# 구성요소 <br/>\
- 품질(3) : 품질기준, 통합적 품질보증, 테스트 자동화<br/>\
- 프로세스(4) : Cycle Time 축소, 완료시점 범위 확장-운영동작까지, CD, Release-배포 분리<br/>\
- 도구(3) : CI(Git, 젠킨스), 자동 어플리케이션 릴리즈, 프로비저닝 <br/><br/>\
# 데브옵스 기반 개발 싸이클 <br/>\
- User 요구사항 <br/>\
- User Story <br/>\
- 범위, 우선순위 결정 <br/>\
- 이해관계자 관리 <br/>\
- Dependency 관리 <br/>\
- 솔루션 도입 및 평가방안 <br/>\
- 개발<br/>\
- Testing <br/>\
- Release <br/>\
- 법적관리 <br/>\
- 운영<br/>\
- 서비스(Customer Support)<br/><br/>\
# 도구 <br/>\
- Chef : automation tool, jenkins의 build후 처리와 비슷하지만 훨씬 많은 templet 제공, build 후 취할 활동 미리 정의 후 자동 실행 테스트 수행 <br/>\
- Puppet : Delivery & Deploy tool, WAS 환경의 java deploy 제어/관리, 각 서비스 deploy 수행 결과 수집 및 통계처리 지원<br/><br/>\
# 적용시 고려사항 : 적용조건, 적용가능 분야, 적용시 피해야할 분야(치명적으로 중요성 높은 프로그램, 높은 완결성 요구 프로그램), 툴도입 넘어 조직 문화 변화 병행 필요 <br/><br/>\
* CD : Continuous Delivery : 단위 시험 자동화뿐 아니라 특정환경에서의 인수 시험 자동화 <br/><br/>\
* CI : Continuous Integration : 지속적 품질통제 적용 프로세스 수행 Agile 비교, MSA 활용 <br/><br/>\
<img src = "./img/DevOps_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/DevOps_2.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/DevOps_3.png" style = "max-width:100%; height:auto;">\
',
 
// DataOps
'# 정의 : 데이터 생성자와 데이터 소비자를 연결하는 능력 <br/>\
- 기업내 논의를 통해 데이터 유형을 분류하고 다양한 데이터 세트에 목적을 달성하는 과정 <br/><br/>\
# 5가지 과제 <br/>\
- 가용 : 수집된 데이터 사용 가능하게 만들기 <br/>\
- 관리 : 데이터 스토리지 관리 <br/>\
- 검토 : 필요한 데이터 수집됐는지 확인 <br/>\
- 보안 : 데이터 보안 보장 <br/>\
- 극복 : 사용가능한 데이터 사일로 만들기 <br/><br/>\
* Silo : 각부서, 사업단위나 브랜치별로 데이터가 ㅇ리치하지 않는 증상 \
',
 
// GitOps
'# 정의 : Weaveworks라는 회사에서 처음 쓰기 시작한, CI/CD 파이프라인 중 특별히 Delivery에 초점을 가지고 탄생한 개념 <br/>\
- 쿠버네티스 클러스터 관리, 어플리케이션 배포하는 방법론 중 하나 <br/>\
- 어플리케이션 소스 뿐만 아니라 배포 설정까지 깃 저장소를 통해 관리 <br/><br/>\
# 특징 <br/>\
- 단일 배포 : 체계적 관리, 자동화 <br/>\
- 완벽 배포 : 원천 상태 반영 <br/>\
- 신속 배포 : 배포, 피드백, 롤포워드, 롤백 <br/>\
- 쉬운 복구 : 트랜잭션 로그 스냅샷 <br/><br/>\
# 구현 방법 <br/>\
- Push : 코드 업데이트 트리거 / 모니터링 필요 <br/>\
- Pull : 지속적 비교(Operator : flux, argocd) <br/><br/>\
# IaC(Infra as Code)와 비교 <br/>\
<img src = "./img/IaCGitOPS.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 87회 라이지움 관리 1교시 2번\
',

// 시각적 분석
'# 정의 : 데이터 패턴, 관계 표현 과정 <br/>\
- 데이터의 유의미한 패턴 혹은 데이터간의 관계를 파악하는 것 뿐 아니라 이러한 결과를 사용자가 이해하기 쉽게 화면에 표현하는 것까지의 과정<br/><br/>\
# 암기 <br/>\
- 개발방법론 : UCD <br/>\
- 평가 : 사탐평 <br/><br/>\
# 사용자중심 시각적 분석 연구개발 해외 동향 : HCI에 입각한 사용자 경험적 접근<br/><br/>\
# 사용자중심디자인 원칙에 따른 시각화 툴 개발 방법론 : 사용자중심디자인(UCD)<br/><br/>\
# 사용자 니즈파악 및 시스템 개선을 위한 평가 방법론 : 사용자 경험 연구(UX Research), 탐색적 연구(Exploratory Research), 평가적 연구 (Evaluative Research)\
',

// 시각화 분석
'# 정의 : 분석 및 결과 도출 / 상호작용 가능한 인터페이스 기반 <br/>\
- 상호작용이 가능한 인터페이스를 토대로 이루어지는 분석 및 결과의 도출<br/>\
-  대규모의 복잡한 데이터셋에 대한 이해, 추론 및 의사결정을 돕기 위한 분석 기법 및 상호작용적 시각화 기법<br/><br/>\
# 사용자 상호작용 측면 : 차원축소, 거리함수, 토픽모델링<br/><br/>\
# 결과 해석 측면 : LIME(Local Interpretable Model-agnostic Explanations), 나이브 베이즈 분류기(Naïve Bayes classifier), 의사결정트리(decision tree), CNN Filter Layer, 어텐션 모델(attention model)<br/><br/>\
# 실시간 측면 : BlickDB, imMens, 불필요한 연산 최소화, TopicLens, PIVE',

// 데이터 시각화
'# 정의 : 시각적 표현 / 데이터 분석 결과  <br/>\
- 데이터 분석 결과를 쉽게 이해할 수 있도록 시각적으로 표현하고 전달하는 과정(TTA)<br/><br/>\
# 암기 <br/>\
- DIKW 피라미드 : Data, info, Knowledge, Wisdom <br/>\
- Wisdom 단계로 갈수록 조직성과 이해성이 증가하는 특성 <br/><br/>\
# 절차  <br/>\
- 정보 구조화(데이터수집) : 탐색 -> 분류 -> 배열 -> 재배열 <br/>\
- 정보 시각화 : 시간,분포,관계,비교,여러변수 비교, 공간 시각화 <br/>\
- 정보 시각표현(그래픽 7요소) : 그래픽 디자인 기본원리 - 인터랙션 <br/><br/>\
# 유형 <br/>\
- 시간 : 막대, 점그래프 <br/>\
- 분포 : 파이차트, 트리맵 <br/>\
- 관계 : 히스토그램, 스캐터 플롯 <br/>\
- 비교 : 히트앱, 스타차트 <br/>\
- 공간시각화 : 지도매핑\
',

// 임베디드 SW
'# 정의 : 특정기능 수행 결합 시스템 <br/>\
- 컴퓨터 HW + SW 미리 정해진 특정기능 수행 결합 시스템 <br/><br/>\
# 특징 <br/>\
- HW 제약, 최적화, 실시간 처리지원, 안전성 \
',

// SW 진흥법 개정안 
'# 개념 :  SW 역량 강화 및 발전 기반 조성 법률 <br/>\
- 소프트웨어 진흥에 필요한 사항을 정하여 국가 전반의 소프트웨어 역량을 강화하고 소프트웨어산업 발전의 기반을 조성함으로써 국가경쟁력의 확보, 국민생활의 향상 및 국민경제의 건전하고 지속적인 발전에 이바지하기 위한 법률 <br/><br/>\
# 개정 방향(2020) <br/>\
- 과학/기술 : SW 기초 기술의 진흥, SW 융합 기반 기술의 진흥 <br/>\
- 산업/경제 : SW사업의 선진화, SW 산업의 경쟁력 강화, SW융합으로 전 산업 혁신 <br/>\
- 사회 : 전 국민 SW 기초소양 함양, SW 사회 조성, SW 안전 사회 실현 <br/><br/>\
# 주요개정 내용 (1345, 총산융교선)<br/>\
<img src = "./img/SW진흥법주요개정.png" style = "max-width:100%; height:auto;"><br/><br/>\
1. 1장 총칙 <br/>\
- 제2조 : 소프트웨어와 관련된 서비스 제공 산업 <br/><br/>\
2. 3장 소프트웨어 산업 기반 조성 (역창재인)<br/>\
- 제9조 : 지역별 소프트웨어 산업 진흥 <br/>\
- 제14조 : 창업 활성화 <br/>\
- 제17조 : 지식재산권 보호 <br/>\
- 제22조 : 인력 양성 <br/><br/>\
3. 4장 소프트웨어 융합 및 소프트웨어 교육 (융안진교)<br/>\
- 제28조 : 융합 촉진 <br/>\
- 제30조 : 안전 확보 <br/>\
- 제31조 : 산업 진흥등 <br/>\
- 제32조 : 교육 활성화 <br/><br/>\
4. 5장 소프트웨어 산업 선진화 (민범심비)<br/>\
- 제40조 : 민간투자형 소프트웨어 사업 <br/>\
- 제44조 : 사업의 과업범위 <br/>\
- 제50조 : 과업심의 위원회 <br/>\
- 제52조 : 상용소프트웨어 품질 성능의 비교평가 <br/><br/>\
* 실효성 확보 방안 <br/>\
- 모니터링 강화 : 이해관계자 간 공감대 형성, 제도 적용 모니터링, 후속 조치 <br/>\
- 커뮤니티 마련 : SW 관계자 참여할 수 있는 커뮤니티 생성, 토론의 장 마련 <br/><br/>\
* ITPE 1회 1교시 3번 \
',

// 하도급금지
'# 근거 : SW 산업 진흥법 제 20조의 3 <br/><br/>\
# 주요 내용 <br/>\
- 사업금액의 50% 초과 하여 하도급 금지 <br/>\
- 하도급 받은 SW 사업자의 재하도급 금지 <br/>\
- 사업비 일정비율 초과하는 경우 공동 수급체로 참여유도 \
',

// UX 모델링
'# 정의 : 사용자 경험 중심 모델 개발, 분석 과정 (니즈,태도,동기,행동)<br/>\
- 사용자가 제품, 서비스 혹은 시스템을 직/간접적으로 이용하면서 느끼는 총체적 경험을 상호 교감적인 모델로 개발하고 분석하는 과정 <br/><br/>\
# 암기 <br/>\
1. 유형 <br/>\
- Persona : 동일경험 가상인물 <br/>\
- Journey Map : 변화 시각화 <br/>\
- Affinity Diagram : 리서치 수합, 가치 찾기 <br/>\
- Elito Method : Needs 파악, 해결책 고민 <br/><br/>\
# 기법 유형 <br/>\
<img src = "./img/UX_Modeling.png" style = "max-width:100%; height:auto;"><br/>\
- Persona : 동일 경험 사용자 가상인물 정의 <br/>\
-> 경험, 행위변수 공유, 형태 파악 <br/><br/>\
- Journey Map : 개별 경험 변화 시각화 작업 <br/>\
-> 경험의 시간흐름, 전체흐름 파악 <br/><br/>\
- Affinity Diagram : 리서치 결과 Bottom Up, 가치 찾는 작업 <br/>\
-> 리서치결과 그룹핑 <br/><br/>\
- Elito Method : 사용자 Needs 파악, 해결책 고민 <br/>\
-> Key Findings <br/><br/>\
# 적용 방안 <br/>\
- 전환 : 사용자가 예상한 순서에 따라 기능의 순서가 배열 <br/>\
- 확장 : 현재에도 존재하긴 하지만 충족하지 못한 경우 <br/>\
- 감성적 충족 : 감성적 부족 개선 <br/>\
- 숨겨진 니즈 : 사용자도 모르는 니즈 발굴 <br/><br/>\
* ILIFO 24회 1교시 1번\
',

// Design Thinking
'# 정의 : 창의적 문제해결 UX 기법 <br/>\
- 현장과 지속적인 소통을 통해 수요를 파악하며 가능한 모든 대안을 상상, 발굴하고 이를 적용,개선하는 법을 반복함으로써 혁신적 결과를 도출하는 창의적 문제 해결기법 <br/><br/>\
# 프로세스 <br/>\
<img src = "./img/DesignThinking.png" style = "max-width:100%; height:auto;"><br/>\
',
 
// 페르소나(Persona) 
'# 정의 : 가상 인물 / 제품 서비스 사용 <br/>\
- 어떤 제품이나 서비스를 사용할만한 목표인구 집단에 있는 다양한 사용자 유형들을 대표하는 가상의 인물<br/><br/>\
# 특징 : 실무중심 방법론, 실제 데이터 기반, SW개발과 UX 분야 활용도 증가, 가상의 인물 묘사, 실제 사용자 특성, 현실적 인물 적용, 사용자 요구 확인 <br/>\
- 추상적 문제의 함정을 피하려다 구체적 문제의 항점에 빠질 수 있음 <br/><br/>\
# 절차 <br/>\
- 가상화 : 이름,나이,성별,문제점,목적,사진 <br/>\
- 리서치 <br/>\
- 실체화 <br/>\
- 다양한 요구사항 <br/>\
- 재구성 <br/><br/>\
# 타 사용자 요구사항 분석 방법 비교 <br/>\
1. User Survey <br/>\
- 장점 : 통계적 분석 가능, 대규모 분석 용이 <br/>\
- 단점 : Follow up 어려움, 깊이 있는 의견 받기 어려움 <br/><br/>\
2. Focus Group <br/>\
- 장점 : 광범위 사용자 관점 대한 빠른 분석 가능 <br/>\
- 단점 : 모집단 선택 문제, 모집단 의존적 <br/><br/>\
3. 인터뷰 <br/>\
- 장점 : 빠른 수렴 <br/>\
- 단점 : 요구사항 결함 및 합의 과정 필요 <br/><br/>\
4. 페르소나 <br/>\
- 장점 : 상황 기반으로 효과적 도출 가능 <br/>\
- 단점 : 사용자 모집단을 지나치게 단순화 시킬 수 있음 <br/><br/>\
# Futuer Workshop <br/>\
- 장점 : 창조적 생각 도출 가능 <br/>\
- 단점 : 실제 요구사항보다 확대 해석 될 수 있음 <br/><br/>\
<img src = "./img/Persona.png" style = "max-width:100%; height:auto;">\
',

// Open Seed 
'# 정의 : ETRI 개설 사이트 / 멀티코어용 임베디드 SW 플랫폼 / 개발자, 중소기업 공개 <br/>\
- 이기종 멀티코어용 임베디드 SW 플랫폼을 국내 개발자 및 중소기업에게 공개하고 이를 활성화 하기 위해 ETRI에서 개설한 사이트',

// 80
'# 정의 : 그래픽 기반 프로세스 모델링 방법론 / 비즈니스 분석가, 개발자, 관리자 <br/>\
- 비즈니스 분석가, 개발자, 관리자 등의 모든 비즈니스 프로세스 관련자에게 모델링 요소를 제공하는 그래픽 기반의 프로세스 모델링 방법론 \
',

// 81
'# 정의 : 미해결 문제 접근 방법 / 블랙보드, 지식소스, 제어컴포넌트<br/>\
- 결정 가능한 해결방법이 마련되지 않은 문제를 접근하고자 할 때 유용. 블랙보드(blackboard), 지식소스(knowledge source), 제어컴포넌트(control component)로 구성',

// 연동계획
'# 정의 : 반복적 계획 기법 / 점진적 상세화 / 가까운시기 상세 / 미래 작업 상위 수준 계획 <br/>\
- 프로젝트의 특성 중 하나인 점진적 상세화(Progressive elaboration)와 비슷한 특징을 지닌 개념으로 가까운 시기에 완료할 작업은 상세히 계획하고, 미래의 작업은 상위 수준에서 계획하는 반복적인 계획 기법<br/><br/>\
# 절차 (마분WP)<br/>\
- 1단계 : 마스터플랜 계획 <br/>\
- 2단계 : 분류 수준 계획 <br/>\
- 3단계 : WBS 단위 계획 <br/>\
- 4단계 : Work Package 관리, 인수기준 상세화 <br/>\
- 5단계 : Work Package 실제 수준 상세화 <br/><br/>\
# 작성원칙 <br/>\
- 관리 가능 크기 : 할당가능, 소통가능<br/>\
- 분할 레벨 구분 : 3~5단계<br/>\
- 작업 패키지의 적정 크기 : 1 ~ 10% 정도 <br/>\
- WBS 100% : 총합 100 <br/><br/>\
* KPC 25회 3교시 2번\
',

// SW 사업 저장소
'# 정의 : 통계적 데이터 기반 SW 사업지식 데이터 베이스 <br/>\
- 국가기관등에서 추진되는 SW사업(SW개발, 재개발, 유지보수 및 운영)의 수행실적 정보를 수집 및 분석하여 SW사업 추진시 예산수립, 비용산정, 요구사항도출 등을 위한 참조정보(사업규모, 사업금액, 사업기간 등)을 제공하는 객관적이고 정량적인 통계적 데이터 기반의 SW 사업지식 데이터베이스(Repository) <br/><br/>\
# 암기 <br/>\
- 소산법 22조 <br/>\
- 기.재.유.운 <br/>\
- 1억 <br/>\
- 분리제외, 상용제외 <br/><br/>\
# 개념도 <br/>\
- 데이터 제출(input) : 공공부문 발주기관 SW사업 수행 실적 정보(소산법 22조(SW 사업대가지급), 2013이후 제출 법적 의무화) <br/>\
- 데이터 수집 및 관리 : SW 사업정보저장소(총57개 데이터 수집 및 관리(사업기간, 사업금액, 요구사항, 기능점수(FP), 개발언어, 플랫폼정보) <br/>\
- 서비스 활용(output) : 공공부분 발주기관 - 유사사업 정보 활용 통한 예산 수립 참조, 대가산정 시뮬레이션(기능점수 참조 정보제공 예산 및 SW 산업 정책 관련기관 - 예산편성 기초 정보, 정책수립 및 의사결정 참고 정보<br/><br/>\
# 제출 대상 기관 : 소산법 의거 국가기관(국가, 지방자치단체, 국가 또는 지방자치단체가 투자하거나 출연한 법인 또는 그밖 공공기관)<br/><br/>\
# 제출 대상 사업 : 국가기관 등에서 매년 추진되는 SW 사업 <br/>\
- SW 개발 및 재개발 사업 : 발주금액 1억이상 사업 (분리발주 제외, HW, 상용 SW구매 비용 등 포함 통합 발주 금액 기준) <br/>\
- SW 유지보수 및 운영사업 : 발주금액 기준 1억이상 사업(다년계약일 경우 연간 유지보수 비용 기준) <br/><br/>\
# 제출 시점 <br/>\
- 개발 : 계약 및 착수후 1단계(계약 완료후 1개월 이내) <br/>\
- 사업종료후 2단계 : 사업 종료후 1개월 이내 <br/>\
- 재개발 : 개발 사업 동일 <br/>\
- 운영 및 유지보수 : 개발사업 동일 단, 다년계약일 경우 1회 이상 제출 <br/><br/>\
# 제출 절차 <br/>\
- 1차 : 계약 완료후 1개월 이내 : 사업정보와 FP정보를 시스템 등록 <br/>\
- 2차 : 사업 종료후 1개월 이내 : PM이 사업정보, FP정보(정통법), 수준 조사 정보 시스템 등록 <br/><br/>\
<img src = "./img/SW사업정보저장소.png" style = "max-width:100%; height:auto;">\
',

// SW사업 대가산정 가이드
'# 정의 : 유지관리, 운영업무 구분 명확화 개정 <br/>\
- SW 사업 대가산정 가이드 2019년 개정판에서 유지관리 업무와 운영업무의 구분 명확화 개정 진행',

// 옵저버 패턴
'# 정의 : 일대다 의존성 정의 패턴 / 타 객체 내용 반영 <br/>\
- 한 객체의 상태가 바뀌는 경우 의존 관계에 있는 다른 객체들에게 연락이 가고, 자동으로 그 내용이 갱신되도록 일대다 의존성을 정의한 패턴 <br/><br/>\
',

// PMO
'# 정의 : 프로젝트 전담 관리 조직 <br/>\
- Project Management Office <br/>\
- 성공적인 프로젝트 수행을 위해 프로젝트의 자원, 인력, 일정 등을 체계적으로 관리하기 위해 조직된 프로젝트 전담 관리 조직 <br/><br/>\
# 구성요소 <br/>\
1. 관리적 측면 (전재일고형)<br/>\
- 전문 PM : 전체 프로젝트 진행 관리 <br/>\
- 재무 관리자 <br/>\
- 일정 관리자 <br/>\
- 고객인수 담당자 <br/>\
- 형상 관리자 <br/><br/>\
2. 기술적 측면 (품개형)<br/>\
- 품질 관리자 <br/>\
- 개발기술 담당자 : 전문 Skill, Architecture <br/>\
- 형상관리 위원회<br/><br/>\
# Frame work <br/>\
<img src = "./img/PMO.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 활성화 방안 <br/>\
1. 공공 부문 정보화 사업 PMO 제도 현황 <br/>\
<img src = "./img/PMO_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
2. 활성화 방안 <br/>\
- 제도 측면 : 전문가 양성, 예산 확보, 생태계 기반 <br/>\
- 운영 측면 : 참조 모델, 실무적 방법론, 효과 및 효율 <br/><br/>\
* 라이지움 86회 2교시 2번 \
',
  
// 공공 PMO
'# 정의 : 공공정보화 사업에서의 PMO 제도 <br/>\
- 전자정부사업의 사업의 위험을 방지하고 품질을 향상시키기 위해 전자정부사업의 관리 감독 업무 일부 또는 전체를 전문가에게 위탁하는 제도 <br/><br/>\
# 법적 근거 <br/>\
- 전자정부법 64.2 : 전자정부사업관리의 위탁 <br/>\
- 전자정부법 64.3 : 전자정부사업관리자의 책무 <br/><br/>\
# 세부업무 <br/>\
- 기획단계 : 통합,성과 <br/>\
- 집행단계 : 통범일원품자의위조이 <br/>\
- 사후단계 : 통합,성과,변화 \
',
  
// 정보시스템 감리
'# 정의 : 3자 관점의 검증활동 <br/>\
- 감리발주기관 및 피감리인의 이해관계로부터 독립된자가 제3자적 관점에서 정보시스템의 효율성을 향상시키고 안전성을 확보하기 종합적으로 점검하고 문제점을 개선하도록 하는 활동 <br/><br/>\
# 감리대상 (전자정부법시행령 제71조) <br/>\
- 시스템 특성 : 대국민서비스 행정/민원업무 처리, 공동 구축/사용 (1억미만/비효) <br/>\
- 사업비 규모 : 구축사업 5억이상 (HW,SW 단순구매 제외) <br/>\
- 기관장 판단 : EA, ISP, SE, OP 등에 감리 시행 필요성 인정되는 경우<br/><br/>\
# 감리프레임워크 (시영관, 성산절) <br/>\
- 감리시점 : EA, ISP, SD, DB, OP, MA <br/>\
- 감리영역 : 사업관리, 품질보증, 구축/지원 등 <br/>\
- 감리관점 : 절차, 산출물, 성과 <br/><br/>\
# 유형 (ISO 12207) <br/>\
- 3단계 (요설종) <br/>\
- 2단계 (설종, 20억이하 6개월 미만) <br/><br/>\
# 감리원 (총상수) <br/>\
- 총괄감리원 : 1년이상 수석감리원 중 상근 감리원 <br/>\
- 상근감리원 : 감리업체 근무 <br/>\
- 수석관리원 : 정보기술 분야의 기술사, 국가공인자격 취득자 <br/>\
- 상주감리원 : 20억이상 감리 3회이상 / PM, QA 근무 3년 이상 <br/><br/>\
# 감리 수행 절차 <br/>\
- 구성 : 감리법인, 발주기관, 피감리인 <br/>\
- 단계 : 계약체결, 계획서제출, 착수회의, 현장감리, 종료회의, 감리보고서통보, 감리결과반영, 조치내역확인, 확인보고서 <br/>\
- 산출물 : 감리계획서, 감리수행결과보고서, 시정조치확인보고서 <br/><br/>\
# 감리 점검 결과 <br/>\
- 개선권고 유형 : 필수, 협의, 권고<br/>\
- 개선 시점 : 장기, 단기 <br/>\
- 과업내용 이행 여부 : 적합, 부적합, 점검 제외 <br/><br/>\
# 공통 감리 절차 (예현시)<br/>\
1. 예비조사 (준실감) <br/>\
- 예비조사 준비 <br/>\
- 예비조사 실시 <br/>\
- 감리계획서 작성/제출 <br/><br/>\
2. 현장감리 (감착감보종보) <br/>\
- 감리시작 <br/>\
- 착수회의 <br/>\
- 감리수행 <br/>\
- 보고서 작성/검토 <br/>\
- 종료회의 <br/>\
- 보고서 확정/통보 <br/><br/>\
3. 시정조치 확인 (준시작확)<br/>\
- 확인준비 <br/>\
- 시정조치 확인 <br/>\
- 확인보고서 작성/협의 <br/>\
- 확인보고서 확정/제출\
',

// PMO, 감리
'- 관점 : 3자 관점(독립적) / 발주자 관점<br/>\
- 법적근거 : 57.1 의무 / 64.2 권고 <br/>\
- 법적책임 : 62 처분 / 64.3 손해배상\
',
 
// 3단계 감리
'# 정의 : 사업비가 20억 이상이고, 사업기간이 6개월 이상일 경우, 요구정의, 설계, 종료 3단계 감리를 통하여 정보화 사업의 품질 및 과업이행 여부의 적절성을 확인하는 제도 <br/><br/>\
# 절차 : 착수회의 > 현장감리 > 감리보고서작성 > 종료회의 > 감리보고서접수 <br/><br/>\
# 종료단계 감리 <br/>\
- 정의 : 사업자가 제출한 과업대비표의 과업내용 이행 결과를 적합, 부적합 판정하는지 점검하는 감리 <br/>\
- 절차 : 예비조사 > 현장가리 > 시정조치확인 <br/><br/>\
# 과업이행 수행여부 곤란 사례 <br/>\
- 업무 이해도 : 감리인 상세 업무 프로세스 경험 부족 (사법시스템)<br/>\
- 신기술 이해 : 감리인 신기술 이해도 부족 (챗봇, IoT)<br/>\
- 정보보안 : 실제 운영환경 테스트, 점검 곤란 (민감정보 시스템)<br/>\
- UI/UX : 일부 전문가용 시스템 조작 어려움 (국방전문 시스템)<br/>\
- 개발 일정 : 개발 미완성 <br/>\
- 테스트 환경 : 수행 제반 조건 x (모바일, 플랫폼별) <br/><br/>\
# 점검 결과 사례 <br/>\
<img src = "./img/AuditSubjectResultExample.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 라이지움 87회 관리 4교시 3번\
',
  
// PMBOK 6th 주요개정 내용 <br/>\
'2018.03. 부터 시행 <br/>\
1. 프로젝트 관리자의 역할단원 추가 <br/><br/>\
2. 프로세스 변경 <br/>\
<img src = "./img/PMBOK6_2_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/PMBOK6_2_2.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/PMBOK6_2_3.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/PMBOK6_2_4.png" style = "max-width:100%; height:auto;"><br/><br/>\
3. 애자일 관련 내용. 비즈니스 문서, 조직구조 유형에 대한 내용 강화 <br/><br/>\
4. 각 지식영역에 대해 최근 추세 및 실무 사례, 테일러링시 고려사항 애자일/적응형 환경을 위한 고려사항에 대한 설명 추가 \
',
  
// 지식영역 세부프로세스 49개
'[Y] 통범일원품자의위조이<br/>\
[X] 착기실감통종<br/>\
- 착 : 헌장 / 이해관리자 식별 <br/>\
- 기 : 프/범요정W/일정순기일/원산예/품/자활/의/리식정량대/조/이 <br/>\
- 실 : 작지/-/-/-/품/자개관/의/리/조/참 <br/>\
- 감통 : 프통/확통/통/통/통/통/감/감/통/감<br/><br/>\
<img src = "./img/KA49.png" style = "max-width:100%; height:auto;">\
',
  
// 분리발주
'# 정의 : SW 생태계 활성화를 위한 제도 <br/>\
- 일정 규모이상의 SW 도입이 포함된 사업에서 상용 SW만을 별도 분리하여 개별적으로 계약 실시하는 제도 <br/><br/>\
# 법적근거 <br/>\
- 소프트웨어산업 진흥법 : 제20조(국가기관등의 소프트웨어 사업계약) <br/>\
- 조달청 내자구매업무 처리규정 : 제6조의 2(소프트웨어 분리발 제외사유 사전검토 요청) <br/><br/>\
# 적용대상 <br/>\
- 1차조건 : 5억원 이상 <br/>\
- 2차조건 <br/>\
1) 조달청 종합쇼핑몰 등록 SW경우 (5천만원 미만 포함) <br/>\
2) SW 품질인증 GS, CC 및 국가정보원 검증/지정 SW 포함 경우 \
',
  
// 분할발주
'# 정의 : 소프트웨어 산업 구조 선진화 위한 중장기 전략 <br/>\
- 소프트웨어 설계와 단순개발 업무가 분리될 수 있도록 프로젝트 발주 자체를 프로세스 별로 나눠서 진행하는 제도 <br/><br/>\
# 구성요소 <br/>\
- 공정분할 : 요구사항, 설계, 구현, 시험, 운영 <br/>\
- 기능분할 : 공정에 상관 없이 기능별 분할 <br/>\
- 부품분할 : 공정, 서브시스템 내 특정 부품, 패키지 (기존의 분리발주) <br/>\
<img src = "./img/분할발주구성도.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 고려사항, 극복방안 <br/>\
1. 고려사항 <br/>\
- 사업수행 측면 : 행정처리 기간 증가, 예산 반영 한계, 책임소재 불명확, 자의적 예외기준 적용 <br/>\
- 수행역량 측면 : 초기 이해 부족시 진행 어려움, 기획,설계 역량 부족 <br/><br/>\
2. 극복방안 <br/>\
- 인식제고 : 행정처리기간 증가 < 개발기간 단축 <br/>\
- 예산반영 한계 : 인식전환, 기획동결 제도 <br/>\
- 책임소재 불명확 : 기획설계 담당 사업자가 개발단계 PMO로 참여, 산출물 합의 <br/>\
- 자의적 예외기준 적용 : 기준 명확화, 위원회 개최 <br/>\
- 초기 이해 부족시 진행 어려움 : 역량강화 <br/>\
- 기획, 설계 역량 부족 : 협력체계 도입 강화 <br/><br/>\
# 분리발주, 분할발주 비교 <br/>\
<img src = "./img/SepDev.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 아이리포 24회 관리 4교시 3번\
',
  
// 난독화
'# 정의 : 역공학 방지의 기술 <br/>\
- 프로그램 코드의 일부 또는 전체를 변경하는 방법 중 하나로, 코드의 가독성을 낮춰 역공학에 대한 대비책을 제공하는 방법 <br/><br/>\
# 기술 분류 (구데제예)<br/>\
- 구획 난독화 : 형식 변화, 주석제거 <br/>\
- 데이터 난독화 : 변수 나누거나 합치기 <br/>\
- 제어 난독화 : 문장 묶는 단위 조절 <br/>\
- 예방 난독화 : 방법 봉쇄<br/><br/>\
# 적용사례 <br/>\
<img src = "./img/Obfuscation.png" style = "max-width:100%; height:auto;">\
',
  
// 함수형 언어
'# 개념 : 함수가 First Class 대상인 언어 <br/>\
- 명령형 언어의 부작용을 제거하기 위해 참조 투명성을 제공하는 수학적 Pure 함수의 모듈화를 이용한 프로그래밍을 지원하는 언어 <br/>\
<img src = "./img/FunctionalLanguageOverview.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 필요성 <br/>\
- 수학적 추상화 : 모듈의 재사용성 강화 <br/>\
- 최적화 : 이전 계산 활용 <br/>\
- 병렬화 : 경쟁 상태, DeadLock 해결 <br/><br/>\
# 비교 <br/>\
<img src = "./img/CommandFunction.png" style = "max-width:100%; height:auto;">\
',
  
// 로우코드
'# 정의 : 코딩없는 프로그램 개발 <br/>\
- 조직의 특정 프로세스 및 데이터 요구사항 처리를 위한 응용 프로그램을 신속하게 만들어 사용하기 위해 그래픽 사용자 인터페이스 및 기능 구성을 이용하여 응용 프로그램을 개발하는 환경 <br/><br/>\
# 장점 <br/>\
1. 개발관점 <br/>\
- 개발속도 향상 : Drap and Drop <br/>\
- 생산성 향상 : 오브젝트 연결 <br/><br/>\
2. 운영관점 <br/>\
- 저비용 관리 가능 : 개발 기간 단축 <br/>\
- 라이프사이클 관리 : App Marketplace 지원 <br/><br/>\
# 단점 <br/>\
1. 개발관점 <br/>\
- 제한된 커스터마이징 <br/>\
- 기업용 시스템 통합 어려움 <br/><br/>\
2. 운영관점 <br/>\
- 레퍼런스 부족 <br/>\
- 해외 솔루션 기술지원 한계 <br/><br/>\
3. 관리관점 <br/>\
- 보안이슈 존재 <br/>\
- 밴더 의존성 높음 <br/><br/>\
# 사례 <br/>\
- Appian : 인트라넷 내장 <br/>\
- MS Power Apps : 사용자 친화적 UI <br/>\
- Google App Maker : Drap and Drop \
',
  
// 민간투자형 SW사업
'# 정의 : 국민생활의 편익 증진을 위해 민간의 자본과 기술을 활용하여 민간과 공공이 협력, 추진하는 공공 SW 사업 <br/><br/>\
# 종류 <br/>\
<img src = "./img/PublicPrivatePartnership.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 사례 <br/>\
1. 국내 <br/>\
- 서울시 스마트 교통카드 시스템 : BTO 방식, 서울시-LG CNS 컨소시엄 <br/>\
- 안산시 U-City 구축 : BTL 방식, 안산시-KT 컨소시엄 <br/><br/>\
2. 해외 <br/>\
- 싱가포르 전자 통관만 TradeNet : 서류 신고/납부 업무 통합 <br/>\
- 뉴욕시 LinkNYC : 공중전화부스, 뉴욕시-CityBridge 협력 \
',
  
// 정보시스템 운영 성과관리
'# 정의 : 정보시스템 운영타당성을 판단하기 위한 정해진 기준에 따라 성과를 측정하고, 그 결과에 따라 정보시스템의 효율적 운영을 위한 유지관리유형을 결정하여 업무 및 비용 측면의 성과를 높이기 위한 제반활동 <br/><br/>\
# 적용근거 <br/>\
- 전자정부법 제45조 제3항 및 제4항 : 행정기관등의 장이 그 소관 정보시스템 운영타당성 판단 <br/>\
- 정보시스템 운영 성과관리지침 <br/><br/>\
# 지표 <br/>\
1. 비용측면 <br/>\
- 운영의 적정성 : 누적 유지보수 비율 <br/>\
- 유지의 용이성 : 투입 운영유지비용 증감률 <br/>\
- 비용의 효율성 : 평균 운영유지비용 증감률 <br/><br/>\
2. 업무측면 <br/>\
- 업무수행 영향도 : 기능 활용도 <br/>\
- 사용상의 편의성 : 사용 편의성 <br/>\
- 업무성과 달성도 : 목표대비 성과 달성도 / 업무성과 증감률 <br/><br/>\
# 성과측정 절차 <br/>\
1. 1차 성과측정 절차 <br/>\
- 대상 식별 : 5년이상 운영 정보시스템 <br/>\
- 기초데이터 수집 <br/>\
- 데이터 신뢰성 점검 <br/>\
- 성과측정 <br/><br/>\
2. 2차 성과측정 절차 <br/>\
- 유형 분류 : 유지관리, 유형별 재분류 <br/>\
- 자원 효율성 측정 <br/>\
- 구축방안 정의: 현행분석, 요구사항정의. 범위결정, 구축방안 도출 <br/>\
- 투자타당성 분석 : 경제성, 정성적 효과 <br/>\
- 최종 의사결정 : 유지, 재개발, 통폐합, 폐기 <br/><br/>\
* 116회 응용 2교시 6번\
',
);
