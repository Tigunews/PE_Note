var question = question.concat(
'공학 개요',
'[개요]- SW 공학',
'[개요]- SW 공학의 원리',
'[개요]- Web 공학',
'[계획단계]- 비용산정',
'[계획단계][비용산정]- 본수산정',
'[계획단계][비용산정]- LOC',
'[계획단계][비용산정]- COCOMO',
'[계획단계][비용산정]- COCOMO II',
'[계획단계][비용산정]- FP',
'[계획단계][FP]- 측정유형',
'[계획단계][FP]- 정통법 사례',
'[계획단계][비용산정]- EVM',
'[계획단계][비용산정]- 델파이 기법',
'[계획단계][비용산정]- 소프트웨어사업 대가산정 가이드',
'[계획단계][공공빅데이터]- 공공빅데이터 분석 사업비',
'[계획단계][공공빅데이터]- 공공빅데이터 업무적용 가이드',
'[계획단계]- 사업수행계획서',
'[계획단계]- BMT',
'[계획단계][BMT]- PoC',
'[계획단계][BMT]- Pilot test',
'[계획단계]- 예비타당성 조사',
'[분석단계]- 요구공학',
'[분석단계]- 요구공학 프로세스',
'[분석단계][요구공학]- SRS',
'[분석단계][요구공학]- 요구사항 추적성',
'[분석단계][요구공학]- 요구사항 도출',
'[분석단계][요구공학]- 요구사항 수집기법',
'[분석단계][요구사항]- 요구사항 상세화 실무 가이드라인',
'[분석단계][요구사항]- 정형기술검토',
'[분석단계]- 기술사양서',
'[분석단계]- 경제성 분석기법',
'[경제성 분석][타당성]- NPV',
'소프트웨어 안전성 보증 프로세스',
'소프트웨어 안전성 분석',
'[안전성 분석]- FMEA, FTA, HAZOP',
'[안전성 분석]- HAZOP',
'[설계단계]- 모듈화',
'[설계단계][모듈화]- 응집도',
'[설계단계][모듈화]- 결합도',
'[설계단계]- 소프트웨어 아키텍처',
'[소프트웨어 아키텍처]- ISO/IEC/IEEE 42010',
'[소프트웨어 아키텍처]- 아키텍처 평가',
'[소프트웨어 아키텍처][아키텍처 평가]- SAAM',
'[소프트웨어 아키텍처][아키텍처 평가]- ATAM',
'[소프트웨어 아키텍처][아키텍처 평가]- CBAM',
'[소프트웨어 아키텍처][아키텍처 평가]- ADR',
'[소프트웨어 아키텍처][아키텍처 평가]- ARID',
'[소프트웨어 아키텍처][아키텍처 평가]- 유틸리티 트리',
'[소프트웨어 아키텍처]- 아키텍처 드라이버',
'[소프트웨어 아키텍처]- 소프트웨어 아키텍처 모델, 패턴, 스타일',
'[소프트웨어 아키텍처][아키텍처 모델]- 데이터 중심형 모델',
'[소프트웨어 아키텍처][아키텍처 모델]- 클라이언트-서버 모델',
'[소프트웨어 아키텍처][아키텍처 모델]- 계층형 모델',
'[소프트웨어 아키텍처][아키텍처 모델]- MVC 모델',
'[소프트웨어 아키텍처][아키텍처 모델]- MVP 모델',
'[소프트웨어 아키텍처][아키텍처 모델]- MVVM 모델',
'[소프트웨어 아키텍처][MVVM]- Vue.js',
'[소프트웨어 아키텍처][아키텍처 모델]- Pipe & Filter',
'[소프트웨어 아키텍처][아키텍처 모델]- Batch Process',
'[소프트웨어 아키텍처][아키텍처 모델]- Blackboard Pattern',
'[설계단계][소프트웨어 아키텍처]- 품질속성',
'[설계단계][소프트웨어 아키텍처]- 품질속성 시나리오',
'[설계단계][소프트웨어 아키텍처]- 아키텍처뷰',
'[설계단계][소프트웨어 아키텍처]- Kruchten\'s 4 Plus 1 View',
'[설계단계][소프트웨어 아키텍처]- SEI 3 View',
'[설계단계]SAD',
'[설계단계][SAD]- ADD (Attribute Driven Design)',
'[설계단계]- UML ',
'[설계단계]- UML 관계',
'[설계단계][UML]- UML 확장매커니즘',
'[설계단계][UML]- Behavior Diagram',
'[설계단계][UML][Behavior Diagram]- Activity Diagram',
'[설계단계][UML][Behavior Diagram]- State Machine Diagram',
'[설계단계][UML][Behavior Diagram]- Usecase Diagram',
'[설계단계][UML][Interaction Diagram]- Sequence Diagram',
'[설계단계][UML][Structure Diagram]- Class Diagram',
'[설계단계]- Usecase Test',
'[설계단계]- 모델기반 테스트',
'[Service Architecture]- SOA',
'[Service Architecture][SOA]- ESB',
'[Service Architecture]- MSA',
'[Service Architecture][MSA]- EAI',
'[Service Architecture][MSA]- Service Mesh',
'GraphQL',
'[설계단계]- Shared Nothing 아키텍쳐',
'[설계단계]- Breadcrumbs',
'[구현단계]- 디자인패턴',
'[구현단계][디자인패턴]- 화이트박스 재사용',
'[구현단계][디자인패턴]- 블랙박스 재사용',
'[구현단계][디자인패턴]- 위임',
'[구현단계][디자인패턴]- 전략패턴',
'[구현단계][디자인패턴]- Observer Pattern',
'[구현단계][디자인패턴]- Null Object Pattern',
'[구현단계][디자인패턴]- Singleton Pattern',
'[구현단계]- 연산생략기법',
'[구현단계]- 정형기법',
'[구현단계][정형기법]- 정형명세',
'[구현단계][정형기법]- Z 명세',
'[구현단계][정형기법]- Petri-net',
'[구현단계][정형기법]- 상태차트',
'[구현단계][정형기법]- VDM',
'[구현단계][정형기법]- 정형검증',
'[구현단계]- Mccabe 순환복잡도(Cyclomatic Complexity) = 회전복잡도',
'[구현단계][Mccabe 순환복잡도]- Halstead Metrics, 객체지향 Metrics',
'[구현단계]- Spring Framework',
'[구현단계]- MISRA-C, MISRA-C++',
'[구현단계]- node.js',
'[구현단계]- Javascript',
'Java GUI',
'[시험단계]- 테스트 7원칙',
'[시험단계]- 테스트 유형',
'[시험단계]- 테스트 절차',
'[시험단계][태스트]- 단위 테스트',
'[시험단계][테스트]- 통합 테스트',
'[시험단계][테스트]- 시스템 테스트',
'[시험단계][테스트]- 성능 테스트',
'[시험단계][테스트]- TPC',
'[시험단계][테스트]- SPEC',
'[시험단계][테스트]- Little\'s Law',
'[시험단계][테스트]- 인수 테스트',
'[시험단계]- 확인/검증',
'[시험단계]- 정적 테스트',
'[시험단계][정적 테스트]- Peer Review',
'[시험단계][정적 테스트]- Walkthrough',
'[시험단계][정적 테스트]- 인스펙션',
'[시험단계][정적 테스트]- 페이건(Fagan) 인스펙션',
'[시험단계]- 동적 테스트',
'[시험단계]- 명세기반 테스트',
'[시험단계][명세기반]- 동등분할',
'[시험단계][명세기반]- 경계값분석',
'[시험단계][명세기반]- 원인결과그래프',
'[시험단계][명세기반]- Decision Table',
'[시험단계][명세기반]- 상태전이 테스트',
'[시험단계][명세기반]- 페어와이즈',
'[시험단계][명세기반]- 도메인 테스트',
'[시험단계]- 구조기반 테스트',
'[시험단계][구조기반]- 제어흐름 테스트',
'[시험단계][구조기반][제어흐름]- 테스트,코드 커버리지',
'[시험단계][구조기반][제어흐름]- MC/DC',
'[시험단계][구조기반]- 자료흐름 테스트',
'[시험단계]- 경험기반 테스트',
'[시험단계][경험기반]- 탐색적 테스팅',
'[시험단계][경험기반]- 테스트 차터',
'[시험단계]- 테스트 하네스(Test Harness)',
'[시험단계]- 테스트 더블',
'[시험단계]- 테스트 자동화 도구',
'[시험단계]- 정적분석도구',
'[시험단계]- Record and Replay',
'[시험단계]- 테스트 오라클',
'[시험단계]- 회귀 테스트',
'[시험단계]- 리스크기반 테스트(RBT)',
'[시험단계]- 소프트웨어 보안 테스팅',
'[시험단계]- A/B 테스팅',
'[시험단계]- 지각 테스팅',
'[시험단계]- 뮤테이션 테스트',
'[시험단계]- 비버깅',
'[시험단계]- IAST(Interactive Application Security Testing)',
'[시험단계]- 백투백(back-to-back) 테스트',
'[시험단계]- Cursory Test',
'[시험단계]- 스모크(Smoke) 테스트',
'[시험단계]- 새너티(Sanity) 테스트',
'[시험단계]- 콘콜릭(Concolic) 테스트',
'[시험단계]- 퍼즈(Fuzz) 테스트',
'[시험단계]- Shift-left Testing',
'[시험단계]- TMMi',
'[시험단계]- ISO 29119',
'[시험단계][ISO 29119]- ISO/IEC 33063',
'[시험단계]- ISO/IEC 20246',
'[시험단계]- TPI',
'[시험단계]- TCoE',
'[시험단계]- 테스팅 가이드',
'[시험단계]- 테스트 케이스(IEEE 829)',
'[시험단계]- Agile Test',
'[시험단계]- Test 자동화 도구',
'[시험단계]- BMT',
'SRGM',
'[운영유지보수]- 레만의 원리',
'[운영유지보수]- Code Smell',
'[운영유지보수]- Refactoring',
'[운영유지보수]- 3R',
'[운영유지보수][3R]- 역공학(저작권 측면)',
'[운영유지보수][3R]- Reverse Engineering',
'[운영유지보수][3R]- Re Engineering',
'[운영유지보수][3R]- Re use',
'[운영유지보수]- Anti-Reversing',
'[운영유지보수][Anti-Reversing]- 코드가상화',
'[운영유지보수]- ISO/IEC 14764',
'[운영유지보수][ISO/IEC 14764]- PERT/CPM, CCM, CCPM',
'[운영유지보수][ISO/IEC 14764]- 일정관리',
'[운영유지보수][일정관리]- 3점 산정',
'[운영유지보수][일정관리]- 일정 단축기법',
'[운영유지보수]- CPM',
'[운영유지보수]- CCM',
'[운영유지보수]- Lehman 소프트웨어 변화',
'프로젝트 관리계획서',
'[관리표준][PMBOK]- 통합관리',
'[관리표준][PMBOK]- 범위관리',
'[범위관리]- 형상관리',
'[범위관리]- 형상관리 베이스라인',
'[관리표준][PMBOK]- WBS',
'[관리표준][PMBOK]- Gold Plating',
'[관리표준][PMBOK]- Resource Leveling',
'[관리표준][PMBOK]- 브룩스 법칙',
'[관리표준][PMBOK]- 수확 체감의 법칙',
'[관리표준][PMBOK]- 범위 크립',
'[관리표준][PMBOK]- 원가관리',
'[관리표준][PMBOK]- 품질관리',
'[관리표준]- SW Metrics',
'[관리표준][PMBOK]- 품질비용',
'[관리표준][PMBOK]- 품질관리QC7도구',
'[관리표준][PMBOK]- 품질관리신QC7도구',
'[관리표준][PMBOK]- 인적자원관리',
'[관리표준][PMBOK]- 터크만 팀 발달 5단계',
'[관리표준][PMBOK][터크만]- 동기부여이론',
'[관리표준][PMBOK][터크만][동기부여]- 내용이론',
'[관리표준][PMBOK][터크만][동기부여]- 과정이론',
'[관리표준][PMBOK]- 프로젝트 위험',
'[관리표준][PMBOK]- 프로젝트 위험관리',
'[관리표준][PMBOK]- 프로젝트 위험요소',
'[관리표준][위험관리]- 정성적 위험분석',
'[관리표준][위험관리]- 정량적 위험분석',
'[위험관리][정량적 위험분석]- 민감도 분석',
'[위험관리][정량적 위험분석]- 의사결정나무 분석',
'[위험관리][모의실험]- 몬테카를로 시뮬레이션',
'[위험관리][모의실험]- EMV',
'[관리표준][PMBOK]- 조달관리(구매)',
'[관리표준][PMBOK]- 이해관계자관리',
'[관리표준][PMBOK][이해관계자]- 현저성 모델',
'[관리표준][PMBOK][이해관계자]- 갈등관리',
'[관리표준][PMBOK]- 자원 최적화',
'[관리표준]-ISO 21500',
'[관리표준]- SWEBOK',
'[관리표준]- 요르돈법칙',
'[품질표준]- SW 품질',
'[품질표준]- SW 품질관리',
'[품질표준]- SW 품질보증',
'[품질표준]- SW 품질통제',
'[품질표준]- 품질경영',
'[품질표준][품질경영]- ISO 9001',
'[품질표준]- 품질평가',
'[품질표준][품질평가]- McCall 품질요소',
'[품질평가][제품 품질]- ISO/IEC 9126',
'[품질평가][제품 품질]- ISO 12119',
'[품질평가][제품 품질]- ISO 14598',
'[품질평가][제품 품질]- IEEE/ISO/IEC 25000',
'[품질평가][제품 품질]- IEEE/ISO/IEC 25010',
'[품질평가][프로세스 품질]- ISO 12207',
'[품질평가][프로세스 품질]- ISO 15504',
'[품질평가][프로세스 품질]- CMMI',
'[품질평가][프로세스 품질]- CMMI V2.0',
'[품질평가][프로세스 품질]- ISO/IEC 33000',
'[품질평가][프로세스 품질]- ASPICE(Automotive SPICE)',
'[프로세스 품질]- CAR',
'[프로세스 품질]- SP 인증',
'[프로세스 품질]- IEEE 1633',
'[품질표준][제품 품질]- GS 인증',
'[품질표준][제품 품질]- NEP 인증',
'[품질표준][제품 품질]- NET 인증',
'[품질표준][제품 품질]- 공개SW컴플라이언스 이슈',
'[품질표준][라이선스]- Patent Map',
'[품질표준][라이선스]- 기술평가표',
'[품질표준][라이선스]- 프로그램 저작권, 특허권',
'[품질표준][라이선스][특허]- FRAND 특허',
'[품질표준][라이선스]- 지식 재산권',  
'[모델]- SDLC',
'[모델][SDLC]- 폭포수모델(Waterfall)',
'[모델][SDLC]- 프로토타입모델(Prototype) = 원형모델',
'[모델][SDLC]- 나선형 모델(Spiral)',
'[모델][SDLC]- 반복적개발모델 = 점증적개발모델',
'[모델]- 4세대 모형',
'[모델][SDLC]- RAD',
'[모델][SDLC][RAD]- JAD',
'원격지 개발',
'[모델]- 클린룸(Clean Room) 모델',
'[모델][CleanRoom]- 함수적등가성',
'[모델]- V Model',
'[모델][V Model]- DESS V Model',
'[모델][V Model]- Multiple V Model',
'[모델][V Model]- W Model',
'[모델]- COMET',
'[모델][SDLC]- Secure SDLC',
'[모델][SDLC]- 일정중심 모형',
'[모델][SDLC]- 진화적 출시 모형',
'방법론',
'[방법론]- SW 개발 방법론',
'[방법론]- 구조적 방법론',
'[방법론]- 정보공학 방법론',
'[방법론][정보공학 방법론]- CRUD 매트릭스',
'[방법론]- 절차지향, 객체지향 비교',
'[방법론]- 객체지향 방법론',
'[방법론][객체지향]- 캡슐화',
'[방법론][객체지향]- 추상화',
'[방법론][추상화]- 인터페이스',
'[방법론][추상화]- 추상클래스',
'[방법론][객체지향]- 다형성',
'[방법론][객체지향]- 정보은닉',
'[방법론][객체지향]- 상속',
'[방법론][객체지향]- 상속 합성',
'[방법론][객체지향]- 객체 모델링',
'[방법론][객체지향]- SOLID',
'[방법론]- 패키지 설계',
'[방법론][객체지향]- Inversion of Control',
'[방법론][Inversion of Control]- Dependency Lookup',
'[방법론][Inversion of Control]- Dependency Injection',
'[방법론][객체지향]- Overriding, Overloading',
'[방법론][객체지향]- Demeter\'s Law',
'[방법론]- CBD',
'[방법론][CBD]- RUP',
'[방법론]- Agile 방법론',
'[방법론][Agile]- xp',
'[방법론][Agile]- Scrum',
'[방법론][Scrum]- Backfill',
'[방법론][Agile]- Burn down Chart',
'[방법론][Agile]- SafeScrum',
'[방법론][Agile]- 회고',
'[방법론][Agile]- CI',
'[방법론][Agile]- CD(Continuous Delivery)',
'[방법론][Agile]- CD(Continuous Deployment',
'[방법론][Agile]- 제품백로그',
'[방법론][Agile]- 사용자스토리',
'[방법론][Agile]- 기술스토리',
'[방법론][Agile]- 스토리 포인트',
'[방법론]- Pair Programming',
'[방법론][Agile]- Lean 방법론',
'[방법론][Lean]- Lean UX',
'[방법론][Agile]- Kanban 방법론',
'[방법론][Agile]- Daily Build',
'[방법론][Agile]- Planning Poker',
'[방법론][Agile]- MetaPhor',
'[방법론]- 방법론 테일러링',
'[방법론]- MOM, MOA',
'[방법론]- EIP',
'[방법론]- TDD',
'[방법론]- ATDD',
'[방법론]- BDD',
'[방법론]- DDD',
'[방법론]- AOSE',
'[방법론]- AOP',
'[방법론]- SSPL',
'[방법론][SSPL]- Feature',
'[방법론][SSPL]- Product Line 방법론',
'[방법론][SSPL]- FORM',
'[방법론][SSPL]- 도메인 공학',
'[방법론]- MDA',
'[방법론]- MDD',
'[방법론]- ASD',
'[방법론]- EDA',
'[방법론][Ops]- DevOps',
'[방법론][Ops]- DataOps',
'[방법론][Ops]- GitOps',
'[방법론][Ops]- MLOps',
'[방법론][Ops]- DevSecOps',
'[방법론]- 시각적 분석 (Visual Analytics)',
'[방법론]- 시각화 분석 (Visualization Analysis)',
'[방법론]- 데이터 시각화 (Data Visualization)',
'[방법론]- 임베디드 SW',
'[정책]- SW 진흥법 개정안',
'[정책][SW 진흥법]- 하도급 금지',
'[정책][SW 진흥법]- SW 산업 분류',
'[정책]- 산업의 디지털 전환 및 지능화 촉진법',
'[방법론]- UX 모델링',
'[방법론][UX]- 페르소나(Persona)',
'[방법론]- 임베디드 개발 방법론',
'Open SEED',
'BPMN(Business Process Model and Notation)',
'연동계획(Rolling Wave Planning)',
'SW 사업정보 저장소',
'SW 사업 대가선정 가이드 (2019 개정판)',
'옵저버 패턴',
'PMO',
'Agile PMO',
'공공 PMO',
'정보시스템 감리',
'[감리]- 21년 개정사항',
'[감리]- 감리 계획서, 보고서 작성 원칙',
'[감리]- 공통감리',
'[공통감리][현장감리]- 검사기준서',
'[공통감리][현장감리]- 기능/비기능 요구사항 점검',
'[공통감리][시정조치확인]- 시정조치 확인 보고서',
'[감리]- PMO, 감리',
'[감리]- 3단계 감리',
'[감리]- 운영 감리',
'[감리]- 유지보수 감리',
'[감리]- 감리기준 감리업무 절차',
'[감리]- 정보시스템 하드웨어 규모산정 지침',
'[감리]- 상주감리',
'[감리]- 기본점검표',
'PMBOK 6th 주요개정 내용',
'[PMBOK]- 지식영역별 세부 프로세스 49개',
'발주 프로세스',
'[발주]- 발주관리',
'[발주]- RFI',
'[발주]- RFP',
'[발주]- 분할발주',
'난독화',
'함수형 언어',
'로우코드',
'민간투자형 SW 사업(PPP)',
'정보시스템 운영 성과관리',
'공공기관 사업자 선정',
'[사업자 선정]- 협상 의한 계약체결',
'[사업자 선정]- 낙찰자 결정방식',
'Marshalling',
'ALM',
'SW Visualization',
'SW안전 확보 지침',
'Integrated Development Equipment',
'SW사업 관리감독 항목',
'[SW사업]- SW개발사업 적정 사업기간 산정',
'[SW사업]- 상용SW직접구매(분리발주)',
);

var answer = answer.concat(
// 공학 개요
'# 정의 : 공업의 이론, 기술, 생산 따위를 체계적으로 연구하는 학문. 전자, 전기, 기계, 항공, 토목, 컴퓨터 따위의 여러 분야가 있다. <br/><br/>\
# 프로세스(Process) <br/>\
- 일이 처리되는 경로나 공정 <br/>\
- 특정 결과를 달성하기 위한 과정 <br/>\
- 자연스러운 변화가 일어아는 과정 <br/>\
- 공정 <br/><br/>\
# 모델(Model) <br/>\
- 작품을 만들기 전에 미리 만든 물건. 또는 완성된 작품의 대표적인 보기 <br/>\
- 본보기가 되는 대상이나 모범 <br/><br/>\
# 방법론(Methodology) <br/>\
- 방법론은 방법과 의미를 밝히는 것 <br/>\
- 공학적 접근에 의해 체계적/순서적 방법에 의해 정보를 분석하여 사용하는 기술의 절차/집합 <br/>\
- 적용, 작업활동, 절차, 산출물, 기법의 체계적 정리 \
',
 
// [개요]- SW 공학
'# 정의 : 소프트웨어의 개발과 운영, 유지보수, 소멸에 대한 체계적인 접근 방법 (IEEE) <br/>\
- SW 제품 생산, SW 개발,운영,유지보수활동에 프로세스(절차),방법,도구를 적용하여 연구 개발하는 활동 <br/><br/>\
# 특징 (<font color = "red">비복유무비복</font>)<br/>\
- 비가시성 : 코드 내재 <br/>\
- 복잡성 : 개발 과정 복잡, 난해 <br/>\
- 유연성 : 항상 수정이 가능 <br/>\
- 무형 : 별도의 유형화 필요 (FP) <br/>\
- 비마모성 : 외부 환경 의한 마모가 아닌 품질 저하 <br/>\
- 복제가능 : 간단한 방법으로 복제 가능 <br/><br/>\
# 배경 : SW 위기 -> 수요에 대한 공급 능력 미비신화, 예산초과 및 일정지연, 품질저하 <br/><br/>\
# 발전 원리 (<font color = "red">자품공표</font>)<br/>\
- 자동화 도구 : Case, UML, Repository <br/>\
- 품질 보증 체계 : ITIL, CMMi, SPICE <br/>\
- 공학적접근 : 방법론 <br/>\
- 표준화 : ITA/EA SW Data 표준화 <br/>\
<font color = "red"> 규모, 품질과 생산성, 일관성과 재현성, 변경 </font><br/><br/>\
# 구성 : 도구,언어,기법,원리 <br/><br/>\
# 주제 <br/>\
1. 방법 : 제작 사용 기법 및 절차 <br/>\
- 구조적, 객체지향 방법론등 <br/><br/>\
2. 도구 : 자동화된 시스템 <br/>\
- 설계, 프로그래밍, 테스트 도구 <br/><br/>\
3. 프로세스 : 도구, 기법 사용하여 작업하는 순서 <br/>\
- Unified Process, eXtreme Programing <br/><br/>\
4. 패러다임(Paradigm) : 접근 방법, 스타일 <br/>\
- 구조적, 객체지향 방법론 <br/><br/>\
5. 기술 <br/><br/>\
# 목표(QCD) <br/>\
- 고품질 소프트웨어 생산 : 요구사항 관리, 품질관리 <br/>\
- 사용자 만족도 증진 : 요구사항 관리, 품질관리 <br/>\
- 경제성 생산 : 요구사항 관리 ,프로젝트 관리 <br/>\
- 수행능력 개선 : 요구사항 관리, SDLC <br/>\
- 생산성 향상 : 요구사항 관리, 모듈화, 패턴화 기법 <br/>\
<font color = "red">* 높은 품질과 생산성, 일관성 > 일관된 품질을 일관된 생산성으로 만들기(QCD, 품질, 비용, 납기)</font><br/><br/>\
# 좋은 소프트웨어 조건 : 기신사효유이 (ISO 9120) <br/><br/>\
# 영향 요인(<font color = "red">프프엔지</font>) <br/>\
- 프로젝트 : 계획 수립, 관리 통제 / RFP 명확화, PMBOK 7 <br/>\
- 프로세스 : 프로세스 개선, 통제 / DevOps, CI/CD, 형상관리 베이스라인 <br/>\
- 엔지니어링 : SW 대가 산정, 비용 절감 / SRS 명확화, 재사용 OSS <br/>\
- 지원 : 조직원 역량 강화 / 교육, 훈련 수행 <br/><br/>\
* 123회 관리 2교시 2번\
',

// [개요]- SW 공학의 원리 
'# 공학원리 : 정형성과 엄격, 관심사의 분리, 모듈화, 추상화, 변화예측, 일반화, 점진화 <br/><br/>\
# 발전원리 : 공학적 접근, 표준화, 자동화 도구 활용, 품질보증 체제 \
',
 
// Web 공학
'# 정의 : 고품질 웹 기반 시스템 개발을 위해 경영 관리/공학 원칙 적용 <br/><br/>\
# 특징 : 네트워크 연결, 콘텐츠 중심, 지속변화\
',

// 노력산정, 비용추정, 비용산정 
'# 정의 : 계획 수립 활동 / 양적, 질적 수준 측정 / 소유자원 / 기간산정<br/>\
- SW의 양적/질적 수준을 측정하여 소유자원 및 기간산정 등을 계획, 수립하는 활동 <br/><br/>\
# 암기 <br/>\
- 하 : 델전 <br/>\
- 상 : LM <br/>\
- 수 : CF <br/><br/>\
- 양 : CD <br/>\
- 양질 : FMH <br/><br/>\
# 산정 방법에 의한 분류(하상수) <br/>\
- 하향식(Top-Down) : 전문가, 과거사례, 유사경함 -> Delphi, 전문가 판단 <br/>\
- 상향식(Bottom-Up) : WBS 기반 코드수, 인원수 산정 -> LOC, M/M <br/>\
- 수학모델 : COCOMO, FP <br/><br/>\
# 산정 기준에 의한 분류(양질) <br/>\
- 양적 규모 방식 : 소스라인 수에 근거 -> COCOMO, Doty 모델 <br/>\
- 양과 질 고려 산정 방식 : FP, McCabe 회전 복잡도, Healstead의 소프트웨어 사이언스 <br/><br/>\
<img src = "./img/비용산정_1.png" style = "max-width:100%; height:auto;">\
',

// 본수산정
'# 정의 : 화면 하나 개발 위해 투입되는 공수를 본이라 칭하여 본수 이용한 비용산정 기법 <br/><br/>\
# 특징 <br/>\
- Bottum-up 방식 <br/>\
- View 제공 PJT 적합 <br/>\
- 소요시간 적음 <br/>\
- 전문가 필요 <br/>\
- 산정자 의존적 <br/>\
- 기능 복잡한 경우 산정결과 부정확 \
',

// LOC
'# 정의 : 프로그램 코딩 Line수 이용한 비용산정 기법 <br/>\
- Line of Code <br/><br/>\
# 특징 <br/>\
- Bottum Up 방식 <br/>\
- 양적 수준 중시 <br/>\
- 측정 용이 <br/>\
- 예측치 이용 <br/>\
- 정확성 떨어지고 추상적 <br/>\
- 델파이 기법 병행 적용 <br/>\
- 개발 50% 이상 진행되어야 예측 가능 <br/><br/>\
# 산정 수식 <br/>\
- 예측치 = (낙관치 + 4*기대치 + 비관치) / 6 \
',

// COCOMO
'# 정의 : Behem에 의해 창시된 구조적 개발 방법론에 적용가능한 LOC 기반 비용산정 모델 <br/>\
- Constructive Cost Model <br/><br/>\
# 특징 <br/>\
- LOC + 계수적용 <br/>\
- Bottum-UP 방식 <br/>\
- 양적 수준 중시 <br/><br/>\
# 유형 <br/>\
1. Basic COCOMO <br/>\
- LOC로 SW개발 노력/비용 추정<br/>\
- 단일값 모형<br/>\
- 스텝수 계산 방식 <br/><br/>\
2. Intermidiate <br/>\
- 프로젝트 형태 <br/>\
- 개발환경 <br/>\
- 개발인력요소 따라 15개 특성치 적용 <br/>\
1) 제품속성 : 신뢰도, 복잡도, DB크기 <br/>\
2) HW 속성 : 응답시간, 성능제약 <br/>\
3) 인적 속성 : 분석가능력, 경험 <br/>\
4) 프로젝트 속성 : 일정, 개발도구, 방법론 <br/><br/>\
3. Detailed <br/>\
- 3계층 비용산정 : 모듈레벨, 서브시스템레벨, 시스템별 산정후 합산 <br/><br/>\
# PJT 유형 <br/>\
- 단순형(Oraganic) <br/>\
- 중간형(Semi-detached) <br/>\
- 임베디드형(Embedded) <br/><br/>\
# 문제점 <br/>\
- OOP,CBD,4GL 등 부적합 <br/>\
- SW제품 전체 대한 승수 계산후 일괄적용 <br/>\
-> Constructive Cost Mdel II 등장 \
',

// COCOMO II
'# 정의 : 객체지향 방법론 SW 규모산정방식, 요구사항에 따른 추가비용 계산, SW 유연성 평가가능 <br/>\
- Constructive Cost Model II <br/><br/>\
# 특징 <br/>\
- PJT 진행 단게별 3가지 모델 제시 <br/>\
- 요구변경 따른 추가비용계산 및 SW 유연성 평가 가능 <br/>\
- 객체지향 적합 <br/>\
- 수학적 기법 <br/>\
- 계수적용 <br/><br/>\
# 유형 <br/>\
- 1단계 : 어플리케이션 구성 모델 <br/>\
- 2단계 : 초기설정모델 <br/>\
- 3단계 : 포스트아키텍처 모델 \
',

// FP
'# 정의 : ISO 14143 / SW 규모측정 방법 / 사용자관점 / 양,질 (대가산정가이드 2020 기준) <br/>\
- 사용자관점에서 소프트웨어의 양과 질을 동시에 고려한 소프트웨어 규모 측정방법, ISO14143<br/><br/>\
# 특징 : 양적/질적 측면 고려, 수학적 기법, 간이법/정규법, 간이법으로 초기 사업규모 예측가능, 복잡도 산정에 중간 개입 가능 <br/><br/>\
# 구성 <br/>\
1. 데이터 기능 <br/>\
- 기능유형 : ILF, EIF <br/>\
- 복잡도 및 기여도 : DET(Attribute), RET(Split Table - 사원(정규직,비정규직)) <br/><br/>\
2. 트랜잭션 기능 <br/>\
- 기능유형 : EI, EO, EQ <br/>\
- 복잡도 및 기여도 : DET, FTR(Table 수) <br/><br/>\
# 개발비 산정절차 / 산출물 (<font color = "red">사개보직소</font>)<br/>\
<img src = "./img/FP_Process.png" style = "max-width:100%; height:auto;"><br/>\
- 사전준비 : 업무, 요구사항 정의, 규모(FP), 산정방법(정통,간이) 결정 / 규모 산정 방법 <br/>\
- 개발대상 SW 기능점수 산정 : 기능 식별, 복잡도 고려 산정 / 개발대상 SW 기능점수 <br/>\
- 보정전 개발원가 산정 : FP * 단가 / 보정전 개발원가 <br/>\
- 보정후 개발원가 산정 : 연성운보, 원가*보정계수 / 보정후 개발원가 <br/>\
- 직접경비 및 이윤 산정 : 개발 관련 직접경비, 개발원가 25% 이내 이윤 / 직접경비, 이윤 <br/>\
- 소프트웨어 개발비 산정 : 개발원가 + 직접경비 + 이윤 / 소프트웨어 개발비 <br/><br/>\
# 보정원가 계수 <br/>\
1. 개발 규모 <br/>\
- 규모 보정계수 : 0.4057 x (loge(기능점수) - 7.1978)^2 + 0.8878 <br/>\
-> <font color = "red">500</font>FP 미만시 <font color = "red">1.2800</font>, <font color = "red">3,000</font>FP 초과시 <font color = "red">1.1530</font> 적용 <br/><br/>\
2. 애플리케이션 복잡도 (<font color = "red">연성운보</font>)<br/>\
- 연계복잡성 수준 : 연계 기관당 관리의 복잡성 (<font color = "red">1~2 연계 기관 0.94</font>)<br/>\
- 성능요구 수준 : 응답시간 또는 처리율에 대한 사용자 요구수준 <br/>\
- 운영환경 호환성 : 응용SW의 설치 운영 환경의 상이한 정도 <br/>\
- 보안성 수준 : 시큐어코딩, 웹취약점점검, 암호화점검, 개인정보보호 등 요구 수준 <br/><br/>\
# 단위 기능 산정법 <br/>\
<img src = "./img/SWE_1.png" style = "max-width:100%; height:auto;">\
',

// 측정유형
'# 유형 <br/>\
- 개발 프로젝트 : 최초 설치 소프트웨어 기능 측정 <br/>\
- 개선 프로젝트 : 변경 부분 측정 <br/>\
- 어플리케이션 : 설치되어 있는 어플리케이션 베이스라인 <br/><br/>\
# 유형별 조정 기능 점수 <br/>\
<img src = "./img/FP_Type_Point.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 라이지움 87회 1교시 11번\
',
 
// 정통법 사례
'<img src = "./img/정통법사례.png" style = "max-width:100%; height:auto;">\
',

// EVM
'# 정의 : 원가관리기법 / 일정, 비용 / 동일 화폐가치 환산 <br/>\
- 계획대비 실적을 확인하는 기법으로 프로젝트의 일정과 비용이 단위를 동일한 화폐가치로 환산하여 통합관점에서 성과측정을 하고자하는 원가관리 기법 <br/><br/>\
<img src = "./img/EVM.png" style = "max-width:100%; height:auto;">\
',

// 델파이 기법 
'# 정의 : 의견 불일치시 타협통한 중재안 도출하고 조정자에 의해 편견 분위기 배제하여 무기명, 반복 재산정 통한 전문가 집단의 의견합의를 유도하는 방법 \
',

// SW 대가산정 가이드 
'# 정의 : 적정대가 산정 기준 가이드 / SW 사업추진 / 예산,발주,계약 <br/>\
- SW의 기획, 구현, 운영 등 수명주기 전 단계에 대한 사업을 추진함에 있어 예산수립, 사업발주, 계약시 적정대가를 산정하기 위한 기준 제시한 가이드 <br/><br/>\
# 암기 <br/>\
- 소산법 22조 <br/>\
- ISO 12207 <br/>\
- 절차 : 유시모 <br/>\
- 사업유형 : 기구운 <br/>\
기 : I,IB,EI,I,보 <br/>\
구 <br/>\
운 : 유운고S상재기관-가 <br/>\
컨-유형 : 주전취종개 <br/>\
지-유형 : 업정위사인기 <br/>\
가-유형 : 운개지장 <br/>\
측정요소 : 기특역 <br/><br/>\
# 배경 : 2012.02. SW 산업 진흥법 26조 개정으로 사업대가가 민간 자율로 결정되도록 유도하기 위함 <br/><br/>\
# 근거 : 소산법 22조(소프트웨어사업 대가 지급) <br/><br/>\
# 특징 : ISO 12207 기반 <br/><br/>\
# 절차 : 사업유형식별 > 대가산정 시점식별 > 대가산정모형 선정 <br/><br/>\
# 사업유형 <br/>\
1. 기획단계<br/>\
- ISP(컨지수) <br/>\
- ISP/BPR(투) <br/>\
- EA/ITA(투) <br/>\
- ISMP(투) <br/>\
- 보안커설팅(투) <br/>\
- 구현단계 (SW개발비(투,기)) <br/>\
2. 운영단계 (유운고S상재지관-가) <br/>\
- 지관리(요율)<br/>\
- 운영(투)<br/>\
- 운영/유지관리(고정비/변동비)<br/>\
- SLA기반 유지관리/운영(SLA)<br/>\
- 사용 SW유지관리비(요율)<br/>\
- 소프트웨어 재개발비(재개발비+이윤)<br/>\
- 보안지속서비스비(요율) <br/>\
- 보안관제서비스비(투)<br/>\
- 가치 기반 ITO서비스 유지관리 및 운영비(민간부분만 포함)<br/><br/>\
# 컨설팅지수 방식 의한 ISP 수립비 : 투입공수 파악 어려운 경우, 업무 난이도 의존적 <br/>\
- 업무범위 설정 <br/>\
- 업무별 가중치 계산 (by 업무별 가중치 표) <br/>\
- 업무별 난이도 계산 (by 난이도표) <br/>\
- 컨설팅 지수 계산 : 컨설팅지수 = 가중치 * 난이도 <br/>\
- 직접경비 <br/>\
- ISP 수립비 계산 : ISP 수립비 = 공수 * 컨설팅지수 ^ 0.95 + 천만원 + 직접경비 <br/><br/>\
# 투입공수 방식에 의한 ISP 수립비 : 컨설팅 지수로 산정 불가하 대형 사업, 투입공수 산정 가능한 경우, 컨설턴트 수준 의존적, 사업 예산 및 예정 가격 산정 용도로만 활용 <br/>\
- 사전 준비 : 범위 확정, 업무별 요구사항 결정 <br/>\
- 컨설턴트 등급 결정(by 컨설팅 특성) <br/>\
- 컨설팅 공수 계산 (by 업무 범위, 요구사항) <br/>\
- 컨설턴트 직접 인건비(=등급별고수 * 노임단가) <br/>\
- 제경로 : 직접인건비 * (110 ~ 120) 및 기술료((직접인건비 + 제경비) * 20 ~ 40 %) <br/>\
- 직접경비 계산 <br/>\
- ISP 컨설팅 대가( = 직접인건비 + 제경료 + 기술료 + 직접경비) <br/><br/>\
# 2016 개정 사항 <br/>\
- 상용 SW 유지관리 요율 13% -> 15% 상향 <br/>\
- 정보보호대가 기준 추가 : 정보보호 컨설팅, 보안지속서비스비(최초공급가*요율)<br/>\
- 보안관제 서비스비(투-직제기경)<br/>\
- SW 사업 구축단계 기능점수 측정 사례 추가 : 단위 프로세스, 식별권과 사례, 데이터 기능 식별 사례, 트랜젝션 기능 식별 사례 <br/>\
- 기타 : 용어설명 보완 <br/><br/>\
# 정보보안컨설팅 유형 <br/>\
- 주요 정보통신 기반시설 취약점 분석/평가 <br/>\
- 전자금융~ <br/>\
- 취약점 진단 및 모의 해킹 <br/>\
- 종합정보보호 컨설팅 <br/>\
- 개발 보안 컨설팅 <br/>\
- ISMS <br/>\
- ISO/IEC 27001 <br/>\
- PIMS <br/>\
- PIA <br/><br/>\
# 보안지속 서비스 유형 : 업정위사인기 -> 보안업데이트 , 보안정책관리, 위협 및 사고 분석, 보안 인증 효력 유지, 보안기술자문 <br/><br/>\
# 가치기반 ITO 대가산정 <br/>\
- 측정요소 : 기본규모, 특성규모, 역량규모 <br/>\
- 유형 : 운영관리(시간당) <br/>\
- 개선관리 : ITO기능점수 단가 <br/>\
- 지원관리(노임) <br/>\
- 장애관리 (선택)(시간당)\
',

// 공공빅데이터 분석 사업비
'# 정의 : 데이터 민간 제공 위한 정부 3.0 서비스 <br/>\
- 정부기관의 공공데이터와 인터넷, 민간의 다양한 데이터를 융합하고 분석하여 맞춤형 공공서비스를 제공하기 위한 정부 3.0 서비스 <br/><br/>\
# 구성 <br/>\
- 개발원가 : 직접인건비(보정계수적용) + 제경비 + 기술료 <br/>\
- 직접경비 : 데이터 구매료 등 <br/><br/>\
# 절차 <br/>\
- 사전준비 <br/>\
- 투입공수 산정 <br/>\
- 보정계수 산정 <br/>\
- 수행율 설정 <br/>\
- 보정후 소요비용 산정 <br/>\
- 직접경비 산정 <br/>\
- 분석사업비 산정 \
',

// 공공빅데이터 업무적용 가이드
'# 정의 : 공공기관 빅데이터 추진 가이드 <br/>\
- 공공기관의 빅데이터 접근용이성을 제고하고 원활하게 추진할 수 있도록 작성된 가이드 <br/><br/>\
# 구성 <br/>\
- 사전준비 <br/>\
- 사업추진 <br/>\
- 활용 및 분석 모델 고도화 \
',

// 사업수행계획서
'# 정의 : 프로젝트를 계획하기 위해 작성하는 문서/산출물 <br/><br/>\
# 구성 <br/>\
1. 사업개요 : 사업명, 기간, 목표, 추진전략 <br/>\
2. 사업범위 : 경영평가, DB, 정보 NW, 계량평가, 검증 NW <br/>\
3. 도입제품내역 <br/>\
4. 시스템구축내역 : 목표 Sys 구성도, 업무흐름도, 구축전략 <br/>\
5. 사업추진체계 : 추진체계, 수행조직 및 업무 분장, 참여인력 총괄표, 월별 인력투입 계획 <br/>\
6. 일정 계획 <br/>\
7. 산출물 제공 계획 <br/>\
8. 품질 보증 계획 <br/>\
9. 보고 및 검토 계획 <br/>\
10. 보안대책 <br/>\
11. 교육 계획 <br/>\
12. 유지보수 계획 \
',

// BMT 
'# 정의 : 일반적인 성능 테스트와는 달리 비교 대상을 두고 하드웨어나 소프트웨어의 성능을 비교 분석하여 평가하는 최적 제품 선정 위한 방법 <br/><br/>\
# 절차 <br/>\
- REP, 참여업체 접수 <br/>\
- 평가항목, 방법선정 <br/>\
- 수행 <br/>\
- 성능분석평가 <br/>\
- 최적제품선정 \
',

// POC
'# 정의 : ERP 도입이전 / 업무 프로세스 적합 검증 프로세스 <br/>\
- Proof of Concept <br/>\
- ERP 도입전 RFP이전 단계에서 제안사의 ERP 시스템이 발주사 업무프로세스에 적합한지 요건, 항목을 검증하는 프로세스 <br/><br/>\
# 특징 <br/>\
- 실존 비교 대상 이용 HW, SW 비교 분석 평가 <br/><br/>\
# 절차 <br/>\
- 일정계획 : POC 진행 사전 미팅 (1~2달 이내 수립) <br/>\
- PoC 요청수행 : 설명 및 POC 요청, 기술 검증 실행 <br/>\
- 결과분석, 평가 : POC 결과 대한 기술 검증 내용 분석 수행 및 평가 <br/>\
- 도입, 생산의사 결정 : ERP 도입 프로젝트 진행 의사결정 수행 <br/><br/>\
# 유형 <br/>\
- 사전 인터뷰식 PoC : 사전 인터뷰, ERP 이해 / 대규모 <br/>\
- 시나리오 기반 PoC : 시나리오 선정, 세부 연동 검증 / 중규모 <br/>\
- 3자 검증식 PoC : 컨설팅펌, SW 자무회사 / 소규모 <br/><br/>\
* 123회 응용 1교시 10번\
',

// Pilot test 
'# 정의 : 운영환경과 유사한 시험환경에서 시스템을 부분적으로 사용하여 각 부분적 시스템이 어느 정도 까지 견딜 수 있는지를 확인하는 시험 <br/><br/>\
# 절차 <br/>\
- 일정계획 <br/>\
- Pilot 수행 <br/>\
- 결과분석,평가 <br/>\
- 서비스런칭 의사결정 \
',

// 예비타당성 조사
'# 정의 : 국가 재정법 제38조 및 같은 법 시행령 제13조의 규정에 따라 대규모 신규 사업에 대한 편성 및 기금 운용 계획을 수립하기 위하여 기획재정부장관 주관으로 실시하는 사전적인 타당성 검증, 평가 제도 <br/><br/>\
# 필요성 <br/>\
- 경제적 측면 : 예산낭비 최소화 <br/>\
- 기술적 측면 : 사업 리스크 완화, 사업 취소 방지 <br/>\
- 정책적 측면 : 사업의 우선순위 <br/><br/>\
# 조사 대상 사업 <br/>\
- 사업비 규모 : 총사업비 500억원 이상, 국가의 재정지원 규모 300억원 이상 신규사업 <br/>\
- 정보화 사업대상 : 국가정보화 기본법 15-1 <br/>\
- 신규사업 : 타당성 조사비, 설계비등 국고지원이 없었던 사업 <br/><br/>\
# 절차 <br/>\
<img src = "./img/PreFeasibility.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 선정기준, 수행흐름도<br/>\
<img src = "./img/PreFeasibilityFlow.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 문제점 <br/>\
- 제도적 : 사업선정, 규모변경, 평가 <br/>\
- 현행이슈 : 기술성 평가 연계, 조사대상 사업 확대(강화), 낙후지역 평가 반영 상향(25~30% Up) <br/><br/>\
# 개선방향 <br/>\
- 사업계획적정성 검토의 법적근거 마련 : 사업계획 적정성 검토제도 활용<br/>\
- 대상 기준금액의 변경 논의 : 합리적 의사결정<br/>\
- 사후 평가제도 도입 : 조사기관 독립성 <br/><br/>\
* 116회 2교시 4번\
',
  
// 요구공학
'# 정의 : SW 사용자의 기능적/비기능적 요구사항을 체계적으로 수집,추출,분석,명세화,검증,변경관리하는 절차를 수행하는 공학기법 <br/><br/>\
# 특징 <br/>\
- 추적성 제공 : 요구사항 추적표, 단계적 산출물 추적하여 관리 <br/>\
- 범위기준선 제공 : 범위 정의, WBS 작성하여 기준선 제공 <br/>\
- 일정 및 원가 영향 : 일정, 원가, 예산 산정 기준 <br/>\
- 가시화 제공 : 요구사항 명세서, 범위 기술서를 작성하는 입력물로 가시화 제공 <br/>\
- 다양한 도출기법 : 인터뷰, 포커스 그룹, 심층 워크샵 <br/><br/>\
# 요구사항 종류 <br/>\
- 기능 : 기능, 자료, IF, 사용자 <br/>\
- 비기능 : 자원, 성능, 보안, 품질<br/><br/>\
# 프레임워크 (SWEBOK) : 추분명검변<br/>\
- 추출 : 요구사항 식별,수집,구체화 / 인터뷰, 브레인스토밍 <br/>\
- 분석 : 도메인/행위 분석, 구조화 / 시스템 모델(UML, ERD, 시나리오)<br/>\
- 명세 : 수행될 기능 정확히 기술 / SRS <br/>\
- 검증 : 합의된 요구사항 검토 및 증명 / 요구사항 문서, V&V, 리뷰, 인스펙션 <br/>\
- 변경관리 : 협상, 기준선, 변경관리, 확인(V&V) <br/><br/>\
# CMMi <br/>\
- 요구사항 개발 : 요구사항 추출, 분석, 명세화, 검증 <br/>\
- 요구사항 관리 : 변경관리, 협상, 기준선 관리 <br/><br/>\
<img src = "./img/요구공학.png" style = "max-width:100%; height:auto;">\
',
  
// 요구공학 프로세스
'<img src = "./img/RE_Overview.png" style = "max-width:100%; height:auto;">\
',

// SRS
'# 정의 : 요구사항 도출 및 분석 결과를 명세화한 공식 문서 <br/><br/>\
# 원칙 <br/>\
- Specific <br/>\
- Measurable <br/>\
- Attainable (기술적 타당성) <br/>\
- Realizable <br/>\
- Traceable <br/><br/>\
# 평가기준(TTA 표준) : 완정명일검수추이 <br/>\
- 완전성 : 누락되지 않음<br/>\
- 정확성 : 모든 요구사항 만족시 정확함 <br/>\
- 명확성 : 한 가지 의미로만 해석 <br/>\
- 일관성 : 상,하위 요구사항과 충돌 않음 <br/>\
- 검증가능성 : 성공, 실패 대한 평가기준, 내용 기술 <br/>\
- 수정용이성 : 수정시 다른 요구사항 영향 최소화 <br/>\
- 추적성 : 근거, 산출물 추적 가능한 상태 <br/>\
- 이해가능성 : 쉽게 기술 <br/><br/>\
# 구성요소 (아화요내중) <br/>\
- ID / GA-001 <br/>\
- 화면명 / 전광판 프로그램 <br/>\
- 요구사항명 / 환자 대기 전광판 구현 <br/>\
- 내용 / 접수 부서별 대기표 <br/>\
- 중요도 / 상 <br/>\
- 부서/작성자 / 개발팀 <br/>\
- 날짜 / 11/15 <br/>\
- 진행사항 / 검토예정 <br/>\
- 버전명 / 0.1.1 <br/>\
- 기타 / 기능 <br/><br/>\
# 활동 개념도 <br/>\
<img src = "./img/SRS_GuideLine.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 목차 예시 <br/>\
1. 개요 <br/>\
2. 전체설명 <br/>\
3. 환경 <br/>\
4. 외부인터페이스요구사항 <br/>\
5. 성능 요구사항 <br/>\
6. 비기능 요구사항 <br/>\
7. 기능 요구사항\
',

// 요구사항추적성 
'# 정의 : 시스템 내 서로 다른 단계의 요구사항들 사이에 관계를 제공하는 방법 <br/><br/>\
# 유형 <br/>\
- 추적 매트릭스 : 수평추적성, 수직추적성 / 가로 : Entity <br/>\
- 전방향추적성 : 다음단계체크, V모델 <br/>\
- 후방향추적성 : 앞단계로, 결함원인 추적 \
',

// 요구사항도출 
'# 정의 : 요구,제약사항 파악 활동 <br/>\
- 문제의 해결 또는 목적 달성을 위하여 사용자에 의해 요구되거나, 표준이나 명세등을 만족하기 위하여 시스템이 가져야 하는 서비스 또는 제약사항(명시적,묵시적)을 파악하기 위한 활동 <br/><br/>\
# 기법 : 요구사항의 크기/복잡도, 도메인, 포함된 인원으로 기법 선정 <br/>\
- 인터뷰 : Analyst driven <br/>\
- 설문 : Analyst-Observer driven <br/>\
- 브레인스토밍 : Analyst-Facilitator driven <br/>\
- 관찰 : Analyst-Observer driven \
',
  
// 요구사항 수집기법
'# ITO <br/>\
1. Input <br/>\
- 범위관리계획서 <br/>\
- 요구사항 관리계획서 <br/>\
- 이해관리자 관리계획서 <br/>\
- 이해관리자 관리대장 <br/><br/>\
2. Tool & Tech <br/>\
- 인터뷰 <br/>\
- 포커스 그룹 : 소수 선별 집단 대화 <br/>\
- 심층 워크샵 : 핵심 복합 기능 이해관계자 합의 유도 <br/>\
- 집단 창의력 기법 : 브레인 스토밍 <br/>\
- 집단 의사결정 기법 : 만장일치, 과반수, 다수결, 단독 결정 <br/>\
- 설문지 및 설문조사 : 조사 대상자 다수, 광범위 <br/>\
- 관찰 : 명확히 설명 힘든 경우 사용<br/>\
- 프로토타입 : 기능 중심 모델 <br/>\
- 벤치마킹 : 경쟁사, 선진 업체 참조 <br/>\
- 컨텍스트 다이어그램 문서분석 : 프로세스, 장비, 시스템 / 시스템 사용자 상호작용 가시화 <br/>\
- 문서분석 : RFP, 프로세스 문서 참고 <br/><br/>\
3. Output <br/>\
- 요구사항 문서 <br/>\
- 요구사항 추적 매트릭스 <br/><br/>\
# 유의사항 <br/>\
1. 1단계 <br/>\
- 문서분석 : 최신 자료 반영, 이해 여부 확인 <br/>\
- 현행분석 : 현행 업무 흐름, 문화 파악 시행 <br/><br/>\
2. 2단계 <br/>\
- 인터뷰 : 다양한 관점, 이해관계자 <br/>\
- 전문가 판단 : 전문가의 이론적 지식 적합성 여부 <br/><br/>\
3. 3단계 <br/>\
- 설문조사 : 신뢰도, 타당도 검증, 문항 신뢰성 <br/>\
- 의사결정 기법 : 결정방식 단계화(만장일치 > 다수결) <br/>\
- 가시화 도출 기법 : 데이터 표현 기법, 수치,배율 정확화 <br/><br/>\
* 124회 관리 2교시 3번\
',
 
// 요구사항 상세화 실무 가이드라인
'# 정의 : 사업부실, 품질저하 현실 고려한 사업추진 준비 단계부터 이해관계자들을 파악하여 범위와 요구사항을 명확하게 도출하기 위한 목적으로 달성된 가이드라인 <br/><br/>\
# 근거 <br/>\
- 소프트웨어산업진흥법 제20조 제3항 : 국가기관 등의 소프트웨어사업 계약 <br/>\
- ISO/IEC 14143(FP) : FSM(Functional Size Measurement) <br/><br/>\
# 필요성 <br/>\
- 국내공공 SW제안서 작성수준 <br/>\
- 제안요청서 명확화에 대한 요구 <br/>\
- 불명확한 요구사항이 업계 존폐에 영향 <br/>\
- SW 선진화 기반 마련 <br/><br/>\
# 변경 사항 <br/>\
<img src = "./img/SRS_Specefication.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 대상 사업 <br/>\
- 단계별 : 기획, 구현, 운영, 기타 <br/>\
- 사업유형별 : 컨설팅, 개발, 유지관리, 공사 <br/><br/>\
# 요구사항 명세 도출 과정 <br/>\
<img src = "./img/SRS_Extract.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 요구사항 분류 <br/>\
<img src = "./img/SRS_Type.png" style = "max-width:100%; height:auto;"><br/><br/>\
* KPC 93회 관리 2교시 5번\
',

// 정형기술검토
'# 정의 : 요구사항 / 표준, 방식, 관리 / 검토 활동<br/>\
- Formal Techinical Review <br/>\
- 소프트웨어 개발 요구사항과 일치하는지 미리 정의된 표준에 따라 표현되었는지, 균일한 방식으로 개발되고 있는지, 철저한 관리가 이루어지고 있는지 검토하는 활동 <br/><br/>\
# 종류 <br/>\
1. Peer Review <br/>\
- 개념 : 동료 상호 검토 활동 <br/>\
- 절차 : 계획 > 사전준비 > 개별검토 > 검토회의 > 재작업 > 후속조치 <br/><br/>\
2. Inspection <br/>\
- 개념 : 프로그램 실행x, 산출물, 공식적 검토 <br/>\
- 구성요소 : 이해관계자, 중재자, 독자(산출물 Reader), 기록자 <br/><br/>\
3. Walkthorugh <br/>\
- 개념 : 비공식 검토 방법 <br/>\
- 구성요소 : 내부인원, 결함 해결책 진행 <br/><br/>\
<img src = "./img/FTR_Compare.png" style = "max-width:100%; height:auto;">\
',
 
// 기술사양서 
'# 정의 : 운용상 특정한 기능이 있는 품목에 대한 실질적 설계의 개발과 생산 과정을 위하여 기초가 되는 기술적인 소요를 적절한 용어로 상술한 문서 <br/><br/>\
# 구성요소 <br/>\
- 구매와 관련된 제반 사항 공유 <br/>\
- 용역 발주시 환경, 제약조건 명시 <br/>\
- 구매제품 목록 및 상세규격 제시 <br/>\
- 제품의 검수 및 인도조건 기준 <br/><br/>\
* 120회 응용 2교시 3번\
',
  
// 경제성 분석기법
'# 정의 : 규모, 경험, 범위 <br/>\
- 비용과 편익을 측정하고 이에 따라 경제성 수익을 계산함으로써 그 타당성 여부를 결정하는 분석방식 <br/><br/>\
# 유형 <br/>\
1. 타당성 분석 <br/>\
- BCR(Benefit Cost Ratio) : 비용 편익 비율 (수익/비율) <br/>\
- PP(Paybak Period) : 자본 회수 기간 <br/>\
- IRR(Internal Rate of Return) : 내부 수익율, 시장 이자율보다 높아야 함 <br/>\
- NPV(Net Present Value) : 순 현재 가치, 0보다 크면 투자 가치 있음 <br/><br/>\
2. 효율성 분석 <br/>\
- TCO(Total Cost of Ownership) : 총 소요비용 <br/><br/>\
3. 효과성 분석 <br/>\
- ROI(Return On Invetment) : 투자 수익율, 순이익 / 투자자본 <br/>\
- BSC(Balence Score Card) : 재무, 고객, 내부프로세스, 학습과정\
',
 
// NPV
'# 정의 : 수익율 할인 <br/>\
- Net Present Value <br/>\
- 순현금흐름을 적절 수익율로 할인하는 기법 <br/><br/>\
# 계산방법 <br/>\
<img src = "./img/NPV_Formal.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 라이지움 88회 관리 2교시 5번\
',
  
// 안전성 보증 프로세스
'# 개념 : 안전성 분석, 개발 프로세스 확인, 시각화 절차 <br/>\
- SW 개발시 안전성 분석, 개발 프로세스 Verification, 시각화 절차를 기준으로 SW 안전성을 보증하는 프로세스 <br/><br/>\
# 절차 <br/>\
1. 안전성 분석 <br/>\
- 사고원인 모델링 : Chain of Event, STAMP <br/>\
- Hazard 분석 : 위험상황 미리 예측, 예방 (FTA, FMEA, HAZOP) <br/><br/>\
2. 안전성 보증 개발 프로세스 <br/>\
- 안전성 확보 설계 : Layere Architecture, 임베디드 SOLID, 의존성 제약 <br/>\
- 소스코드 품질 확보 : 높은 응집도, 낮은 결합도, 적절한 컴포넌트 크기 <br/><br/>\
3. 안전성 Gate <br/>\
- SGM(Software Gate Model) : 안전성 보증 통합 모델 (CMMI, A-SPICE등) <br/><br/>\
4. SW 시각화 <br/>\
- 개발초기 시각화 : 초기 가시화 통한 실패비용 절감 <br/>\
- 시각화 툴 사용 : Jenkins, JIRA <br/><br/>\
5. 안전성 Verification <br/>\
- 안전성 검증 테스트 체계 : 안전성 요구사항, 우선순위 따른 수행 <br/>\
- 정형 검증 기법 : 수학적, 논리학적 분석 <br/><br/>\
* KPC 92회 응용 2교시 8번\
',
  
// 소프트웨어 안전성 분석
'# 정의 : 안전성 만족 확인 활동 / 안전 필수 시스템 개발시 <br/>\
- <font color = "red">Fool Proof, Fail Safe</font><br/>\
- 안전 필수 시스템 개발시 시스템이 만족해야 할 안전성을 만족하는지 확인하는 활동<br/>\
<font color = "red">* SW 안전성 : ISO/IEC GUIDE 51, 수용할 수 없는 위험이 없는 상태 </font><br/><br/>\
# 안전성 분석 절차 (IEC 61508) <br/>\
<img src = "./img/SSA_Order.png", style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/SSA_1.png", style = "max-width:100%; height:auto;"><br/><br/>\
# 필요성 : 시스템 변화, 사회 안전, 비용 절감 <br/><br/>\
# 유형 <br/>\
1. 요구분석/설계 단계 <br/>\
- FMEA(Failure Mode and Effects Analysis) : 고장모드 예방 / FMEDA - Diagnosis <br/>\
- HAZOP(Hazard and Operatbility Analysis) : 모듈 당 안전 직접적 영향 분석 <br/>\
- FTA(Fault Tree Analysis) : 근본원인을 중심, TopDown으로 도출하는 Fault Tree 구성 <br/><br/>\
2. 개발단계 <br/>\
- White box : 구조기반<br/>\
- Black box : 명세기반<br/><br/>\
3. 요건 충족 단계 <br/>\
- 정형명세 : 수학적 표기, 가시화 도구 <br/>\
- 정형검증 : 정리 증명, 모델 체킹 <br/><br/>\
4. 산출물 검토 단계 <br/>\
- 명세서 검증 : DFD, DD, Mini-Spec <br/>\
- 디자인 검증 : 전문가 참여, 브레인 스토밍 / 라이팅 <br/>\
<font color = "red">* DFD(Data Flow Diagram) </font><br/><br/>\
* 119회 관리 4교시 4번\
',
  
// FMEA, FTA, HAZOP
'# 개념 <br/>\
- FMEA(Failure Mode and Effects Analysis) : 고장모드 예방<br/>\
- HAZOP(Hazard and Operatbility Analysis) : 모듈 당 안전 직접적 영향 분석 <br/>\
- FTA(Fault Tree Analysis) : 근본원인을 중심, TopDown으로 도출하는 Fault Tree 구성 <br/><br/>\
# FMEA : 고장 발생의 원인 및 중대 사고에 영향 미치는 직접적인 원인 서브시스템이나 컴포넌트 잠재적 고장 유형 분석 기법 <br/>\
- 시스템 영향 정량적 분석 : 심각도 / 발생도 / 검출도, 고장으로 인한 시스템 영향 <br/>\
- 우선순위(RPN) 부여 : 분석결과 따라 우선순위 부여하여 대응방안 수립 <br/>\
- 식별, 정의, 제거 : 고장, 문제, 오류 사용자단 도착전 찾고, 정의, 제거 <br/><br/>\
# FTA : 특정 사고에 대한 연역적 해석 통한 사건 사고의 원인 파악, 설비결함, 작업 실수등 발견 및 분석 하는 기법 <br/>\
- Scope 정의 : 소프트웨어 논리적 기능적 인터페이스 구조 확인 <br/>\
- 위험 식별 : 결함 트리 구성 위한 취상위 위험, 근본 원인 결정 <br/>\
- 결함트리 작성 : 고장에 대한 논리적 연결 <br/>\
- 결함트리 분석 : 정성적(Minimal Cut-Set 분석), 정량적(빈도, 확률 기반 Minimal Cut-Set 분석) <br/><br/>\
# 상세 비교 <br/>\
<img src = "./img/FMEA_FTA_HAZOP.png", style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/SW_Stable.png", style = "max-width:100%; height:auto;"><br/><br/>\
* 123회 관리 1교시 10번 <br/>\
* 라이지움 88회 응용 4교시 5번 <br/>\
* KPC 96회 관리 1교시 5번\
',

// HAZOP
'# 정의 : 전문가 모여 / 공정변수 / 가이드 워드 / 이탈원인 / 영향 분석 / 안전성 분석기법 <br/>\
- HAZard and OPerability analysis <br/>\
- 대상에 관련된 전문가들이 모여 공정변수와 가이드워드의 조합을 통해 이탈의 원인 및 영향을 분석하는 안전성 분석기법 <br/><br/>\
# 유형 <br/>\
- 프로세스 HAZOP : 공장 시설, 프로세스 시스템 평가 <br/>\
- 휴먼 HAZOP : 특화된 HAZOPs 한 계열, 기술적 실패 보다 인적 에러 더 집중 <br/>\
- 프로시저 HAZOP : 절차 또는 운용 시퀀스 검토 / SAFOP(SAFe Operation Study) 로 표기 <br/>\
- 소프트웨어 HAZOP : 소프트웨어 개발에서의 가능한 에러 식별 <br/><br/>\
# 구성요소 <br/>\
- 평가 방식 : 이탈 = 공정변수 * 가이드 워드 <br/>\
- 이탈 : 설계 의도에서 벗어난 상태 (사람, 장비, 외부) <br/>\
- 공정변수 : 특정변수(가이드 워드와 조합), 일반변수(단독 이탈 발생) <br/>\
- 가이드워드 : 설계 의도, 변수 관계 정도 (없음, 증가, 감소, 반대, 부가, 부분, 기타) <br/><br/>\
# 절차 <br/>\
- 목적, 범위 설정 : 분석 목적, 검토 범위 설정 <br/>\
- 분석 팀 구성 : 관련 전문가 팀 구성(리더, 팀원) <br/>\
- 예비 조사 : 자료 수집, 분석 절차 수립 <br/>\
- 토론 및 검토 : Study Node, 공정변수, 가이드워드 조합, 브레인 스토밍 <br/>\
- 분석 결과 기록 : 이탈 원인, 결과 개선 권고사항등 기록 <br/><br/>\
* 123회 관리 1교시 10번\
',

// 모듈화
'# 정의 : SW 설계, 구현 기법 / 기능 분할 / 추상화 / 성능 / 유지보수 <br/>\
- SW 개발에 있어 기능을 분할하고 추상화하여 소프트웨어의 성능을 향상시키고 유지보수를 효과적으로 하기 위한 SW 설계 및 구현 기법<br/><br/>\
# 암기 <br/>\
- 설계 : 모컴서 <br/>\
- 구현 : 메전인컴펑 <br/><br/>\
- 전자조달 중 전자입찰 효과성 -> 재사용 효과 11억 <br/><br/>\
# 기법 <br/>\
1. 설계 : 모컴서 <br/>\
- module : function <br/>\
- 컴포넌트 : 바이너리 형태 <br/>\
- 서비스 : 컴포넌트보다 Loosely-coupled <br/>\
2. 구현 : 메전인컴펑 <br/>\
- Macro : 전처리기가 코드로 대체, 함수 호출 위치 함수 처리문장 삽입 컴파일, 너무 길면 함수와 동일, 속도향상, 파일 크기 증가  Ex) #define SQUARE(X)(X*X)) <br/>\
- Inline : 컴파일러 코드 복사, 프리프로세서 정의된 문자열 치환, 번역시간 내부코드 생성,간결,쉬움,처리시간 증가 Ex) Inline int max (arg1,arg2){...}<br/>\
- Function : 특정 작업수행 프로그램 부분단위, Call 이름 가짐, 간단한 문자열, 메모리사용 증가 Ex) void func(arg1,arg2,...)<br/><br/>\
# 임베디드 환경의 모듈화 <br/>\
- 실행시간 최적화 : 인라인 함수 사용, 간접 함수 호출, 적절 전역변수 사용 <br/>\
- 코드크기 최적화 : 표준 LibX, 스택사용 줄이기 <br/><br/>\
<img src = "./img/모듈화_1.png" style = "max-width:100%; height:auto;">\
',

// [모듈화]- 응집도 
'# 정의 : 모듈 내 / 목적 수행 요소 / 연관성 정도 <br/>\
- Cohesion <br/>\
- SRP, ISP <br/>\
- 어느 한 모듈이 하나의 목적을 수행하는 요소들 간의 연관성의 정도(척도) <br/><br/>\
# 유형 : 응집도는 높을수록 좋음 (<font color = "red">우논시절통순기</font>)<br/>\
- 우연 : 목적없이 여러 기능을 한 모듈로 구성(낮음) <br/>\
- 논리 : 동일범주의 기능을 한 모듈로 구성 (switch case a:b:)<br/>\
- 시간 : 동일시점의 기능을 한 모듈로 구성 (init()) <br/>\
- 절차 : 각 기능이 순차적 수행되는 모듈 (init() look() end()) <br/>\
- 통신 : 각 기능이 동일 입출력 모듈 사용 (A(a) B(a)) <br/>\
- 순차 : 전 단계의 결과값을 입력으로 사용 (t=A(a), B(t)) <br/>\
- 기능 : 단일 기능만 수행하는 모듈 (높음) <br/>\
',

// [모듈화]- 결합도 
'# 정의 : 모듈간 / 의존관계 정도 <br/>\
- Coupling <br/>\
- OCP, LSP, DIP <br/>\
- 어느 한 모듈의 다른 모듈에 의존관계를 가지는 정도(척도) <br/><br/>\
# 유형 : 결합도는 낮을 수록 좋음 (<font color = "red">자스제외공내</font>)<br/>\
- 자료 : 모듈간 단순 매개변수 전달 (낮음) (void loca(int a);) <br/>\
- 스탬프 : 모듈간 자료구조 전달 (funtion(struct A))) <br/>\
- 제어 : 컨트롤 데이터를 매개변수로 사용 (if(a==1)) <br/>\
- 외부 : 모듈이 외부자료 참조 (#include a.pc) <br/>\
- 공유 : 모듈이 전역변수 참조 (static int a)<br/>\
- 내용 : 다른 모듈의 내용 참조 (goto A) (높음) <br/><br/>\
<img src = "./img/Coupling_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/Coupling_2.png" style = "max-width:100%; height:auto;">\
',

// 소프트웨어 아키텍처
'# 정의 : 프로그램/시스템 컴포넌트, 컴포넌트 / 상호관계 구조 / 설계 지침 원리 <br/>\
- 프로그램/시스템 컴포넌트, 컴포넌트 간의 상호관계 구조이며 이들을 설계하기 위한 지침과 원리 <br/><br/>\
# 특징 <br/>\
- 비즈니스 측면 : 변화 민첩성, 비용 절감, 표준화 <br/>\
- 기술적 측면 : 의사소통 수단, 간략성, 관점(Aspect) 모형 <br/><br/>\
# 구성요소 <br/>\
- Architecture Description : 아키텍처 기록 위한 산출물 <br/>\
- 이해관계자 : SW 개발 관련된 사람, 조직 <br/>\
- 관심사 : 이해관계자들이 가지는 서로다른 의견, 목표 <br/>\
- 관점 : 역할, 책임, 이해관계자들 관점 <br/>\
- View : 생각, 견해로부터 전체 시스템 표현 <br/><br/>\
# Process <br/>\
<img src = "./img/SWArchitectureProcess.png" style = "max-width:100%; height:auto;"><br/>\
1. 정방향 분석 <br/>\
- 개념 : 초반 의사결정, 상세 설계 <br/>\
- 특징 : 일관성 유지, 위험 예방 <br/>\
- 기법 : ATAM, CBAM, ADR, ARID <br/><br/>\
2. 역방향 분석 <br/>\
- 개념 : 역공학 시스템 통합 <br/>\
- 특징 : 품질 관리 이해도 향상 <br/>\
- 기법 : 지표 분석, 관계 분석, 시각화 분석 <br/><br/>\
* ITPE 6회 관리 4교시 1번\
',

// ISO/IEC/IEEE 42010
'# 정의 : 아키텍처 설명 / 요구사항, 표준 용어 정의 / 요소간 관계 표준 메타 모델 <br/>\
- 시스템, 소프트웨어 및 엔터프라이즈 아키텍처 설명에 대한 요구사항/표준 용어 정의 요소간 관계 표준 메타 모델 <br/><br/>\
# 개념도 <br/>\
<img src = "./img/ISOIECIEEE42010Model.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 중요성 <br/>\
- 표준화 : 용어 및 개념 통일 <br/>\
- 중립성 : 모델링 언어, 방법론 제시 않음, 상위레벨 표현 <br/>\
- 유연성 : 다양한 규모 적용 가능 <br/>\
- 의사소통 : 요구사항/설계 차이 개선, 이해관계자 관점 표현 <br/><br/>\
# 아키텍처 프레임워크 <br/>\
- IEEE 42010 : IEEE 1471 과 통합 <br/>\
- IEEE 1471 : SW 엔지니어링 아키텍처 기술 관련 용어 개념 정의 표준 <br/><br/>\
# 구성요소 <br/>\
1. 식별 <br/>\
- 대상 시스템 : App, Sub System <br/>\
- 이해 관계자 : System Concern 갖고 있는 개인, 기관 등 <br/>\
- 관심사 : 시스템에서의 관심 사항 <br/><br/>\
2. 표현 <br/>\
- 모델형 : 모델링 타입 방식 <br/>\
- 아키텍처 : 환경에서 시스템의 기본 개념 또는 속성 <br/>\
- 아키텍처 기술 : 아키텍처 표현에 사용되는 방법 <br/><br/>\
3. AD Part <br/>\
- View Point : 규칙 정의 패턴, 템플릿 <br/>\
- Model : 생각, 견해로부터 시스템 표현 <br/>\
- 결정 근거 : 선택, 설계된 아키텍처 대한 논리적 근거 <br/>\
- 대응 관계 규제 : View 들간의 규칙 <br/>\
- 대응 관계 : 이해관계자 관심 따른 대응 관계 <br/><br/>\
# IEEE 1471와 비교 설명 <br/>\
<img src = "./img/IEEE1471ISOIECIEEE42010.png" style = "max-width:100%; height:auto;"><br/><br/>\
* KPC 96회 응용 1교시 15번\
',


// [소프트웨어 아키텍처]- 아키텍처 평가
'# 정의 : 요구 충족 여부 / 아키텍처 수준 평가 절차 <br/>\
- 제시된 소프트웨어 아키텍처가 개발될 소프트웨어에 대해서 요구되는 품질 특성을 충족시킬 수 있는지 아키텍처 수준에서 평가하는 절차 <br/><br/>\
# 배경 : 1(설계) : 10(개발) : 100(유지보수) <br/><br/>\
# 유형(<font color = "red">시시수경</font>) <br/>\
- 시나리오 기반 : 미리 정의된 Profile 의존 평가 (ATAM, SAAM, CBAM) <br/>\
- 시뮬레이션 기반 : BMT <br/>\
- 수학적 기반 : 기준 모델 수치화 평가 <br/>\
- 경험 기반 : 정량적 분석 어려운 경우 <br/><br/>\
<img src = "./img/SW_Architecture_평가모델.png" style = "max-width:100%; height:auto;">\
',

// SAAM
'# 정의 : 최초 정리 평가 방법 <br/>\
- Software Architecture Analysis Method <br/>\
- 최초로 정리된 평가방법, 다양한 수정가능성들의 관점에서 아키텍처 분석 <br/><br/>\
# 특징 : 변경용이성, 기능성 <br/><br/>\
# 절차 (<font color = "red">개아분간상종</font>)<br/>\
1. 시나리오 개발 <br/>\
2. 아키텍처 설명 <br/>\
3. 시나리오 분류와 우선순위 결정 <br/>\
4. 간접 시나리오 평가 <br/>\
5. 시나리오 상호작용 평가 <br/>\
6. 종합평가 \
',

// ATAM 
'# 정의 : 품질 속성 관계 분석 도구 <br/>\
- Architecture Trade-Off Analysis Method <br/>\
- 아키텍처가 품질속성을 만족하는지 판단할 뿐 아니라 어떻게 상충하면서 상호작용하는지를 분석하는 아키텍처 평가방법 <br/><br/>\
# 특징 : 품질속성 Trade Off <br/>\
- 가용성, 보안성, 성능, 사용성, 변경가능성, 시험가능성 <br/><br/>\
# 절차 <br/>\
1. 1차 평가 (<font color = "red">A동소식품분</font>)<br/>\
- ATAM 소개 <br/>\
- 비즈니스 동인 소개 <br/>\
- 아키텍처 소개 <br/>\
- 아키텍처 접근법 식별 <br/>\
- 품질속성 유틸리티 트리 작성 <br/>\
- 아키텍처 접근법 분석 <br/><br/>\
2. 2차 평가 (<font color = "red">브아결</font>)<br/>\
- 브레인 스토밍과 시나리오 우선순위 결정 <br/>\
- 아키텍처 접근법 분석 반복 <br/>\
- 결과 발표 \
',

// CBAM 
'# 정의 : 비용, 일정 관계 파악, 전략적 비용 측정 <br/>\
- Cost Benefit Analysis Method <br/>\
- ATAM 에서 부족한 경제적 평가 부분을 보강한 프로세스 <br/>\
- 비용과 일정간의 관계를 파악하여 아키텍처 전략적 비용 측정 <br/><br/>\
# 절차 (<font color = "red">결효이선</font>)<br/>\
1. 시나리오 결정 <br/>\
2. 효용-반응값 곡선 작성 <br/>\
3. 아키턱체 접근법 전체 이익 계산 <br/>\
4. 아키텍처 접근법 선정과 검증 \
',

// ADR
'# 정의 : 검토자 실습 문제 풀이 / 응집도 높은 상세 평가 (사용하고 있는 모듈, 컴포넌트) <br/>\
- Architectural Design Review <br/>\
- 검토자의 실습문제 풀이에 기초한 SW 아키텍처 평가 기법, 아키텍처간의 응집도가 높은 상세 평가에 적용 <br/><br/>\
# 특징 <br/>\
- SW 품질과 상세 설계 적합성 검증 <br/>\
- 모듈/컴포넌트 상세 설계 검토 <br/>\
- 서술식 질문으로 설계자 참여 유도\
',

// ARID
'# 정의 : 완성되지 않은 부분 초기 평가 <br/>\
- Active Reviews for Intermediate Designs <br/>\
- <font color = "red">완성되지 않은 부분(설계 진행 부분)</font> 아키텍처를 아키텍처 설계 초기에 평가하는 방법 <br/><br/>\
# 특징 <br/>\
- 특정부분 품질요소 집중 <br/>\
- ADR + ATAM \
',

// 유틸리티 트리 
'# 정의 : 하향식 품질속성 도출기법 <br/>\
- 일반적인 문제에서 특정 상황으로 접근하며 품질속성 목표파악/속성 간 우선순위 결정을 지원하는 품질속성 시나리오 도출기법 <br/>\
- ATAM 기반 SW 아키텍처 평가 방법에서 비기능적 품질 속성 간 중요도, 영향도 등을 파악하기 위한 트리 <br/><br/>\
# 목적 <br/>\
- 품질속성 결정 <br/>\
- 시나리오 도출<br/>\
- 아키텍처 평가 <br/><br/>\
# 구성 <br/>\
- 유틸리티 <br/>\
- 품질속성 <br/>\
- 세분화한 품질속성 <br/>\
- 시나리오 <br/><br/>\
# 이해관계자 <br/>\
- 검증팀 <br/>\
- 프로젝트 리더 <br/>\
- 평가자 3~5명 \
',

// 아키텍처 드라이버 
'# 정의 : 요구사항 속성 중 / 아키텍처 구성에 영향 / 항목, 요구사항 <br/>\
- 소프트웨어 요구사항을 수행하는 기능적, 품질적, 성능에 영향을 주는 속성, 서비스 요구사항 중에서, 아키텍처 구성에 영향을 주는 항목 혹은 요구사항 <br/><br/>\
# 구성요소 <br/>\
<img src = "./img/SoftwareArchitectureDriver.png" style = "max-width:100%; height:auto;"><br/>\
- Functional Requirements : 시스템이 수행해야 하는 기능 <br/>\
- Constraints : 사전에 고려해야 하는 시스템 영향 주는 요구사항 <br/>\
- Quality Attributes : 비기능 요구사항 <br/><br/>\
# 절차 <br/>\
- 목표 설정 : 최우선 목표 설정(개수 최소화) <br/>\
- 요구사항 변환 : 목표 Quality scenario, Use case 목록변환 <br/>\
- 요구사항 정제 : 영향 큰 요구사항 선정 <br/>\
- 설계 시작 : 아키텍처 설계 시작 <br/><br/>\
# 아키텍처 설계뷰 작성 과정 <br/>\
<img src = "./img/ArchitectureDesignView.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 라이지움 84회 1교시 1번\
',
  
// 소프트웨어 아키텍처 모델, 패턴, 스타일
'# 정의 : 문제 해결 / 품빌 속성 달성 / Best Practice 정리 패턴 <br/>\
- 아키텍처 설계에서 반복적, 일반적 발생 문제를 해결하고 아키텍처가 만족시켜야 하는 시스템 품질 속성 달성 위한 Best Practice를 정리한 패턴 <br/><br/>\
# 기능 <br/>\
- 기본 스키마 제시 <br/>\
- 서브시스템 제공 <br/>\
- 패턴간 책임 명시 <br/>\
- 가이드라인 제시 <br/>\
- 모듈단위 분해방법 제시 <br/>\
- 모듈단위 상호작용 방법 제시 <br/><br/>\
# 유형 분류 <br/>\
1. 기능 분할과 배치 <br/>\
- 데이터 중심 모델 : 중앙 집중 <br/>\
- 클라이언트/서버 모델 : 분산 <br/>\
- 계층적 모델 : 접근층 나눔, 등급 부여 (사용자, 응용, 관리자 등...) <br/>\
- MVC 모델 : Model(Data 집중), View(사용자 작업), Controller(연결 제어 장치) <br/><br/>\
2. 제어 관계 <br/>\
- 데이터 흐름 모델 : 하향식 디자인, 각 프로세스(원모양) 세부내용 하위 분해 <br/><br/>\
# 10대 패턴별 비교 <br/>\
<img src = "./img/SWArchitecturePatternCompare.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 120회 관리 3교시 5번\
* 116회 관리 4교시 4번\
',
  
// 데이터 중심형 모델
'# 개념 : Repository, Data <br/>\
- 서브시스템이 단일 중앙저장소의 자료를 접근하고 변경하는 모델 <br/><br/>\
# 모델구조 <br/>\
<img src = "./img/DataCentralized.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 특징 <br/>\
- 장점 : 대용량 데이터 공유, 독립적 동작 및 통합 용이 <br/>\
- 단점 : 병목현상 <br/>\
- 사례 : 급여관리 시스템, 은행업무 시스템 <br/><br/>\
* 116회 4교시 4번\
',
  
// 클라이언트 서버 모델
'# 개념 : 네트워크를 이용하는 분산시스템 모델의 형태로 데이터와 처리기능을 클라이언트와 서버에 분할하여 사용하는 모델 <br/><br/>\
# 모델구조 <br/>\
<img src = "./img/ClientServer.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 특징 <br/>\
- 장점 : 정보들이 분산되어 유지와 관리되는 인터넷 환경에 적합, 정보의 갱신과 수정이 용이 <br/>\
- 단점 : 중앙집중적인 통합관리가 어려움 <br/>\
- 사례 : 이메일, 문서공유, 온라인 App <br/><br/>\
* 116회 4교시 4번\
',

// 계층 모델
'# 개념 : 각 서브 시스템이 하나의 계층이 되어 하위계층이 제공하는 서비스를 상위계층의 서브시스템이 사용하는 모델구조 <br/><br/>\
# 모델구조 <br/>\
<img src = "./img/HireachyArcitecture.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 특징 <br/>\
- 장점 : Lossely Coupled, 모듈 재사용성, 유지보수성, 이식성 <br/>\
- 단점 : 성능저하, 계층별 분리 따른 설계수정 발생 <br/>\
- 사례 : OSI7 Layer, 가상머신 <br/><br/>\
* 116회 4교시 4번\
',
  
// MVC 모델 
'# 개념 : 인터페이스,비즈니스 로직 분리 / 아키텍처 패턴 <br/>\
- 모델, 뷰, 컨트롤러로 구성되어 사용자 인터페이스/비즈니스 로직 분리 아키텍처 패턴 <br/><br/>\
# 모델구조 <br/>\
<img src = "./img/MVC.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 역할 및 기능 <br/>\
- Model : 컨트롤러, 뷰에 정보 통보 <br/>\
- View : 사용자 볼 결과물 생성, 모델로부터 정보 얻음 <br/>\
- Controller : 모델에 명령, 모델 상태 변경 <br/><br/>\
# 절차 <br/>\
- 모든 입력 Controller 처리 <br/>\
- Controller 는 Model 조작 및 표현할 View 선택 <br/>\
- Controller View 관계 : N : 1 <br/>\
- View 는 Model을 이용하여 업데이트 수행 <br/><br/>\
# 특징 <br/>\
- 사례 : Struts, Spring F/W <br/>\
- 이벤트 감지 방법 : Model 직접 사용, Model 에게 View Notify, View Polling <br/>\
- 장점 : Simple 구조 <br/>\
- 단점 : View Model 간 의존성, 가독성,유지보수 난해 <br/><br/>\
* 116회 4교시 4번\
',

// MVP 모델
'# 정의 : Model View, Presenter <br/>\
- 기존의 MVC Coupling 현상 제거한 아키텍처 패턴 <br/><br/>\
# 역할 및 기능 <br/>\
- Model : View에 맞는 모델 정보 생성 <br/>\
- View : 모델 정보 Presenter로 부터 얻어옴 <br/>\
- Presenter : Model, View 사이 가교 역할 <br/><br/>\
# 개념도 <br/>\
<img src = "./img/MVP_Model.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 절차 <br/>\
- 모든 입력은 View에서 처리 <br/>\
- View에서 이벤트 발생하면 Presenter에 전달 <br/>\
- Presenter는 이벤트에 따른 Model 조작, View 통보,Update <br/><br/>\
# 특징 <br/>\
- 사례 : Android MVP, Google Architecture <br/>\
- 장점 : Presenter 통한 Model, View 완전히 분리 <br/>\
- 단점 : View-Presenter 의존성 존재, Class 수 증가 \
',

// MVVM 모델
'# 정의 : Model + View + View Model 합친 패턴 <br/>\
- View Model 통한 기존 View-Presenter Coupling 제거 아키텍처 패턴 <br/><br/>\
# 역할 및 기능 <br/>\
- Model : ViewModel 사용하여 View 자동 업데이트 수행 <br/>\
- View : 뷰모델 바인딩, 업데이트 <br/>\
- ViewModel : View 나타내주기 위한 Model (1:N) <br/><br/>\
# 개념도 <br/>\
<img src = "./img/MVVM_Structure.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 절차 <br/>\
- View 를 통한 입력 <br/>\
- ViewModel을 선택하여 바인딩, 업데이트 수행 <br/>\
- 바인딩 후, View 속성과 View Model 속성 연결, 자동 업데이트 <br/><br/>\
# 특징 <br/>\
- 장점 : Command, Data Binding으로 View와 의존성 분리 <br/>\
- 단점 : View Model 설계 어려움 \
',

// Vue.js
'# 정의 : 웹 애플리케이션 UI / OSS Progressive JS FW <br/>\
- 웹 애플리케이션의 사용자 인터페이스를 만들기 위해 사용하는 오픈 소스 프로그레시브 자바스크립트 프레임워크 <br/><br/>\
# 구성도 <br/>\
<img src = "./img/VueJS.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 구성요소 <br/>\
- View(DOM) : HTML Tag, Class, Attribute Data Tree <br/>\
- ViewModel(DOM Listener) : DOM 즉각 반응, 특정 로직 수행 <br/>\
- Model : 데이터 공간, JS Object 형태 저장 <br/><br/>\
# JavaScript Based Framework 비교 <br/>\
<img src = "./img/AngularReactVue.png" style = "max-width:100%; height:auto;"><br/><br/>\
* ITPE 합숙 124회 3일차 관리 1교시 4번\
',
 
// Pipe&Filter Model
'# 정의 : 프로세스뷰 기반 아키텍처 다이어그램 <br/>\
- 연속 컴포넌트들에 의한 데이터의 점진적 변형 구조 <br/><br/>\
# 특징 <br/>\
- 파이프 : 필터간 단순한 데이터 이동 <br/>\
- 필터 : 데이터 스트림 변환기 <br/><br/>\
<img src = "./img/PipeFilter.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 120회 관리 3교시 5번\
',
 
// Batch Process Model
'# 정의 : 컴포넌트들이 독립적인 프로그램으로 구성 <br/>\
- 한 컴포넌트가 수행 완료후 다음 컴포넌트 수행하여 전통적 데이터 처리 응용분야에 사용되는 아키텍처 모델 <br/><br/>\
<img src = "./img/BatchProcess.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 120회 관리 3교시 5번\
',

// Blackboard Pattern
'# 정의 : 명확 해결전략 x / 해결 위한 패턴 <br/>\
- DNA, 감정분석등 명확한 해결전략이 없는 문제를 해결하기 위한 패턴 <br/><br/>\
# 개념도 <br/>\
<img src = "./img/BlackboardPattern.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 구성요소 <br/>\
- 블랙보드 영역(솔루션 영역) : 문제 해결 위한 객체 수집 영역 <br/>\
- 지식 소스 : 특정/특별 모듈들의 집합 <br/>\
- 제어 컴포넌트 : 지식소스 모듈의 제어 \
',

// [소프트웨어 아키텍처]- 품질속성
'# 정의 : SW 아키텍처가 만족시키고자 하는 품질 요구사항 <br/><br/>\
# 암기 <br/>\
- 시비아 <br/>\
- 시 : 가변성보시사 <br/>\
- 비 : 시비생신노목 <br/>\
- 아 : 무정완개 <br/><br/>\
# 유형 <br/>\
- 시스템 : 가용성, 변경용이성, 성능, 보안, 시험용이성, 사용성 <br/>\
- 비즈니스 : 시장적시성, 비용과이익, 시스템프로젝트 생명주기, 신규발매일정, 노후 시스템 통합, 목표 시장 <br/>\
- 아키텍처 : 무결성, 정확성, 완전성, 개발용이성 <br/><br/>\
* ISO/IEC 9129 (기신사효유이) : 기능성, 신뢰성, 사용성, 효용성, 유효성, 이식용이성 <br/>\
* ISO/IEC 25020 (기신효유이유호보) : 기능적합성, 신뢰도, 수행효율성, 유용성, 이동성, 유지가능성, 호환성, 보안<br/>\
(SQuaRE : Systems and software Quality Requirements and Evaluation)\
',

// [소프트웨어 아키텍처]- 품질속성 시나리오
'# 정의 : 품질속성 생성 도구 / 요구사항 명세 / <br/>\
- 특정 품질에 대한 요구사항을 명세한 것으로 시스템 품질속성에 대한 요구사항을 생성하는데 도움을 주는 도구 <br/><br/>\
# 암기 : 자자대환반측 <br/><br/>\
# 구성 : 자극원(Source), 자극(Stimulus), 대상체(Artifact), 환경(Environment), 반응(Response), 측정(Measurement) <br/><br/>\
# 가용성 에시 <br/>\
- so : 시스템 외부 <br/>\
- st : 백만접속 <br/>\
- ar : 프로세스 <br/>\
- en : 정상동작 <br/>\
- re : 저하모드변환 <br/>\
- me : 5초이내 응답 <br/><br/>\
# 보안성 예시 <br/>\
- so : 정삭식별유저 <br/>\
- st : 로그인 <br/>\
- ar : 유저데이터 <br/>\
- en : 정상동작 <br/>\
- re : 접속이력저장 <br/>\
- me : 접속로그 즉시 저장 \
',

// [소프트웨어 아키텍처]- 아키텍처뷰
'# 정의 : SW 아키텍처를 바라보는 시각에 따른 표현방법 <br/><br/>\
# 암기 <br/>\
# 종류(3) : PSU <br/>\
- Perry, Wolf\'s View : 요소, 표현, 근거 <br/>\
- Shaw, Galen\'s View : 컴포넌트, 커넥터, 패턴 <br/>\
- UML의 4+1 View (1998) <br/>\
<img src = "./img/ArchView_0.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/ArchView_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/ArchView_2.png" style = "max-width:100%; height:auto;">\
',

// Kruchten\'s 4 Plus 1 View
'# 정의 : Logical, Physical, Process, Developer, Scenarios / 집약적 시스템 아키텍처 / view model <br/>\
- Logical, Physical, Process, Developer, Scenarios 5개 view 사용을 기반으로 소프트웨어 집약적 시스템의 아키텍처 설명을 위한 view model <br/><br/>\
# 구성도 <br/>\
<img src = "./img/Kruchten41View.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 구성요소 <br/>\
1. Logical View <br/>\
- 개념 : 시스템 -> 사용자 제공 기능 구조적 구성요소 역할 분해, 관계 명시 View <br/>\
- 관점 : End-User <br/>\
- 표현 : Class, State Macine Diagram <br/><br/>\
2. Process View <br/>\
- 개념 : 프로세스간 통신, Run-Time 동작 표현 초점 View <br/>\
- 관점 : System Integrators <br/>\
- 표현 : Activity, Class, Collaboration Diagram <br/><br/>\
3. Physical VIew(Deployment View) <br/>\
- 개념 : 물리 구성요소, 배치되는 SW 산출물 관계 초점 View <br/>\
- 관점 : (HW) System Engineers <br/>\
- 표현 : Deployment Diagram<br/><br/>\
4. Development View(Implementation View) <br/>\
- 개념 : 개발팀 개발 물리적 산출물 관점 표현 <br/>\
- 관점 : Programmer <br/>\
- 표현 : Component, Package Diagram <br/><br/>\
5. Scenarios <br/>\
- 개념 : 중요 요구 사항 Scenario 형태 표현, 4개 View 모두 연결 View <br/>\
- 관점 : 전체 <br/>\
- 표현 : Usecase Diagram <br/><br/>\
* ITPE 5회 2교시 1번\
',

// [소프트웨어 아키텍처]- SEI 3 View',
'# Modlue View Type : 모듈 / 구현단위 / 기능적 책임 <br/>\
- 모듈은 시스템의 주요한 구현 단위(Implementation Unit)이며, 각 모듈은 기능적 책임 소유 <br/>\
- 목적 : 인터페이스 파악, 도메인 파악, 추상 레이어 파악, 도메인 엔티티 파악, 아키텍처 스타일 실체화 <br/>\
- 아키스타일 (모/일사분대관계) : 일반화(Generalization), 사용(Uses), 분할(Decomposition, Blackboard), 데이터 모델(Data Model), 관점(Aspects), 계층(MVC) <br/><br/>\
# Component&Connector View Type : 시스템, 외부 인터페이스 정의 / 컴포넌트 / 커넥터 /<br/>\
- 런타임 컴포넌트와 커넥터로 시스템의 실행단위 기술, 시스템과 외부 엔티티와 인터페이스를 정의 <br/>\
- 목적 : 성능(Perforamnce), 신뢰성(Reliability), 가용성(Availability) 등과 같은 런타임 시스템 품질 속성의 실험을 결정 <br/>\
- 아키스타일 (컴/호데이저) : 호출과 반환(C/S,P2P), 데이터흐름(Pipe&Filter), 이벤트기반(Plublish&Subscribe), 저장소(Shared Data) <br/><br/>\
# Allocation View Type : 관계 기술 / 시스템 소프트웨어 / 구성요소 / 외부 환경 <br/>\
- 시스템의 소프트웨어 구성요소와 소프트웨어가 생성되고 실행되는 외부 환경 사이의 관계를 기술 <br/>\
- 목적 : 컴포넌트가 하드웨어에 어떻게 배치되었는지를 보여줌 <br/>\
- 아키스타일 (할/배구작) : 배치(Deployment), 구현(Implement), 작업할당(Work Assingement)\
',
 
// SAD 
'# 정의 : SW 아키텍처 기술 문서 <br/>\
- 이해관계자들의 관심사 파악 및 관점들을 정의하고, 다양한 View를 통해 SW 아키텍처를 기술한 문서 <br/><br/>\
# 작성시 준수사항 <br/>\
- 핵심 집중 <br/>\
- 표현방법(모호x, 반복x) <br/>\
- 표준준수 <br/>\
- 내용 충실 <br/>\
- 리뷰 확동 <br/><br/>\
# 절차 <br/>\
- 아키텍처 기술서 정보작성 <br/>\
- 이해관계자 관심 식별 <br/>\
- 관점 선택 <br/>\
- 관점 설명 <br/>\
- 뷰 <br/>\
- 전체 뷰 <br/><br/>\
# 작성 예시 <br/>\
1. SAD 개요 <br/>\
2. 아키텍처 배경 <br/>\
3. 아키텍처 요구사항 <br/>\
4. 참조 아키텍처 <br/>\
5. 설계 전략 <br/>\
6. 시스템 뷰 <br/>\
7. 기타 \
',

// ADD
'# 정의 : 아키텍처 수립 방법 / 기능,품질 속성, 제약사항 input / 최상위 수준 재귀 분할 과정 <br/>\
- 시스템의 기능적인 속성과 품질 속성 그리고 제약사항을 input으로 받아 속성을 만족시킬 수 있도록 최상위 수준에서 recursive하게 분할 하는 과정을 통해 아키텍처를 수립하는 방법 (SEI CMU) <br/><br/>\
# 암기 <br/>\
- recursive하게 분할 : 선,분/정,아,실/할,제/생,반 <br/><br/>\
# 절차 <br/>\
- 1단계 : 분할 모듈 선택 <br/>\
- 2단계<br/>\
=> 모듈 분할 및 정제 : 아키텍처 드라이버 나열 후 우선순위 정의 <br/>\
=> 아키텍처 스타일 선택 : 하위 모듈과 상호작용 방식 결정 <br/>\
=> 하위 모듈 실체화 및 뷰 통한 기능 할당 <br/>\
=> 하위 모듈 제약사항 생성 : 유즈케이스와 품질 속성 정제 및 검증 <br/>\
- 3단계 : 반복 <br/><br/>\
<img src = "./img/ADD.png" style = "max-width:100%; height:auto;">\
',

// UML 
'# 정의 : 통합된 모델링언어, IT + Biz 설계 <br/>\
- 객체기술에 대한 표준화기구에서 인정한 객체지향 분석과 설계를 위한 표준화된 모델링 언어 <br/><br/>\
<img src = "./img/UMLDiagram.png" style = "max-width:100%; height:auto;">\
',
  
// UML 관계
'<img src = "./img/UML_Relation.png" style = "max-width:100%; height:auto;"><br/>\
<img src = "./img/UML_RelationDetail.png" style = "max-width:100%; height:auto;">\
',

// UML 확장매커니즘 
'# 정의 : UML Customizing <br/>\
- 다양한 유형의 소프트웨어 모델을 표현하기에 부족한 UML을 보완하기 위해 별도의 표현 기법을 추가하여 확장할 수 있도록 하는 매커니즘 <br/><br/>\
# 특징 <br/>\
- MDA 지원 <br/>\
- Semantics(의미론적) 표현 <br/>\
- 재사용성 강화 ><br/>\
',

// [UML]- Behavior Diagram
'# 정의 : 사물들간의 행위 표시 다이어그램 <br/>\
- 관련이 있는 사물들간의 행위를 표시한 도형으로 시스템의 행위, 개별구성요소의 행위, 구성요소간의 행위를 표현할 수 있음 <br/><br/>\
<img src = "./img/BehaviorDiagram.png" style = "max-width:100%; height:auto;">\
',

// [UML][BehaviorDiagram]- Activity Diagram
'# 개념 <br/>\
- 시스템 내부의 활동의 흐름 표현 <br/>\
- 플로우 차트와 비슷하여 제어흐름을 표현하는데 적합 <br/>\
- 행위에 따라 변하는 객체의 상태를 표현 <br/><br/>\
# 표기법 <br/>\
<img src = "./img/ActivityDiagram.png" style = "max-width:100%; height:auto;"><br/><br/>\
- 시작상태 : 객체의 상태가 시작되는 곳, 객체의 생성시점이 시작 상태 <br/>\
- 객체상태 : 객체가 가질 수 있는 조건이나 상황 <br/>\
- 종료상태 : 객체 상태변화가 종료되는 곳, 객체의 소멸시점 <br/>\
- 전이 : 하나의 상태에서 다른 상태로 변화하는 것 <br/>\
- 동기화 : 병행처리가 시작되거나 모이는 곳 <br/>\
- 분기 : 논리식의 결과값에 따라 분기가 일어남 <br/>\
- 구획면 : 역할에 따른 구분이나 조작에 따른 구분, 활동 상태를 그룹화함\
',

// [UML][BehaviorDiagram]- State Diagram
'# 개념 <br/>\
- 시스템의 동적인 모습을 표현<br/>\
- 사건에 따라 순차적으로 발생하는 한 객체의 상태변화를 표현 <br/><br/>\
# 표기법 <br/>\
<img src = "./img/StateDiagram.png" style = "max-width:100%; height:auto;"><br/><br/>\
- 시작상태 : 객체의 상태변화가 시작되는 곳, 객체의 생성시점이 시작상태 <br/>\
- 상태 : 어떤 시점에서의 객체의 상태나 단계를 표시, 상태는 이벤트에 의해 변화됨 <br/>\
- 전이 : 하나의 상태에서 다른 상태로 변화하는 것 <br/>\
- 컴포지트 상태 : 객체가 어떠한 상태에 있는 동안에 다른 상태전이가 일어나는 것 \
',

// [UML][BehaviorDiagram]- Use Case Diagram 
'# 개념 <br/>\
- 시스템이 제공하는 기능 및 그와 관련된 외부요소(유저나 외부시스템)를 표현 <br/><br/>\
<img src = "./img/UseCaseDiagram.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 표기법 <br/>\
- 유즈케이스 : 유저등 시스템 외부에서 본 시스템의 기능 <br/>\
- 액터 : 시스템 외부에 존재하는 개체(사용자 역할, 타 시스템, 데이터베이스 서버등) <br/>\
- 연관관계 : 액터와 유즈케이스간의 관련 표현 <br/>\
- 일반화관계 : 시스템의 기능, 외부요소 사이에 추상화 혹은 구체화 관계가 존재함을 표시 <br/>\
- include : 중복적인 기능을 추출하여 별도의 유즈케이스로 표현 <br/>\
- extend : 유즈케이스내의 특정 시점에서 여러 형태로 분류될 경우 표현 \
',
 
// Sequence Diagram
'# 정의 : 메시지 순서 / 시간 흐름 / Behavior > Interaction > UML Diagram <br/>\
- 문제 해결에 필요한 객체간 메시지 순서를 시간 흐름에 따라 보여주는 UML 다이어그램 <br/><br/>\
# 구성요소 <br/>\
<img src = "./img/SequenceDiagram.png" style = "max-width:100%; height:auto;"><br/>\
- Lifeline : 모델링 되는 개개의 인스턴스, 시간경과 표시<br/>\
- Activations : 다른 인스턴스와 상호작용 위한 활성화 나타냄<br/><br/>\
# 예시 <br/>\
<img src = "./img/SequenceDiagramExample.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 라이지움 87회 관리 3교시 1번\
',

// Class Diagram
'# 정의 : 객체 타입 정의, 정적인 관계 표현 다이어그램 <br/>\
- 시스템에서 사용되는 객체 타입을 정의하고, 그들 간의 존재하는 정적인 관계를 다양한 방식으로 표현한 다이어그램 <br/><br/>\
# 특징 <br/>\
- Property : 클래스의 구조적 특징을 나타내는 특징 <br/>\
- Operation : 액션(메소드) + 가시성 이름(매개변수) <br/>\
- OCL(Object Constraint Language) : 제약을 설명하기 위해서 어떤 것이든 사용할 수 있도록 허용 <br/><br/>\
# 구성요소 <br/>\
- 클래스 : 모델링 하고자 하는 시스템의 개념을 표현하여 이름, Attribute, Operation으로 구성 <br/>\
- 스테레오 타입 : UML에서 제공하는 추가적인 확장 요소 (<< interface >>, << utility >>, << abstract >>, << enumeration >> <br/><br/>\
<img src = "./img/ClassDiagram_1.png" style = "max-width:100%; height:auto;"><br/>\
<img src = "./img/ClassDiagramDetail.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/ClassDiagram_2.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 122회 4교시 6번\
',

// Usecase Test
'# 정의 : Usecase 통한 테스트 <br/>\
- Usecase를 통해 도출되는 비즈니스 시나리오를 테스트 명세화하고, Usecase를 사용하는 Actor 사이의 상호작용의 결함을 찾는 테스트 기법 <br/><br/>\
# 특징 <br/>\
- Usecase는 실제 사용되는 시스템 프로세스 흐름 기술 <br/>\
- 인수테스트를 디자인시 유용 <br/>\
- 통합테스트 디자인시 유용 <br/><br/>\
# 시나리오 유형 <br/>\
- Usecase 시나리오 <br/>\
- 상호작용 시나리오 (구성 : 기본,대안,예외 흐름) \
',

// 모델기반 테스트
'# 정의 : 요구사항 문서 대신, 테스트 수행 기법 <br/>\
- 요구사항 문서를 대신하여 정형화된 표기법으로 기술된 모델에 의해 테스트 수행하는 기법 <br/><br/>\
# 특징 <br/>\
1. 장점 <br/>\
- 테스트 케이스 생성의 유연성 <br/>\
- 재사용성 <br/>\
- 추적성 <br/><br/>\
2. 작성방식 <br/>\
- 정형화된 표기법 <br/>\
- 테스트케이스 자동설계 <br/><br/>\
3. 적용대상 <br/>\
- 운영체제 <br/>\
- 통신시스템 <br/>\
- 스마트폰 <br/>\
- 자동차 <br/><br/>\
# 구성요소 <br/>\
- 결함의 검출 <br/>\
- 품질평가 <br/>\
- 테스트 대상 <br/>\
- 테스트 케이스 <br/>\
- 테스트 케이서 설계 <br/>\
- 테스트 베이시스 <br/>\
- 테스트 절차 <br/>\
- 테스트 스크립트 \
',

// SOA
'# 정의 : Service Application 조각 / Loosely Coupled / Application 개발 아키텍처 <br/>\
- Service Oriented Architecture <br/>\
- Service라는 Application을 조각단위로 loosely-Coupled하게 연결하여 Application 개발하는 아키텍처 <br/><br/>\
# 개요 <br/>\
<img src = "./img/SOA_MSA.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 개념도 <br/>\
<img src = "./img/SOA.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 기술요소 <br/>\
- SOAP : HTTP, HTTPS, SMTP 등 통해 XML 기반 메시지 네트워크상 교환 프로토콜 <br/>\
- WSDL : 웹 서비스 기술언어 (서비스 제공장소, 메시지 포맷, 프로토콜 기재) <br/>\
- UDDI :  웹 서비스 관련 정보 공개, 탐색 위한 표준 <br/>\
- 메시지 : XML / SOAP 메시지, publish, bind, find 지원 메시지 컨텐츠 묘사 <br/>\
<font color = "red">* SOAP : Simple Object Access Protocol <br/>\
* WSDL : Web Services Description Language <br/>\
* UDDI : Universal Description, Discovery and Integration </font><br/><br/>\
# 특징 <br/>\
- 목적 : 비즈니스 로직 재사용, 민첩성 확보 <br/>\
- 조직 : 조직, 서비스 연관 관계 없음 <br/>\
- 아키텍처 : 전사적, 분산, 모놀리식 아키텍처, 전체 단위 배포 <br/>\
- 서비스 : 재사용 우선순위 서비스 선정 <br/>\
- 관계 : 서비스 단위, 수평적 분할 <br/>\
- 중계 : ESB <br/>\
- 방식 : ESB 제품, 공급 벤더 기반 <br/>\
- 기반기술 : SOAP, WDSL, UDDI, XML <br/>\
- 적용대상 : B2B 기반 엔터프라이즈 시스템, 비즈니스 App 환경 <br/><br/>\
* ITPE 8회 관리 1교시 3번\
',

// ESB
'# 정의 : SOAP Web Service / 내/외부 통합,관리,사용 / SOA 지원 미들웨어 플랫폼 솔루션 <br/>\
- Enterpriese Service Bus <br/>\
- SOAP(XML/HTTP) Web Service 기술 이용, 내/외부 정보시스템 통합,관리, 사용 지원하는 SOA 지원 미들웨어 플랫폼 솔루션 <br/><br/>\
# 개념도 <br/>\
<img src = "./img/ESB.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 기술요소 (<font color = "red">ISRE</font>)<br/>\
- Interaction Link : 상호 메시지 <font color = "red">저장 및 복원</font> 기술 / 전송환경, 큐관리, 모니터링 <br/>\
- SOAP : 서비스 통합 및 연결을 위한 <font color = "red">통신 표준화</font> 기술 / 서비스 요청 및 호출, 경로설정 <br/>\
- Runner 기술 : 실행정보 교환 및 공통 환경 위한 <font color = "red">경로 설정</font> 기술 / 실행 환경 필요 정보 전달 <br/>\
- ESB 패턴 : 일정 패턴 기반 <font color = "red">솔루션 전개</font> 기술 / 기반 솔루션 설계 및 개발 적용 <br/><br/>\
* KPC 92회 관리 3교시 2번\
',

// MSA
'# 정의 : 작은, 변경 조합 가능 아키텍처 <br/>\
- 하나의 큰 어플리케이션을 여러개의 작은 마이크로 서비스 단위로 나누어 변경과 조합이 가능하도록 구성된 아키텍처 <br/><br/>\
# Keyword : Loosely Coupled, 분산트랜잭션, Ripple Efeect <br/><br/>\
# 필요성 <br/>\
- 시스템 확장성 : 컨테이너, Service Mesh <br/>\
- 서비스 적시성 : CI/CD, Cross Functional Team <br/>\
- 서비스 독립성 : Polyglot 아키텍처, RESTFul API <br/>\
- 시스템 안정성 : Circuit Breaker, API G/W <br/><br/>\
# MSA 구성요소 <br/>\
<img src = "./img/SWE1_9_1.PNG" style = "max-width:100%; height:auto;"><br/><br/>\
1. Client Layer(Front-end Tier) <br/>\
- UI/UX : Client Application <br/>\
- Protocol : HTTP Rest API, AMQP 경량화 프로토콜 <br/>\
- Orchestration : 이전 시스템 구축 API 재활용 <br/><br/>\
2. Application Layer(Middle Tier) <br/>\
- API Gateway : Load Balancing, 인증/로깅 <br/>\
- Containerization : 환경, 인프라 종속탈피, 트래픽 Auto Scaling 지원 <br/>\
- API Server : 상호 독립적 배포/관리 개별 서비스 <br/><br/>\
3. Persistence Layer(Back-end Tier) <br/>\
- Polyglot : 각 시스템 적합 개발언어 및 DB 사용 가능 <br/>\
- NoSQL DB : Document, Graph, Key/value 수평적 확장 가능한 DB <br/>\
- RDB : ACID DB <br/><br/>\
# 특징 <br/>\
- 목적 : CI/CD 비즈니스 민첩성 확보 <br/>\
- 조직 : 서비스 단위, 업무 조직 단위 연계(콘웨이 법칙) <br/>\
- 아키텍처 : 서비스별 독립적 아키텍처 <br/>\
- 서비스 : 업무간 독립성 우선순위 평가 서비스 <br/>\
- 관계 : SOA 사상 기반 경량화, 수직적 분해 <br/>\
- 중계 : API Gateway <br/>\
- 방식 : 글로벌 서비스 업체, 서비스 확장 과정 진화 <br/>\
- 기반기술 : REST, CQRS, Containerization, JSON, XML <br/>\
- 적용대상 : B2C 기반 분산 웹 서비스, 작은 단위 세분화 웹 기반 시스템 <br/><br/>\
# 전환 고려사항 : 비즈니스 분해 효율성, DB 모델링 한계, 서비스 관리 포인트 증가 <br/><br/>\
# 제언 <br/>\
<img src = "./img/DevOpsComment.png" style = "max-width:100%; height:auto;"><br/><br/>\
* MSA SOA 비교표 <br/>\
<img src = "./img/MSASOA.png" style = "max-width:100%; height:auto;"><br/><br/>\
* ITPE 8회 관리 2교시 3번 <br/>\
* KPC 92회 관리 2교시 4번 <br/>\
* 120회 관리 2교시 3번<br/>\
* KPC 91회 관리 2교시 4번\
',
   
// EAI
'# 정의 : 미들웨어(Adaptor) / 기업 내 어플리케이션 연동 / 비즈니스 통합 솔루션 <br/>\
- Enterprise Application Integration <br/>\
- 미들웨어(Adaptor) 활용, 비즈니스 로직 중심의 기업 내 어플리케이션 연동지원, 비즈니스 통합 솔루션 <br/><br/>\
# 개념도 <br/>\
<img src = "./img/EAI.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 기술요소 <br/>\
- Adapters : 어플리케이션간 연결 위한 모듈 기술 <br/>\
- EAI Platform : 메시지 큐, 트랜잭션 미들웨어 기능 제공 기술 <br/>\
- Message Queuing : 큐 통한 비동기 상호 통신 수행 기술 <br/>\
- Data Format Transformation : 다단계 공통 데이터 포맷 프로세스 적용 기술 <br/><br/>\
# 통합유형 <br/>\
- Point to Point : 1:1 통합 <br/>\
- Hub & Spoke : 중앙집중형 <br/>\
- Messaging Bus : Middleware <br/>\
- Hybrid : Hub&Spoke + Messaging Bus 혼합 <br/>\
- Peer to Peer : 각 어플리케이션 Peer Seerver P2P <br/><br/>\
* KPC 92회 관리 3교시 2번\
',
 
// Service Mesh
'# 정의 : 서비스 앞 단 / 경량화 프록시 배치 <br/>\
- 서비스 앞 단에 경량화된 프록시를 배치하여 서비스 간의 통신을 제어하는 아키텍처 패턴 <br/><br/>\
# 개념도 <br/>\
<img src = "./img/ServiceMesh.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 구성요소 <br/>\
1. 아키텍처 구성 <br/>\
- Control Plane : 중앙집중화된 컨트롤러에서 프록시 설정정보 통제 <br/>\
- Data Plane : 트래픽을 설정에 따라 프록시를 통해 전달 <br/><br/>\
2. 컴포넌트 배치 <br/>\
- Sidecar Proxy : 애플리케이션 컨테이너와 별도로 추가적인 사이드카 컨테이너 배포 <br/>\
- Service Discovery : 서비스 시작시 컨트롤러에 게시 <br/>\
- Circuit Breaker : Destination Rule을 정의하여 연결 및 이상 감지 <br/><br/>\
3. 비즈니스 정의 <br/>\
- Busieness Logic : 마이크로서비스에서 수행되는 비즈니스 기능 및 데이터 입출력 <br/><br/>\
# Service Meseh, MSA 비교 <br/>\
<img src = "./img/ServiceMeshAPIGateway.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 라이지움 88회 응용 1교시 11번\
',

// GraphQL
'# 정의 : 웹 클라이언트 / 데이터 Get / Client 작성, 호출 Query Langauge <br/>\
- Facebook에서 만든 웹 클라이언트에서 데이터를 서버로부터 효율적으로 가져오기 위한 목적을 지닌 클라이언트에서 작성하고 호출하는 쿼리 언어 <br/><br/>\
# 특징 <br/>\
- Client 데이터 요청 : 일반-Backend / GraphQL-Client 직접 호출 <br/>\
- 신속성 : CI/CD <br/>\
- 성능 향상 : 다양한 기기 대한 BackEnd 부담 절감 <br/><br/>\
# 아키텍처, 파이프라인 <br/>\
<img src = "./img/GraphQLOverview.png" style = "max-width: 100%; height: auto;"><br/><br/>\
# 구성요소 <br/>\
- Query/Mutation : R / CUD 요청 구문 <br/>\
- 스키마 / 타입 : Type 사전 작업 <br/>\
<img src = "./img/GraphQLScheme.png" style = "max-width: 100%; height: auto;"><br/>\
- Resolver : 실제 데이터 처리, 개발자 구현 방식 <br/>\
<img src = "./img/GraphQLResolver.png" style = "max-width: 100%; height: auto;"><br/>\
- Instropection : 스키마 실시간 정보 공유 <br/><br/>\
# 장,단점 <br/>\
- 장점 : 쉽고 유연한 구현, 타입기반, 활발한 커뮤니티, FrontEnd 적용 효과적 <br/>\
- 단점 : 캐싱, 예외처리 불편, Node.js 기반, 높은 러닝 커브, Backend Tool 부족 <br/><br/>\
* ITPE 합숙 124회 3일차 관리 1교시 9번\
',

// Shared Nothing Architecture
'# 정의 : 병렬 HA 구현 아키텍처 / 공유 자원x / 자원 소유권 / 동적 결정 <br/>\
- 공유하는 자원 없이 한번에 한 시스템만 특정 자원을 소유하고 접속 가능하나 장애 발생시에는 동적으로 결정되는 또다른 시스템이 그 자원의 소유권을 넘겨 받는 데이터 병렬처리 고가용성 구현 아키텍처 <br/><br/>\
# 특징 <br/>\
- 공유자원X <br/>\
- NW통한 복제 : MPP(Massive Parallel Processing) 방식 확대 <br/>\
- 일반 TCP기반 원거리 OK <br/>\
- 데이터 정합성 위한 별도 정책 필요 <br/>\
- 정합성보다 빠른 성능에 적합 <br/>\
- 장점 : 병렬 실행의 상호 의존성 제거, Scale Out 용이, Clustering 기반 독립 데이터 처리 <br/>\
- 목적 : HA확보, 부하분산, 장애시 데이터 손실 최소화 <br/><br/>\
# 절차 : 최초 SQL 요청 받은 서버가 코디네이트 노드 <br/>\
- 코 : 실행계획 연관 슬레이브 노드 식별 <br/>\
- 슬 : 요청 처리후 코디네이트 노드에 리턴 <br/>\
- 코 : 취합 후 반환 <br/><br/>\
# 기술 : 고가용성 확보, 부하분산, 장애시 데이터 손실 최소화 <br/><br/>\
# 고려사항 <br/>\
- Replication 구성시 Master & Slave 구조 적용 <br/>\
- 파티셔닝&샤딩 : Partitioning & Sharding <br/>\
- 로드밸런싱 및 캐시 구성 <br/>\
- 비동기 처리 (Async) 적용 <br/>\
- 셀 아키텍처(Cell Architecture) 구성 <br/>\
- 아키텍처 구조,배포 및 로백 <br/>\
- 수집 및 백업에 관련된 구성과 정책관리위한 사전 설계 및 테스트<br/><br/>\
* Share Everything, Share Disk <br/>\
* Share Nothing <br/><br/>\
<img src = "./img/ShareNothing.png" style = "max-width:100%; height:auto;">\
',

// Breadcrumbs
'# 정의 : 탐색 경로 시각 제공 인터페이스 <br/>\
- 프로그램, 문서, 웹사이트 등에서 사용자의 탐색 경로를 시각적으로 제공해 주는 그래픽 사용자 인터페이스 <br/><br/>\
# 예제 <br/>\
- Home > 자료마당 > 간행물 > 연구보고서 \
',

// 디자인패턴
'# 정의 : 개발 구조/문서 <br/>\
- 개발시 자주 발생하는 구조상 문제를 해결하기 위한 구조/문서 <br/><br/>\
# 종류 <br/>\
- 생구행 <br/>\
- 생 : 아바프로시파(ABProSiFa) <br/>\
- 구 : ABCD파플로(ABCDFaFlro) <br/>\
- 행 : CMI(CCMMII) 쏘티브(SSOTV) <br/>\
<img src = "./img/DesignPattern.png" style = "max-width:100%; height:auto;">\
',

// 화이트박스 재사용
'# 정의 : 상속 재사용 <br/>\
- 클래스 상속 등에 의한 재사용 기법 <br/><br/>\
# 특징 : 재사용 클래스가 변경이 일어나면 이용 객체에 영향 큼 <br/><br/>\
# 적용 패턴 : Adaptor, Decorator \
',

// 블랙박스 재사용
'# 정의 : 객체 여러개 붙여 재사용 <br/>\
- 다른 객체를 여러개 붙여서 새로운 기능 또는 개체를 구성하는 재사용 기법 <br/><br/>\
# 특징 : 객체 합성, 위임 -> 변경에 대한 영향 작음 <br/><br/>\
# 적용 패턴 : Proxy, Composite \
',

// 위임
'# 정의 : 타 클래스 호출 기법 (MS COM)<br/>\
- 하나의 클래스가 자신에게 필요한 서비스를 다른 클래스에 정의된 메소드 호출을 통해서 얻어 내는 기법 <br/><br/>\
# 위임 사용되는 패턴 : state, strategy, visitor <br/><br/>\
# 위임 의존 패턴 : mediator, Chain of Responsibility, bridge <br/><br/>\
',

// 전략패턴
'# 정의 : 변경없이 동적 교체 <br/>\
- 객체의 기능을 클래스의 변경 없이 동적으로 교체해서 사용하는 방법을 제공하는 행위 패턴 <br/><br/>\
# 특징 <br/>\
- OCP(Open Close Principle)와 인터페이스 이용한 다형성 <br/>\
- 위임 개념 적용된 디자인 패턴 <br/><br/>\
# 구성 <br/>\
- Context <br/>\
- Strategy <br/>\
- ConcreteStrategy \
',

// Observer Pattern
'# 정의 : 연락체계, 1:N 행위 패턴 <br/>\
- 한 객체의 상태가 바뀌는 경우 의존관계 있는 다른 객체들에게 연락이 가고, 자동으로 그 내용이 갱신되도록 일대다 의존성을 정의한 행위 패턴 <br/><br/>\
# 구성 <br/>\
- Interface : Subejct, Observer <br/>\
- Class : ConcreateSubject(Getter, Setter), ConcreteObserver(Update()) <br/><br/>\
# 특징 <br/>\
- 느슨한 결합 <br/>\
- 일관성 보장 \
',
 
// Null Object Pattern
'# 정의 : Null 정의 <br/>\
- Null의 행위를 정의한 객체를 사용한 디자인 패턴 <br/><br/>\
# 구현단계 : 추상 클래스 > 구체적 클래스 > Null 클래스 <br/>\
<img src = "./img/NullObjectClassObject.png" style = "max-width:100%; height:auto;"><br/>\
<img src = "./img/NullObjectClassMain.png" style = "max-width:100%; height:auto;">\
',

// Singleton Pattern 
'# 정의 : 실제 생성 객체 하나 / 최초 생성자 생성 객체 리턴 / 디자인 패턴 <br/>\
- 생성자가 여러 차례 호출되더라도 실제로 생성되는 객체는 하나이고 최초 생성 이후에 호출된 생성자는 최초의 생성자가 생성한 객체를 리턴하는 디자인 패턴 <br/><br/>\
# 특징 <br/>\
- 단일 인스턴스 : 인스턴스 하나 뿐인 객체 생성 지원 <br/>\
- 상속 불가 : 생성자 Private 선언, 단일 인스턴스 <br/>\
- 늦은 초기화 : getInstance() 호출시 객체 생성 <br/><br/>\
# 구조 <br/>\
<img src = "./img/SignletonStructure.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 특징 <br/>\
1. 장점 <br/>\
- 한번 인스턴스, 메모리 낭비 방지 <br/>\
- 전역 Instance, 다른 클래스 자원 공유 용이 <br/>\
- DBCP(DB Connection Pool) 공통 객체 여러개 생성 사용 상황 사용 <br/>\
- 쓰레드 풀, 캐시, 대화상자, 사용자 설정, 레지스트리 설정, 로그 기록 객채등 <br/><br/>\
2. 단점 <br/>\
- 결합도 높, OCP 원칙 위배 <br/>\
- 수정 테스트 어려워짐 <br/><br/>\
* 라이지움 90회 관리 1교시 13번\
',

// 연산생략기법
'# 정의 : 빠른 연산 진행 위한 평가 방법 <br/>\
- SCE / Short Circuit Evaluation <br/>\
- 빠른 연산 진행 위한 계산 방식으로 컴파일러가 확정되었을 때 더이상 평가하지 않는 방법 <br/><br/>\
# 특징 <br/>\
- 컴파일러 최적화 <br/>\
- 고급언어기능 <br/>\
- MC/DC 적용 <br/>\
- if( a or b ) \
',

// 정형기법
'# 정의 : 시스템 정확성 보장 기법 / 수학논리 명세 / 명세언어 / 검증기법<br/>\
- 수학논리 기반의 명세 및 정형화된 명세언어로 기술하고 정형검증기법으로 검증하여 시스템의 정확성을 보장하는 기법 <br/><br/>\
# 유형 : 정형명세, 정형개발, 정형검증 \
',

// [정형기법]- 정형명세 
'# 정의 : 시스템 전반내용 기술 / 수리 논리 / 동작환경 / 요구사항 / 설계 <br/>\
- Formal Specification <br/>\
- 수리 논리등을 이용하여 시스템의 동작 환경, 시스템 요구사항, 시스템의 설계 등을 기술하는 것 <br/><br/>\
# 암기 <br/>\
- 명세(5) : 모상AZP <br/>\
- 검증(3) : 정모동S <br/><br/>\
순병대모 <br/>\
- 순대-라오 <br/>\
- 병대-로브 <br/>\
- 순모-ZVB <br/>\
- 병모-씨페 <br/><br/>\
# 유형 : 요구명세, 설계명세 <br/><br/>\
# 종류 : 대모/순병 <br/>\
- 대수적 방법 : 시스템 연산과 연산의 관계에 의해서 표현 <br/>\
- 모델 기반 방법 : 시스템의 모델이 집합 및 수열과 같은 수학적 표현을 이용하여 만들어지며 시스템 운영은 그것이 어떻게 시스템의 상태를 수정하는지에 의해 정의 <br/><br/>\
<img src = "./img/정형명세_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/정형명세_2.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/정형명세_3.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/정형명세_4.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/정형명세_5.png" style = "max-width:100%; height:auto;">\
',

// Z 명세
'# 정의 : 집합론, 일차식으로 표현된 정형명세 <br/><br/>\
# 특징 <br/>\
- 상태기반 표현기법 <br/>\
- 수학적 표현 제공 <br/>\
- 스키마 제공해 구조화 <br/>\
- 모호함 없는 정확한 명세 가능 <br/><br/>\
# 명세 요소 <br/>\
- Static State : 시스템의 상태를 나타내는 변수와의 관계 표현, 모든 상태에서 만족하는 불연속성 <br/>\
- Initial State : 시스템의 초기 상태 표현 <br/>\
- Operation : 오퍼레이션 수행 전/후 상태관계 표현 \
',

// Petri-net
'# 정의 : 분산, 병렬시스템을 표현하는 수학적 모델링 명세언어 <br/><br/>\
# 명세요소 <br/>\
- Place : 토큰을 포함하는 장소의 유한 집합 <br/>\
- Transition : 천이의 유한 집합, event 또는 activity 나타냄 <br/>\
- Token : Place에서 Place로 이동 되는 단위 <br/>\
- Arc : Place에 영향을 주거나 종속되는 transition 간 연결 \
',

// 상태차트
'# 정의 : 시스템의 행위를 모델링 하기 위한, 직관적인 명세언어 <br/><br/>\
# 특징 <br/>\
- 도식적 표현 <br/>\
- 이해용이 <br/>\
- 반응형 시스템 명세 및 설계 적합 <br/><br/>\
# 적용 <br/>\
- 군사 및 항공우주<br/>\
- 자동화 설비 <br/>\
- 의료장비 <br/>\
- 철도 <br/><br/>\
# 명세요소 <br/>\
- 모듈차트 : DFD <br/>\
- 액티비티차트 : 다차원의 데이터 플로우 다이어그램 <br/>\
- 상태차트 : 노드(상태)와 화살표(전이)로 구성 \
',

// VDM
'# 정의 : 표현의미론 기반의 명세언어 <br/><br/>\
# 특징 : 명세 이외 설계/구현 적용가능, 실무에 많이 이용 \
',
  
// 정형검증
'# 정의 : 수학과 논리학 기반 SW 검증 <br/>\
- 시스템의 동작 및 요구사항을 논리식이나 수학식과 같이 정형된 명세언어로 기술하고, 만족 여부를 증명하는 소프트웨어 검증기법 <br/><br/>\
# 특징 <br/>\
- 수학 및 논리학 : 오토마타를 활용, 수학모델 표현 <br/>\
- 반복모델 및 검증 : 정형명세 기준 반복적 검증 <br/>\
- 상태폭발 문제 : 규모에 따라 상태수 폭발적 증가 <br/><br/>\
# 정형검증 유형 <br/>\
<img src = "./img/FormalVerificationSpec.png" style = "max-width:100%; height:auto;"><br/>\
<img src = "./img/정형검증.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 절차 <br/>\
<img src = "./img/정형검증절차.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 상태폭발문제 해결방안 <br/>\
- 기호적 모델 체킹 : 너비 우선 탐색 <br/>\
- 추상화 기법 : 모델 경량화 <br/>\
- 릴레이 모델 체킹 : 수량 나누어 검사 <br/><br/>\
* KPC 93회 1교시 10번\
',

// Mccabe 순환복잡도
'# 정의 : 코드 논리적 복잡도 측정 기법 / Mccabe / 단순화, 테스팅 목적<br/>\
- Cyclomatic Complexity 회전 복잡도 <br/>\
- Mccabe가 창안한 기법으로 프로그램 단순화, 프로그램 테스팅의 목적으로 코드의 논리적 복잡도를 측정하는 기법<br/><br/>\
# 절차 : 제어흐름도 작성 > 논리 복잡도 측정 <br/><br/>\
# 특징 <br/>\
- DFD 기반 <br/>\
- 복잡할 수록 증가 <br/>\
- 다중선택(case)구조 경우 복잡도 급증 <br/><br/>\
# 복잡도 계산 <br/>\
- e - n + 2 <br/>\
- 폐쇄구간수(region) + 1 <br/>\
- 의사결정 수(if,while) + 조건 수(and or not) + 1<br/><br/>\
# 복잡도 분석 <br/>\
- 단순 : V(g) <= 5 <br/>\
- 구조적안전(단순화필요) : 5 < V(g) < 10 <br/>\
- 매우복잡(루틴분할) : V(g) >= 20 <br/><br/>\
# 단점 <br/>\
- Switch case문 사용시 복잡도 증가 <br/>\
- 데이터 복잡도 측정 x <br/><br/>\
# McCabe SEI 기준 (복잡도 vs 오차율) <br/>\
- 10미만 vs 5% <br/>\
- 11~20 vs 20% <br/>\
- 21~50 vs 60% <br/><br/>\
*[참고] 객체지향 Matrix <br/>\
- Fan-In : 클래스 자신 호출 횟수 <br/>\
- Fan-Out : 자신 클래스 호출 횟수 <br/><br/>\
<img src = "./img/McCabe_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/McCabe_2.png" style = "max-width:100%; height:auto;">\
',

// Haistead Metrics, 객체지향 Metrics
'# 정의 : 연산자, 피연산자 수 기반 규모 산정 <br/>\
- 프로그래밍 언어와 무관하게 연산자와 피연산자의 수를 기반으로 프로그램에 내재된 논리의 규모를 산정하는 방식 <br/><br/>\
# 복잡도 : n1/2 * N2/n2 (n1 : 연산자 개수, n2 : 피연산자 개수, N2 : 피연산자 사용개수) \
',

// Spring Framework
'# 정의 : EJB 기반 OSS Web APP Framework <br/>\
- EJB(Enterprise Java Baen) 기반의 복잡함과 무거움을 극복하고 개발생산성 향상과 고품질의 시스템 개발을 위한 자바 플랫폼 상의 경량화된 오픈 소스 웹 어플리케이션 프레임워크 <br/><br/>\
# 특징 <br/>\
- pojo 기반 <br/>\
- 경량 컨테이너 <br/>\
- test unit <br/>\
- ioc(inversion of control) <br/><br/>\
# 장단점 <br/>\
1. 장점 <br/>\
- 다양형태 트랜잭션 <br/>\
- 설정파일 통한 다양 프레임워크 통합 <br/>\
- 웹 FW와 ORM 지원 <br/>\
- AOP 쉬운 적용 <br/><br/>\
2. 단점 <br/>\
- 기본 선행지식 <br/>\
- 도입위한 추가작업 <br/>\
- layer간 인터페이스 생성 필요 <br/><br/>\
# 구성 : spring core(IoC), aop, dao, spring orm, context, web, mvc \
',

// MISRA-C, MISRA-C++
'# 정의 : 임베디드 시스템 C 개발표준 <br/>\
- C언어로 작성된 임베디드 시스템의 코드 안전성, 호환성, 신뢰성 보장 위한 C프로그래밍 개발 표준 <br/>\
- C++언어에 대한 가이드라인으로는 MISRA C++ 존재 <br/>\
- 영국 자동차 산업 신뢰성 협회(MISRA)에서 C프로그래밍 언어 개발표준 <br/><br/>\
# 등장배경 <br/>\
- 코드 에러율 <br/>\
- 컴파일러 자유도 <br/>\
- 이식성 \
',

// node.js
'# 정의 : Google Chrome V8 Javascript Engine 기반 고성능 Framework <br/><br/>\
# 특징 <br/>\
- Javascript 기반 <br/>\
- Event 기반 <br/>\
- Single Thread 기반 <br/>\
- non-blocking I/O \
',

// Javascript
'# 정의 : 동적 웹 지원 스크립트 언어 <br/>\
- 동적인 화면을 웹페이지에 구현하기 위해 웹 브라우저상에서 구동되는 클라이언트 기반의 스크립트 언어 <br/>\
- IoT 시대 경량, 빠른 플랫 폼 핸들러 <br/><br/>\
# 특징 <br/>\
- 성능 : 구동속도 빠름 <br/>\
- 호환성 : OS / Flatform 무관 <br/>\
- 상호운영 : Cross Platform <br/>\
- 편의 : 메모리 관리, UI/UX 강화 <br/>\
- 학습성 : 개발난이도 낮음 <br/>\
- 기능성 : 서버제어 <br/><br/>\
# 고려사항 : 보안, 구현 제한성, 프로그래밍 오류, 암묵적 전역 \
',

// Java GUI
'# 정의 : 메뉴, 화면 구성 / 편리 사용 인터페이스 <br/>\
- 이미지 혹은 그래픽을 이용하여 메뉴, 화면을 구성하고 입력 도구를 이용해 사용자가 편리하게 사용하는 인터페이스 <br/><br/>\
# 유형 <br/>\
1. AWT(Abstract Window Toolkit) (OS 종속)<br/>\
- 개념 : OS의 컴포넌트를 그대로 사용 도구 <br/>\
- 주요 컴포넌트 : Frame, Paneet, Applet, Dialog, Window <br/>\
- 패키지 : java.awt <br/>\
- 컴포넌트 : Heavy weight <br/>\
- 특징 : 구현 쉬움, OS별 최소 Wrapper 재현, 일반 기능 직접 구현 <br/><br/>\
2. SWING (OS 독립)<br/>\
- 개념 : AWT 기술 기반 확장, 순수 자바 언어 라이브러리 <br/>\
- 주요 컴포넌트 : JFrame, JPanet, JApplet, JDialog, JWindow <br/>\
- 패키지 : java.swing <br/>\
- 컴포넌트 : Light weight <br/>\
- 특징 : 운영체제간 버그 자동 해결, 스윙 GUI Component, 자바 2D API <br/><br/>\
* 125회 관리 1교시 3번\
',

// 테스트 7
'# ISTQB의 SW테스트 7가지 원리 <br/><br/>\
# 유형 : 발완초집살정부 <br/>\
<img src = "./img/Test7.png" style = "max-width:100%; height:auto;"><br/>\
<img src = "./img/Testing7Standard.png" style = "max-width:100%; height:auto;"><br/><br/>\
- 기타 : 마이어의 법칙, Test Case, 결과 Review, 경제성의 원리, 요르돈의 법칙 (Snow Ball Effect) <br/>\
-> Test Case : 기대되는 표준 결과 포함(테스트 오라클), 예측오류, 기대되지 않은 결함이 있다는 가정 아래 Test Plan 수립 <br/>\
-> 마이어 법칙 : 프로그램 어느부분에서 오류가 존재할 확률은 그 부분에서 발견된 오류수에 비례함 <br/><br/>\
# Grouping <br/>\
<img src = "./img/Test7Rule.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 테스트케이스 사례 <br/>\
<img src = "./img/Test7RuleExample.png" style = "max-width:100%; height:auto;"><br/><br/>\
* KPC 93회 4교시 1번\
',

// 테스트 유형
'<img src = "./img/TestTree.png" style = "max-width:100%; height:auto;">\
', 
 
// 테스트 절차
'<img src = "./img/TestProcessFlow.png" style = "max-width:100%; height:auto;">\
', 

// [시험단계][단계]- 단위 테스트
'# 정의 : 최소단위-모듈 기준 테스트 <br/>\
- 소프트웨어 개발에서 테스트 가능한 최소단위-모듈을 기준으로 결함을 찾고, 기능을 검증하는 활동 (화면, Component(CBD), Class) <br/><br/>\
# 특징 <br/>\
- 화이트 테스트 테스트 기법 활용 <br/>\
- 개발자 중심 테스트 <br/>\
- 개발소스 중심 <br/><br/>\
# 유형 <br/>\
- I/F : 파일속성, 매개변수 <br/>\
- 자료구조 : 변수 초기화, Type 일관성 <br/>\
- 수행경로 <br/>\
- 오류처리 : 오류메시지 상세정보제공<br/>\
- 경계값\
',

// [시험단계][단계]- 통합 테스트
'# 정의 : 상호작용 결합 기능 검증 / 컴포넌트, I/F <br/>\
- 개발된 모듈, 서비스를 조합하여 최종 SW를 구성할 때, 컴포넌트들 사이의 상호작용, 사용자 I/F와 상호작용의 결함과 기능을 검증하는 활동 <br/><br/>\
# 특징 <br/>\
- 단위 테스트 완료된 모듈 대상, 모듈간 상호작용 중심 테스트 <br/><br/>\
# 통합 방식 <br/>\
1. 빅뱅 방식 <br/>\
- 개념 : 전체 모듈을 통합하여 한번에 테스트를 수행하는 비점진적 방식 <br/>\
- 장점 : 단시간에 수행 가능 <br/>\
- 단점 : 오류 발견 어렵고 수정 어려움 <br/><br/>\
2. 점진적 방식 <br/>\
- 개념 : 모듈 단위별로 점차적으로 통합하는 방식 <br/>\
- 장점 : 오류 발견 및 수정 용이 <br/>\
- 단점 : 장시간 소요 가능 <br/><br/>\
# 점진적 통합 방식 상세 <br/>\
1. 하향식 통합 (Top-Down) <br/>\
- 개념 : 상위 모듈을 통합후 세부 모듈 추가 통합하는 방식 <br/>\
- 절차 <br/>\
1) Test Stub 작성 및 하위 세부 모듈을 대체 <br/>\
2) 점진적 통합하여 Test Stub을 실제 모듈로 교체 <br/>\
3) 모듈 통합과 테스트를 반복적 수행 <br/>\
4) 회귀 검사 수행 <br/><br/>\
2. 상향식 통합 (Bottom-Up) <br/>\
- 개념 : 하위 모듈에서 상위 모듈로 통합하는 방식 <br/>\
- 절차 <br/>\
1) 하위 모듈을 클러스터로 결합 <br/>\
2) Test Driver 작성 <br/>\
3) 클러스터 검사 <br/>\
4) Test Driver 제거 및 클러스터 상위 모듈로 이동 <br/><br/>\
3. 혼합식 통합 (Sandwich) <br/>\
- 개념 : 하위 수준에서는 상향식 통합, 상위 수준에서는 하향식 통합을 혼합적으로 사용하여 점진적으로 통합하는 방식 <br/>\
- 선정된 모듈 중심 통합, Stub & Driver 필요 <br/><br/>\
* 그리타 \
',

// [시험단계][단계]- 시스템 테스트
'# 정의 : 사용자 요구사항 만족 테스트 / 기능,비기능 <br/>\
- 소프트웨어를 사용자에게 인도하기 전에 사용자 요구사항을 만족하는지 기능 및 비기능 요구사항에 대하여 진행하는 테스트<br/><br/>\
# 종류 <br/>\
- 회복 : 고의 실패유도, 회복수행 <br/>\
- 보안 : 비 인가자의 침투로부터 시스템 보호 수준 테스트 <br/>\
- 강도 : 과다정보량 부과 <br/>\
- 성능 : 응답시간, 처리량, 메모리활용도, 처리속도 / 루프백, 스파이크, 가용성 테스트<br/>\
- 구조 : SW 논리경로 복잡도 <br/><br/>\
# 성능지표 <br/>\
- CPU <br/>\
1) MIPS(Millions of Instructions Per Second) <br/>\
2) NW : BPS, PPS <br/>\
3) HW : TPC(Transaction Processing Performance Council) <br/>\
4) CS 시스템 : TPS \
',

// 성능 테스트
'# 정의 : 비기능 목표치 달성 시험 <br/>\
- 소프트웨어 프로그램이 주어진 환경하에서 응답속도, 처리량, 처리속도 등의 항목에 대하여 요구 되어진 목표치를 달성하는지를 확인하는 시험 <br/><br/>\
# 시험 목적 <br/>\
- 성능 측정 : 오픈전 사이트 테스트 <br/>\
- 병목 구간 : 시스템 병목구간 점검 <br/>\
- 사용자수 산정 : 최대 수용가능 동시단말 사용자수 산정 <br/><br/>\
# 시험 범위 <br/>\
- 내부 성능 테스트 : 예상되는 최대 수용 가능 동시 단말 사용자 서버처리 검증 <br/>\
- 외부 성능 테스트 : 예상되는 최대 부하에 대한 네트워크 처리 인프라 능력 검증 <br/><br/>\
# 절차 <br/>\
1. 계획 단계 <br/>\
- 테스트 요구사항 수집 : 비기능 요구사항 기준, 범위, 목표 대한 상위 레벨 기대치 수집 <br/>\
- 현행 시스템 부하 분석 : 대상 or 레거시 시스템 부하량 분석 <br/>\
- 성능 테스트 계획 수립 : 목적, 범위, 목표, 대상업무, 일정, 조직, 테스트, 시작/종료조건 <br/><br/>\
2. 설계/구현 단계 <br/>\
- 테스트 스크립트 설계 : 업무별 스크립트 작성 <br/>\
- 테스트 데이터 준비 : 레거시 시스템 추출된 데이터 사용 <br/>\
- 테스트 시나리오 설계 : 부하 분석 결과 통한 시나리오 설계 <br/><br/>\
3. 수행/종료 단계 <br/>\
- 테스트 수행 : 유형별 접근, 테스트 수행 <br/>\
- 성능 튜닝 : 목표치 분석, 병목 제거 활동 <br/>\
- 테스트 결과 정리 : 유형별 측정 결과 비교 분석, 정리 <br/><br/>\
# 목차 예시 <br/>\
1. 성능시험 개요 <br/>\
2. 성능 평가 기준 <br/>\
3. 성능 시험 진행 순서 <br/>\
4. 테스트 사이트 구성 현황 <br/>\
5. Workload 모델링 (Weblog, Current Workload, Target Workload) <br/>\
6. Performance 모델링 (단위 App, 혼합 BP, 모니터링 항목) <br/>\
7. Performance Test Results (단위 테스트 결과, 권고안, 혼합 BP 테스트 결과 권고안) <br/><br/>\
# 주요 평가 지표 <br/>\
1. 처리지표 <br/>\
- TPS(Transaction Per Second) : Active User / MRT(Mean Response Time) <br/>\
- Throughput : 시간 당 처리량 <br/>\
- Resource Usage : CPU, 메모리 등 HW 리소스 사용량 <br/><br/>\
2. 시간지표 <br/>\
- Response Time : 응답 소요시간 <br/>\
- Think Time : 사용자가 생각하는 시간 <br/>\
- Request Interval Time : 클릭 간 시간 <br/><br/>\
3. 사용자 지표 <br/>\
- Concurrent User : 동시 사용자 수 <br/>\
- Active User : 활성 사용자 수 <br/><br/>\
# 유형<br/>\
1. 방법 (<font color = "red">루스티가</font>) <br/>\
- 루프백 : 업무별 병목지점 <br/>\
- 스파이크 : 임계 측정 목표 <br/>\
- 티어 테스트 : 구간별 병목 <br/>\
- 가용성 : 업무처리의 가용성 측정 <br/><br/>\
2. 목적 (<font color = "red">단복임확</font>)<br/>\
- 단위성능 <br/>\
- 복합성능 : 가중치 적용 <br/>\
- 임계성능 : 임계도달 <br/>\
- 확장성 : 증설전후 성능 <br/><br/>\
* Little\'s Law : 공간 내에 머무는 객체수(L)는 객체의 공간 유입량(A)과 객체가 머무는 시간(W)에 비례한다 <br/>\
- L = AW <br/><br/>\
# Tool : 자동화(Apache JMeter, DBMonster), 관리 시스템(Qtset, TestLink) <br/><br/>\
* ITPE 6회 관리 3교시 4번 <br/>\
* 123회 응용 3교시 5번\
',

// TPC
'# 정의 : OLTP 성능 규격 제공 기관 <br/>\
- Transaction Processing Performance Council <br/>\
- OLTP (Oline Transaction Processing) 시스템의 처리 성능을 측정하는 성능평가 기준의 표준 규격을 제공하기 위해 결성된 비영리 성능 평가 기관 <br/><br/>\
# 평가기준 <br/>\
- TPC-C : 트랜잭션 처리 속도 <br/>\
- TPC-E : 메모리 디스크 용량 산정 <br/>\
- TPC-H : 의사결정 지원 <br/>\
- TPC-App : 일반적 작업 수행 정도 초단위 측정 (단위 : SIPS) \
',

// SPEC 
'# 정의 : 컴퓨터 성능 측정 비영리 단체 <br/>\
- Standard Performance Evaluation Cooperation <br/>\
- 컴퓨터의 성능을 측정하기 위한 벤치마크 테스트 프로그램의 개발과 테스트 수행하는 선 마이크로시스템즈에 의하여 설립된 비영리 단체 <br/><br/>\
# 평가기준 <br/>\
- SPEC CPU2006 : CPU 벤치마크 모델 <br/>\
- SPEC jbb2015 : Java 비즈니스 응용 위한 모델 <br/>\
- SPEC jEnterprise2010 : Java Enterprise Edition 최신 Application 서버 DB 평가 모델 <br/>\
- SPEC virt_sc2013 : 서버가상화 위한 데이터 센터 서버 평가 모델 \
',

// Little's Law
'# 정의 : 객체수 유입량,시간 연관 법칙 <br/>\
- 공간내에 머무르는 객체수(N)는 객체의 공간 유입량(T)와 객체가 머무는 시간(R)에 비례함에 대한 법칙 <br/><br/>\
# TPS = AU / MRT <br/>\
- TPS : 성능 <br/>\
- AU : 사용자 <br/>\
- MRT : 평균응답시간 \
',

// [시험단계]- 인수 테스트 
'# 정의 : 구입자 운영환경에서 공급자에 의해 실시되는 테스트 <br/>\
- 계약상의 요구사항이 만족 됐는지 확인 위해, 설치후 "구입자 운영 환경"에서 공급자도 참여하여 "공급자에 의해" 실시되는 시스템 또는 기능 단위 공식 테스트 <br/><br/>\
# 유형 <br/>\
1. 비공식 <br/>\
- 알파 : 개발자 환경에서 사용자가 수행 <br/>\
- 베타 : 일정수 사용자 테스트 후 피드백 <br/>\
- 감마 : 필드 <br/><br/>\
2. 공식 <br/>\
- 사용자 인수 테스트 : 사용자, 사용성 <br/>\
- 운영자 인수 테스트 : 시스템 관리자, 백업/복원, 재난복구, 보안취약성 점검 <br/>\
- 계약사 인수 테스트 : custom-developed sw 계약범위 <br/>\
- 규정 인수 테스트 : 법률, 정부지침\
',

// [시험단계][테스트 유형][시각]- 확인/검증 
'# 검증(Verification) : 개발자 시각 입증<br/>\
- 개발자 혹은 시험자의 시각으로 소프트웨어가 명시된 기능을 올바로 수행하는지 알아보는 과정 <br/><br/>\
# 확인(Validation) : 사용자 시각 입증<br/>\
- 사용자 시각으로 올바른 소프트웨어가 개발되었는지를 입증하는 과정 \
',

// 정적 테스트
'# 정의 : 테스트 기법 / 시스템 구현전 / <br/>\
- 소프트웨어를 실행시키지 않은 채, 결함을 검출하는 방법 <br/>\
- 특정한 판단기준을 가지고 오류를 찾는 테스트 <br/><br/>\
# 유형 <br/>\
1. 수동 (피인워)<br/>\
- Peer Review : 동료간 상호교차 <br/>\
- Inspection : 공식적 검토 <br/>\
- Work Through : 요구사항, 소스코드, 비공식 <br/><br/>\
2. 자동 <br/>\
- 커버리지 : 코드 모든부분 수행 <br/>\
- 규칙 위반 검사 : 연산, 규칙 <br/>\
- 잠재적 결함 검사 : 런타임 오류, 내재 결함 <br/><br/>\
* 아이리포 23회 3교시 5번\
',

// [시험단계][테스트 유형][프로그램 실행여부][정적테스트]- Peer Review
'# 정의 : 상호교차 수행 활동 / 산출물, 제품 <br/>\
- 프로젝트 수행 과정에서 각 진행 단계별로 발생하는 산출물 또는 제품에 대해서 동료들이 상호 교차하여 검토를 수행하는 활동 <br/><br/>\
# 구성요소 <br/>\
- 관찰 대상 범위 : SDLC 단계별 산출물의 범위 및 기준선 여부를 확인 <br/>\
- 참여자 구성원 : 중재자, 검토자, 저자, 기록자 등의 정보를 수집하여 구성 <br/>\
- 체크리스트 항목 : 산출물에 대한 요구사항 명세서, 추적표, 설계 구현내용을 확인 <br/>\
(조기결함 발견을 통한 품질문제 예방 및 비용절감이 가능하며, 상호검토를 통해 설계자 및 개발자의 역량 향상이 가능)\
',

// [시험단계][테스트 유형][프로그램 실행여부][정적테스트]- Walkthrough
'# 정의 : 결함발견, 정보수집, 내용평가, 합의도출, 학습등의 목적 수행 리뷰 유형 <br/>\
- 인스펙션과 프로세스가 유사하지만, 결함발견, 정보수집, 내용 평가, 합의 도출, 학습등의 목적으로 수행하는 리뷰의 유형 <br/><br/>\
# 특징 <br/>\
- 작성자(Author)에 의해 주도되는 미팅<br/>\
- 시나리오들<br/>\
- 리허설(dry runs)<br/>\
- 동료 그룹 <br/><br/>\
# 구성<br/>\
- 내부인원 <br/>\
- 결함해결책 <br/>\
- 진행(작성자 주도) <br/><br/>\
# 종류 <br/>\
- 요구사항 Walkthrough <br/>\
- 소스코드 <br/>\
- 테스트 <br/><br/>\
# 진행 절차 <br/>\
1. 미팅 준비(사전자료제공) <br/>\
2. 미팅(모듈 실행, 해결책 도출) \
',

// [정적테스트]- 인스펙션 
'# 정의 : 공식적 평가 기법 / 개발 표준 위배사항 / 문제점 찾기 목적 <br/>\
- 개인 또는 그룹이 SDLC에서 개발 표준위배사항, 기타문제점을 찾는 것을 목적으로 하는 공식적 평가기법 <br/><br/>\
# 암기 <br/>\
- 준수원칙(5) : 문체회참충 <br/>\
- 절차(6) : popmrf <br/><br/>\
# 준수원칙 : 문서검토준비, 체크리스트, 회의시간 제약, 참석자4-6, 중재자(Moderater) <br/><br/>\
# 참석자 : 중재자(Moderator), 개발자(Author), 낭독자(Reader), 기록자(Recorder), 검토자(Inspector) <br/><br/>\
# 절차 : popmrf <br/>\
- 플랜 > 오버뷰 > 프리페어 > 미팅 > 리워크 > 팔로업 <br/>\
- 산출물(2) : 검사 보고서, 체크리스트 <br/><br/>\
# 종류(3) <br/>\
- 시스템 설계 : SW 요구, 성능명세 I/F <br/>\
- 상세 설계 : 모듈 설계 <br/>\
- 코드 \
',

// 페이건 인스펙션
'# 정의 : 페이건 / 비용절감 기법 / 사업초기 전문 인력 <br/>\
- 페이건이 만든 인스펙션 기법, 사업초기부터 전문인력을 투입하여 조기불량율을 낮추고 품질향상을 도모하여 비용을 절감하는 기법',

// 동적 테스트
'# 정의 : 테스트 기법 / 직접 실행 <br/>\
- 직접 실행 시켜보면서 SW가 예상대로 작용하는지의 여부를 판정하는 테스트 기법<br/><br/>\
# 구성요소 <br/>\
- 테스트 케이스 : 절차, Data, Result<br/>\
- 테스트 웨어 : Driver, Stub, Engine <br/>\
- 테스트 결과 : 오류 리스트, 결과 <br/><br/>\
# 종류 <br/>\
1. 명세기반 <br/>\
- 동등분할 : 영역별 분할 <br/>\
- 경계값 분석 : 경계값 부근 <br/>\
- 결정 테이블 : 결정 테이블 이용 <br/>\
- 상태전이 테스트 : 정의된 상태 변경 <br/><br/>\
2. 구조기반 <br/>\
- 커버리지 : White Box Test <br/>\
- 제어 흐름 : 흐름, 논리적 경로 <br/><br/>\
3. 경험 기반 <br/>\
- 탐색적 : 발견론적 <br/>\
- 분류트리 : 시나리오 결과 분류 <br/>\
- 체크리스트 : 동작 확인 <br/><br/>\
* 아이리포 23회 3교시 5번 <br/>\
* 라이지움 86회 2교시 4번\
',

// [시험단계][테스트 유형][프로그램 실행여부][동적 테스트]- Black Box TEST / 명세기반 테스트
'# 정의 : 명세서 기반 테스트<br/>\
- 명세기반 테스트 <br/>\
- 분석 및 설계 명세서를 바탕, 테스트 케이스화 작성, 모델의 결함을 발견하는 테스트 <br/><br/>\
# 종류 (동경원D상페도유) <br/>\
1. 동등분할 <br/>\
<img src = "./img/BlackBox_1.png" style = "max-width:100%; hegiht:auto;"><br/>\
- 데이터의 구간별 대표 값 도출, 테스트 기법 <br/>\
- 상호 독립적 등가집합 <br/><br/>\
2. 경계값 <br/>\
<img src = "./img/BlackBox_2.png" style = "max-width:100%; hegiht:auto;"><br/>\
- 경계 값 주변 다수 결함 발생 원리 이용 <br/>\
- 유효, 비유효 경계 값 고려한 케이스 설계 <br/>\
- 경계치에 치중하며 출력 유형 고려 <br/><br/>\
3. 원인결과 그래프 <br/>\
<img src = "./img/CauseEffectGraph.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
4. Decision Table <br/>\
<img src = "./img/BlackBox_3.png" style = "max-width:100%; hegiht:auto;"><br/>\
- 조건에 따른 참/거짓 조합으로 케이스 작성 <br/>\
- 조건과 상황기반 <br/>\
- 비즈니스 규칙의 명세화 <br/><br/>\
5. 상태전이 <br/>\
<img src = "./img/StateTransitionTesting.png" style = "max-width:100%; hegiht:auto;"><br/>\
- 상태 변화 요소들의 조합, 테스트 케이스 작성 <br/>\
- 상태전이, 상태를 변하시키는 입력과 이벤트의 모든 조합을 포함하는 전이 테이블 정의 후 테스트 케이스를 설계 <br/><br/>\
6. 페어와이즈 <br/>\
<img src = "./img/BlackBox_4.png" style = "max-width:100%; hegiht:auto;"><br/>\
- 상호작용 조합을 이용한 테스트 케이스 최소화 <br/>\
- 상호작용 요소 식별 <br/>\
- 경험적 의미 조합 <br/><br/>\
7. 도메인 <br/><br/>\
8. 유즈케이스 D<br/>\
- Use case 명세서를 이용한 테스트 케이스 설계 <br/>\
- 기본 흐름과 대안 흐름 고려 <br/>\
- 프로세스 흐름 확인 가능 <br/><br/>\
* 122회 3교시 4번\
',

// [시험단계][테스트 유형][프로그램 실행여부][동적 테스트][BlackBox]- 동등분할
'# 정의 : 상호 독립적 분할 테스팅 <br/>\
- 입력값/출력값 영역을 상호독립적으로 나누어 시험사례 유형들을 분할하여 테스팅 <br/><br/>\
# 사례 <br/>\
- 입력데이터 x값이 0 ~ 100 사이여야 한다면 <br/>\
-> TC를 (x<0), (x=50), (x>100) 으로 분할하여 적용 <br/>\
- 입력데이터 x값이 0.100 이라면 <br/>\
-> TC를 0.100, 0.101\
',

// [시험단계][테스트 유형][프로그램 실행여부][동적 테스트][BlackBox]- 경계값분석
'# 정의 : 경계값 포함 테스팅 <br/>\
- 경계부분에 해당하는 입력값에서 결함이 발생될 확률이 높기 때문에 경계값을 포함하여 테스팅 <br/><br/>\
# 사례 <br/>\
- x 값이 0~100 사이여야 한다면 <br/>\
-> TC를 (x=0), (X=100) 으로 정의 <br/><br/>\
# 경계갑 선택 지침 <br/>\
- 범위 : 범위 끝 유효 입력값, 범위 바로 바깥 유효하지 않은 입력값 <br/>\
- 몇 개의 값 : 입력값의 최소값과 최대값을 선택 <br/>\
- 파일/리스트/테이블과 같은 정렬된 집합 : 첫번째, 마지막 항목 \
',

// [시험단계][테스트 유형][프로그램 실행여부][동적 테스트][BlackBox]- 원인결과그래프
'# 정의 : 그래프 형태 테스트 케이스 생성 방법 <br/>\
- 자연어로 작성된 명세를 구조화되고 형식화된 그래프 형태로 변환하여 논리적인 상태와 결과의 관계를 표시하여 테스트 케이스를 생성하는 방법 <br/><br/>\
# 구성 <br/>\
- 기본 부호(Identity) : Not OR AND <br/>\
- 제약사항 기호 : Exclusive, Inclusive, Require, One and Only One, Masks <br/>\
- 원인 <br/>\
- 결과 <br/>\
- 인과 그래프 <br/><br/>\
# 절차 <br/>\
- 부분 기능 분할 <br/>\
- 원인, 결과에 일련 번호 할당 <br/>\
- 인과 그래프 작성 <br/>\
- 제한조건 표시 <br/>\
- 결정 테이블 작성 <br/>\
- 중복 축소 <br/>\
- 테스트 케이스 변환 <br/><br/>\
',

// [시험단계][테스트 유형][프로그램 실행여부][동적 테스트][BlackBox]- Decision Table
'# 정의 : 입력 조건 조합 테스트 케이스 도출 <br/>\
- 입력 조건의 모든 조합에 대한 시스템의 액션을 고려하여 테스트 케이스를 도출하는 방법 (조건과 행동으로 구분) <br/><br/>\
# 방법<br/>\
- 조건분석 <br/>\
- 조건은 위, 결과는 아래에 위치한 테이블 생성 <br/>\
- 모든 조건의 조합과 각 결과 기입 <br/>\
- 불가능 조건 조합 삭제 <br/>\
- 동일한 행동을 유발하는 조건 제외\
',

// [시험단계][테스트 유형][프로그램 실행여부][동적 테스트][BlackBox]- 상태전이 테스트
'# 정의 : 입출력 상태 식별 조합 고려 테스트 케이스 도출 <br/>\
- 상태를 가지는 프로그램의 모든 입출력 상태를 식별하고 도달 가능한 모든 상태의 입력 조합을 고려하여 테스트 케이스를 도출하는 방법 <br/><br/>\
# 절차 <br/>\
- 상태전이도 모델링 <br/>\
- 상태-이벤트 테이블 작성 <br/>\
- 상태 전이 트리 작성 <br/>\
- 테스트 케이스 도출 <br/>\
- 비정상 케이스 도출 <br/><br/>\
<img src = "./img/StateTransitionTestingMarking.png" style = "max-width:100%; hegiht:auto;">\
',

// [시험단계][테스트 유형][프로그램 실행여부][동적 테스트][BlackBox]- 페어와이즈
'# 정의 : 적은양 테스트 세트 구성 / 테스트 방법 <br/>\
- 커버해야 할 기능적 범위에 비해 상대적으로 적은 양의 테스트 세트 구성하여 SW 결함 찾고, 테스트에 대한 확신 얻을 수 있는 테스트 방법 <br/>\
- 합리적으로 일정 수준의 보장성을 확보하면서 조합(케이스) 수를 줄여주는 테스트 방법 <br/><br/>\
# 원리 <br/>\
- 대부분 결함이 2개 요소의 상호작용에 따라 발생 <br/>\
- 필요한 각 값들은 다른 파라미터 값과 최소 한번씩은 조합을 이루는 테스트 케이스 사용 <br/><br/>\
# Process 및 사례 <br/>\
<img src = "./img/PairWiseTestProcess.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
# 한계 <br/>\
- 모두 발견 불가능 <br/>\
- 극복방안 : 자동화툴(PICT), 집중 테스트 <br/><br/>\
# 사용전략 <br/>\
- 경적 조합 전략 <br/>\
- 기능, 시간, 비용, 품질수준 고려 테스트 전략 수립 <br/><br/>\
* ITPE 6회 관리 2교시 6번\
',

// [시험단계][테스트 유형][프로그램 실행여부][동적 테스트][BlackBox]- 도메인 테스트
'# 정의 : 상관관계 영역 분할 테스트 <br/>\
- 입력 변수들간에 상관관계가 존재하며 상관관계에 따라 영역을 분할하고 테스트 케이스를 도출하는 방법 <br/><br/>\
# 특징 <br/>\
- 경계값 분석의 확장형 <br/>\
- 상호작용하는 요소들에 대한 적합 <br/>\
- 테스트 케이스 수가 변수 <br/>\
- 요소에 의해 커질 수 있음 <br/><br/>\
# 구성 <br/>\
- IN : 경계값 내-TRUE <br/>\
- OUT : 경계값 외- FALSE <br/>\
- ON <br/>\
1) = : 경계값 TRUE <br/>\
2) <> : FALSE <br/>\
- OFF <br/>\
1) = : FALSE <br/>\
2) <> : TRUE <br/><br/>\
<img src = "./img/도메인테스트.png" style = "max-width:100%; hegiht:auto;">\
',

// [시험단계][테스트 유형][프로그램 실행여부][동적 테스트]- 구조기반 테스트',
'# 정의 : 알고리즘 / 논리적 경로 / 개발자 중심 / (Whitebox)<br/>\
- 프로그램 구조와 알고리즘 위주로 논리적 경로를 파악하거나 경로상의 복잡도를 계산하는 개발자 중심의 테스트 기법 <br/><br/>\
# 특징 : Logic Driven, 오류의 빠른 피드백, 단위 테스트, 디버깅 시 사용 <br/><br/>\
# 종류 : 제자루 <br/>\
1. 기초경로 검사 <br/>\
- 테스트 커버리지 측정 활용 <br/>\
- 독립적 경로 : 반복이 허용되지 않는 유일한 경로 <br/>\
- 절차 : 제어 흐름도 작성 > 회전 복잡도 계산 > 독립경로 결정 > 테스트케이스 도출 > 테스트 <br/><br/>\
2. 제어 구조 <br/>\
- Condition : 프로그램의 논리적 조건 검사 <br/>\
- Data Flow : 변수들이 값 할당 또는 사용된 지점에 따라 테스트 경로 선택 <br/>\
- Loop : 반복 구조에 초점, 단순/중첩/연결/비구조적 루프 검사 <br/><br/>\
* 라이지움 81회 관리 3교시 2번 \
',

// [시험단계][테스트 유형][프로그램 실행여부][동적 테스트][구조기반]- 제어흐름 테스트
'# 정의 : Test Path 순회 입력 테스트 <br/>\
- 요구사항 문서-> 동적 제어흐름 그래프 모델 생성 -> Test Path 선택 순회하는 입력 값을 테스트 데이터 <br/><br/>\
# 종류 : 문장, 결정, 조건, MC/DC <br/><br/>\
# 목적 : Control Flow 오류감지 <br/><br/>\
# 시험 설계 : Statement, Branch, Condition Coverage \
', 

// 테스트 커버리지
'# 정의 : 소프트웨어의 테스트 수행시 얼마나 테스트가 충분한가를 나타내는 지표 <br/><br/>\
# 암기 <br/>\
- 코드의 구조(3) : 구조결 <br/>\
- 종류(6) : 구결조조변다 <br/><br/>\
# 구성 : 구문, 부분조건식, 전체조건식, 결정포인트 <br/><br/>\
# 유형 <br/>\
- 구문(Statement-SC) : 명령문 <br/>\
- 결정(Decision-DC) : 전체 조건식 <br/>\
- 조건(Condition-CC) : 부분조건 <br/>\
- 조건결정(CDC) : 부분, 전체조건 <br/>\
- 변형조건결정(MC/DC) : 개별조건식 <br/>\
- 다중조건(Multiple-MCC) : 개별조건 모든 조합 <br/>\
=> 분기n경우 MC/DC는 n+1, MCC는 2^n <br/><br/>\
<img src = "./img/Coverage.png", style = "max-width:100%; height:auto;"><br/><br/>\
* 라이지움 86회 2교시 4번\
',
  
// MC/DC
'# 정의 : 개별조건식 다른 조건 영향 x / 전체 결정문 결과 독립적 영향 / 테스트케이스 도출 커버리지 <br/>\
- 소프트웨어의 화이트박스 테스트에서 개별조건식이 다른 조건식의 영향을 받지 않고 전체 결정문의 결과에 독립적으로 영향을 미치는 테스트 케이스를 도출하는 테스트 커버리지 <br/><br/>\
# 특징 <br/>\
- 결과에 독립적 <br/>\
- N+1 Test Case <br/>\
* 모든 조건 중에 결과에 영향 없는 조건 빼기 <br/><br/>\
# 도출 프로세스 <br/>\
<img src = "./img/MCDC_Process.png", style = "max-width:100%; height:auto;"><br/><br/>\
# 국제 표준 사례 <br/>\
- 차량(ISO 26262) : ASIL D Level <br/>\
- 항공(DO-178B,C) : Level A 획득 위한 요구사항 <br/><br/>\
# 사례 (대N중테) <br/>\
<img src = "./img/MCDC_Example.png", style = "max-width:100%; height:auto;">\
',

// [시험단계][테스트 유형][프로그램 실행여부][동적 테스트][구조기반]- 자료흐름 테스트
'# 정의 : definition-use paris 이행 설계 테스트 설계 기법 <br/>\
- 테스트 케이스가 변수들의 정의-사용쌍(definition-use pairs)을 이행하도록 설계하는 화이트박스(white box) 테스트 설계 기법 <br/><br/>\
# 특징 <br/>\
- 데이터 중심 <br/>\
- 독립적인 전문 테스트 의한 시험 수행 <br/>\
- 데이터 기준 및 시험 이상현상 항목 명확화 <br/>\
- 데이터 흐름 오류 감지 <br/><br/>\
# 구성(데이터 사용 유형) : DKU<br/>\
- d-정의 : defined, create, initialized <br/>\
- k-소멸 : killed, undefined, released <br/>\
- u-사용 : use, (c:연산, use in calcuation, p:결정 use in predication) <br/><br/>\
# 테스트 기준 : NED PC UP <br/>\
- all-node : statement <br/>\
- all-edge : statement의 흐름/결정 <br/>\
- all-dfes : 정의된 변수 변경전 활용되는 path <br/>\
- all-p-use : 변경되지 않고 결정활용되는 path <br/>\
- all-c-use : 변경되지 않고 연산활용되는 path <br/>\
- all-uses <br/>\
- all-paths <br/>\
- all-c-use / som-p-use <br/>\
- all-p-use / som-c-use \
',

// 경험기반 테스트
'# 정의 : 테스트 케이스 추출 기법 / 유사 App / 경험 / 직관 /능력 <br/>\
- 이전의 유사 App이나 기술에서의 경험, 직관, 테스터의 능력으로부터 테스트 케이스를 추출하는 기법 <br/><br/>\
# 암기 <br/>\
- 기법 : 오분탐체특 <br/><br/>\
# 특징 : Formal 기법이 찾기 어려운 결함 발견, 테스터의 경험에 따라 효과성의 차이가 존재 <br/><br/>\
<img src = "./img/경험기반테스트.png" style = "max-width:100%; height:auto;">\
',

// [경험기반 테스트]- 탐색적 테스팅 
'# 정의 : 경험기반 테스트 <br/>\
- Exploratory Testing <br/>\
- 직전의 테스트를 통해 얻은 통찰력을 다음 테스트에서 충분히 활용하면서 테스트 설계와 수행을 동시에 수행하는 휴리스틱 테스트 기법<br/><br/>\
# 특징 : 시간제한, 창의적 접근, 학습과 진화, 구조화된 관리, 테스트 의존적 <br/><br/>\
# 구성 (세차노회)<br/>\
- 테스트 차터 : 목표, 비전 / 테스트 설계서 <br/>\
- 타임 박스(테스트 세션) : 테스트 시간 / Short (60), Normal (90), Long (120) <br/>\
- 테스트 노트 : 최소한 설명 기록 / 목표, 특이사항, 수행시간 <br/>\
- 요약 보고(회고) : 경험 공유 / 5 ~ 10분 진행 <br/><br/>\
# 프로세스(Cycle) <br/>\
<img src = "./img/ExploratoryTestingProcess.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 테스트케이스 기반 테스트 비교 <br/>\
<img src = "./img/ExploratoryCaseCompare.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 활용 방안 : Risk 기반 테스팅, Agile 테스팅, 인수 테스트 <br/><br/>\
* KPC 94회 관리 4교시 3번 <br/>\
* 아이리포 24회 관리 3교시 3번\
',

// [시험단계][테스트 유형][프로그램 실행여부][동적 테스트][경험기반][탐색적 테스팅]- 테스트 차터
'# 정의 : 이후 진행될 테스트 방향 조정 역할 <br/>\
- 테스트 수행시 주어진 테스팅 세션 시간 동안 커버해야할 테스팅 조건, 진행결과를 기반으로 이후 진행될 테스트 방향을 조정하는 역할 <br/><br/>\
# 구성 <br/>\
- 해당 세션에 대한 미션(목적) <br/>\
- 테스트 방법 <br/>\
- 발견 유형 문제 <br/>\
- 사전에 작성된 결함(Often created in advance) <br/>\
- 범위와 세부내용의 유연성 (Extent and level of detail flexible) \
',

// [시험단계]- 테스트 하네스
'# 정의 : 시험 지원 목적 코드, 데이터 <br/>\
- 시스템 및 시스템 컴포넌트를 시험하는 환경의 일부분으로 시험을 지원하는 목적하에 생성된 코드와 데이터 <br/><br/>\
# 구성 (스하드상) <br/>\
- Test Stub : 가상의 하위 모듈, 하향식(Top Down), 호출되어 결과값을 리턴 <br/>\
- Test Driver : 가상의 상위 모듈, 상향식(Bottom-Up)에 필요, 호출 기능만을 수행 <br/><br/>\
# 활용 : TUD, 자산화하여 회귀테스트 자동화에 활용 \
',

// 테스트 더블
'# 정의 : 대체 위한 테스트용 객체<br/>\
- 오리지널 객체 사용 어려운 경우, 실제구성요소 서버를 대체 위한 테스트용 객체 <br/><br/>\
# 유형 <br/>\
- Dummy Object : 구현제외 I/F, 객체자체 기능x <br/>\
- Test Stub : 기본 클래스 최소구현, 로직x, 값리턴 <br/>\
- Test Spy : 인스턴스 Client 제공, 호출멤버확인, 이력 <br/>\
- Fake Object : 완전구성, 느리거나 DB 미구성 <br/>\
- Mock Objecdt : Lib 사용 동적 데이터 처리 \
',

// 테스트 자동화 도구
'# 정의 : 테스트 수행시간 줄여주는 도구 <br/>\
- 테스트를 수행하는데 필요한 작업을 자동화하여 테스트 수행 시간을 줄여주는 도구 <br/><br/>\
# 특징 : 속도, 효율성, 정확성, 정밀성, 리소스절감, 지속성 <br/><br/>\
# 유형 <br/>\
1. 테스트 관리 지원도구 <br/>\
- 테스트, 요구사항, 형상 <br/>\
- Zabbix : Test 계획, 요구사항 관리 지원 <br/><br/>\
2. 테스트 설계 지원도구 <br/>\
- 설계, 테스트 케이스 생성 <br/>\
- Selenium : 명세, 구조기반 Test 설계 자동화 <br/>\
- xUnit : 주어진 테스트 케이스 내 테스트 정도 평가 <br/><br/>\
3. 정적 테스트 지원도구 <br/>\
- 코드, 데이터 분석, 구조,순서 검사 <br/>\
- Pmd : 코드/구조/데이터 자동화 분석 도구 <br/>\
- Checkstyle : 코딩 표준 준수 <br/><br/>\
4. 동적 테스트 지원도구 <br/>\
- 단위, 테스트 실행, 성능 테스트, 커버리지 측정, 동적 분석, 모니터링, 보안 검사 <br/>\
- Avalache : 프로그램 수행 동안 상태 파악, 변수,조건 스냅샷 생성 <br/>\
- Valgrind : 메모리, 쓰레드 결함 발견 <br/><br/>\
* 121회 관리 3교시 2번 <br/>\
* KPC 96회 관리 2교시 4번\
',

// 정적분석도구 
'# 정의 : 소스코드의 코딩표준, 스타일, 복잡도, 잔존결함 발견도구 <br/><br/>\
# 절차 <br/>\
1. 서버-엔진(SonarQube)에서 정적분석 결과 생성 및 DB 저장 <br/>\
2. 분석도구의 분석툴 이용 CI 서버 연계로 분석 <br/><br/>\
# 분류 <br/>\
- 코드분석 도구 <br/>\
- 구조검사 도구 <br/>\
- 의미기반 분석도구 \
',

// Record and Replay
'# 정의 : 결과 확인 방법 / 타겟 시스템 / 이벤트 기록 /테스트 스크립트 구성 / 재수행 <br/>\
- 타켓 시스템에서 발생하는 사용자 입력 및 외부 이벤트를 기록해서 테스트 스크립트로 구성하고 이를 재수행하여 결과를 확인하는 방법<br/><br/>\
# 암기 <br/>\
- 절차(9) : 캡이송저재이T임전 <br/><br/>\
# 특징(3) <br/>\
- 이벤트 시스템 대응여부 확인 <br/>\
- 이벤트 <br/>\
- 임베디드 시스템 사용 <br/><br/>\
# 절차(2) <br/>\
- Record(4) : 캡처시작 > 이벤트 후킹 > 송신 > 저장 <br/>\
- Replay(5) : 테스팅 재수행 > 이벤트 검색/변환 > Test Agent 전달 > 임베디드 시스템 전달 > 전달결과 <br/><br/>\
# 구성 <br/>\
- Test Agent <br/>\
- Test Target : 임베디드 SW <br/>\
- Event Hooking <br/>\
- Recorder <br/>\
- XML Repository<br/>\
- RePlayer <br/>\
- Reporter <br/><br/>\
# 활용 : 이벤트기반 시스템 테스트, 임베디드 SW 테스트 적합<br/><br/>\
<img src = "./img/RnR.png" style = "max-width:100%; hegiht:auto;">\
',

// 테스트 오라클 
'# 정의 : 미리 정의한 참 값 비교 방법 <br/>\
- 테스트 수행결과 판단하기 위해 미리 정의한 참 값을 대입하여 비교하는 방법 <br/><br/>\
# 특징 <br/>\
- 제한된 검증 <br/>\
- 수학적 기법 <br/>\
- 전문지식 <br/>\
- 자동화기능 <br/><br/>\
# 유형 <br/>\
- 참 : 회귀, 임베디드 SW <br/>\
- 샘플링 : 연구용 SW, 인공지능 <br/>\
- 휴리스틱 : 통계분석 <br/>\
- 일관성 검사 : Consistent Oracle, 상용 SW <br/><br/>\
# 구성 <br/>\
- 요구 명세서 <br/>\
- 시스템 제약 <br/>\
- 테스트 오라클 <br/>\
- 테스트 자동화 도구 <br/>\
- 테스트 케이스 <br/>\
- TestDB (결과보고) <br/>\
- 분석 및 보고 <br/>\
- 개선 활동 \
',

// 회귀 테스트 
'# 정의 : 변경후 검증 테스트 <br/>\
- 프로그램 변경후 영향 받는 기존 프로그램의 테스트를 수행하여 신규결함 유입여부를 검증하는 테스트 기법 <br/><br/>\
# 목적 <br/>\
- Ripple Effect : 파급효과 <br/>\
- Side Effect : 부작용 <br/><br/>\
# 절차 <br/>\
- Smoke Test <br/>\
- Test 진행 <br/>\
- 결과 기록 및 사후 검증 <br/><br/>\
# 기법 <br/>\
- reset all <br/>\
- selectivity <br/>\
- Priority <br/><br/>\
# 고려사항 : 전략적 Test Case 설계, 주요대상 선정, 반복횟수 선정, Test Case 관리, 추가적 테스팅 기법 활용 , stub/driver 재사용, Record&Replay\
',

// 위험기반 테스트
'# 정의 : 테스트 전략 / 우선순위 / 자원 집중 <br/>\
- 비즈니스/기술상 위협 정량 측정하여 우선순위 높은부분 테스팅 자원집중, 전체영향 줄이는 테스트 전략<br/><br/>\
# 암기 <br/>\
- 절차(4) : 식분대전추 <br/>\
- Risk Mtrix 영역(4) : 스타, 쓰타, 이타, 에프타 <br/>\
- 발장 : 엄강집기 <br/><br/>\
# 절차 <br/>\
- 위험식별 : 위험아이템, 카테고리 <br/>\
- 분석 : 위험/영향 Matrix <br/>\
- 리스크대응 계획 : 완화 방안 <br/>\
- 테스팅 전략 수립 : Master Test Plan <br/>\
- 리스크 추적 : 위험추적/관리대장 <br/><br/>\
# 효율화 방안 <br/>\
- 단계별 테스팅 <br/>\
- 선택과 집중 <br/>\
- 경험기반 테스트 병행 <br/>\
- 사용자 참여 유도 <br/>\
- 기술중심 테스트 <br/>\
- 테스트 자원 집중 분배 <br/><br/>\
# 리스크 매트릭스 : Y-발생가능성(Likelihood), X-장애영향(Impact)<br/>\
- 상상 : STA(엄격한 Server Test Area) 재테스팅 3회, Full Regession Test <br/>\
- 상하 : SSTA(강한 Strong Test Area) 재테스팅 2회, Full Regession Test <br/>\
- 하상 : ITA(집중 Intensive Test Area) 재테스팅 1회, Partial Regession Test <br/>\
- 하하 : FTA(기본 Fundamental Test Area) 재테스팅 1회, 확인 테스트 <br/><br/>\
# 유사 개념 <br/>\
- 결함 테스트 : 미발견 결함 탐색<br/>\
- 확인 테스트 : 수정 결과 확인 <br/>\
- 회귀 테스트 : 영향테스트 <br/><br/>\
* 제품리스크 = 가능성 * 손실 <br/><br/>\
<img src = "./img/RBT.png", style = "max-width:100%; height:auto;">\
',

// 소프트웨어 보안 테스팅
'# 정의 : 테스팅 기법 / SW 배포전 / 강건성 / 보안성 확인 예방 <br/>\
- SW배포전 강건성(Robustness)과 보안성을 확인하여 보안 취약점 예방 위한 테스팅 기법 <br/><br/>\
# 암기 <br/>\
- 목적(3) : 강보취 <br/>\
- 방법(5) : 위정퍼취침 <br/><br/>\
# 분류 : 정적분석, 동적분석 <br/><br/>\
# 방법 <br/>\
- 위험분석(Risk Analysis) <br/>\
- 정적분석 : 코드검토, 자동화된 정적분석(버퍼오버플로우, 타입체킹등) <br/>\
- 퍼즈테스팅(블랙/화이트) <br/>\
- 취약점 스캐닝 : 시그니처 매칭 방식 <br/>\
- 침투 테스트 : 블랙박스 테스팅, 윤리적 해킹\
',

// A/B 테스팅
'# 정의 : 동시 테스팅 <br/>\
- 두가지 이상 버전 통제된 상황에서 더 나은 것을 판별/실험하는 기법 <br/><br/>\
# 특징 : 저비용, 낮은 위험, 직관적 반응 확인, 근본적 원인 찾을 수 없음 <br/><br/\
# 절차 <br/>\
- 현상 측정 <br/>\
- 우선순위 결정 <br/>\
- 실시 <br/><br/>\
# 측정기준 : 클릭율, 전환율, 비용효율, 이탈율 <br/><br/>\
',

// 지각 테스팅 
'# 정의 : 바이너리 이미지 비교 테스트 <br/>\
- perceptual Testing <br/>\
- 애자일 방법론의 반복 개발개념에 기반하여 바이너리 이미지 비교를 통해 UI 테스팅의 일정부분 자동화를 가능케하는 테스팅 기법 <br/><br/>\
# 절차 <br/>\
- 스크린샷 저장 <br/>\
- 새 릴리즈 스크린샷 저장 <br/>\
- URL 페어링 <br/>\
- 그래픽 비교 <br/>\
- 수동 검사 <br/><br/>\
# 도구 <br/>\
- DPXDT : 구글, 파이썬으로 작성, 오픈소스, Restful API <br/>\
- Viff : ThroughtWorks 오픈소스, Selenium WebDriver <br/>\
- Pix-Diff : 자바스크립트로 작성됨, 오픈소스 <br/>\
- Applitools : 클라우드 기반, SDK제공, 사용, 다중브라우저 및 기기 지원 <br/><br/>\
# 적용분야 : Web App, 지능형 App, Big Data\
',

// 뮤테이션 테스트 
'# 정의 : 애매모호 찾기 위한 결함기반 테스트 기법 <br/>\
- 의도적으로 프로그램의 원시부호를 변형시키고 이에 맞게 디자인된 테스트 데이터를 실행시켜 프로그램 코드 내에 존재할 수 있는 애매모호한 부분을 찾아내기 위한 결함기반 테스트 기법 <br/><br/>\
# 특징 <br/>\
- 테스트 케이스 검증 <br/>\
- 테스트 케이스의 정당성과 신뢰감 확인 <br/>\
- 테스트 결과에 신뢰감 부여 <br/><br/>\
# 절차 <br/>\
- 원 프로그램 테스팅 <br/>\
- 뮤턴트(돌연변이) 생성 <br/>\
- 뮤턴트 테스팅 <br/>\
- 결과비교 <br/><br/>\
# 뮤턴트 생성 기법 <br/>\
1. 구조적 : 상수대치, 변수대치, 상수<-> 변수 대치 <br/>\
2. 객체지향적 : 상속성, 다형성 <br/><br/>\
# 기법 <br/>\
- Do Fewer : 샘플링, 효율성 유지, 비용절감 <br/>\
- Do Smarter : 분산처리, 비용절감 <br/>\
- Do Faster : 여러 뮤턴트를 하나로 통합, 일괄 컴파일하는 MSG 기법, 시간단축 \
',

// 비버깅
'# 정의 : 의도적 오류 삽입 <br/>\
- 의도적으로 오류코드를 삽입하여 해당 오류의 검출여부를 측정하는 결함기반 테스트 <br/><br/>\
# 특징 <br/>\
- 테스트 수행 수준 체크 <br/>\
- 의도적 오류 코드 삽입 <br/>\
- 잔존 오류 추정 <br/>\
- 디버깅 능력 측정 <br/>\
- 프로그램 배포 시기 결정 \
', 

// IAST
'# 정의 : 보안 취약점 검증 기법 / 소스코드 / 동적 분석 / 재검증 / 오탐률 최소화 / Exploit <br/>\
- 소스코드상의 보안 취약점을 검증하고, 탐지된 취약점을 동적 분석으로 재 검증하여 오탐률을 최소화하며, 탐지된 보안 취약점에 대한 Exploit 기능 제공으로 보안 취약점을 검증기법',

// 백투백 테스트
'# 정의 : 상이한 버전 / 동일 입력값 / 출력 결과 비교 <br/>\
- 2개 이상의 상이한 버전의 프로그램상에서 동일한 입력값에 대한 출력결과를 비교하는 테스트 기법 <br/><br/>\
# 구성요소 <br/>\
- 동일 요구 명세서 <br/>\
- 병행 개발<br/>\
- 병행 테스트<br/>\
- 구현 정확성 판단<br/><br/>\
# 절차 <br/>\
- 테스트 케이스 작성 <br/>\
- 테스트 병렬 수행 <br/>\
- 출력 결과값 비교 <br/>\
- 불일치시, 원인 분석 <br/><br/>\
# 활용범위 <br/>\
- ISO 26262 <br/>\
- 원자력, 풍력 발전 <br/>\
- ASIL <br/><br/>\
* ITPE 7회 관리 4교시 2번\
',

// Cursory Test 
'# 정의 : 개발자 / Positive Test Case / 기능, 단위 테스트 <br/>\
- 개발자가 코딩후, 보통 Positive한 테스트 케이스로 기능 테스트 <br/><br/>\
# Cursory, Sanity, Smoke Test 관계 <br/>\
<img src = "./img/CursoryTestOverview.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
<img src = "./img/CursoryTestOverview2.png" style = "max-width:100%; hegiht:auto;">\
',

// Smoke Testing
'# 정의 : 초기빌드 대상 / 테스트 가능 여부 / 주요기능 중심 수행 <br/>\
- 본격적 테스트 수행전, 시스템/컴포/구축환경에서 테스트가 가능한지 여부를 판단, 간단 모듈/시스템 테스트 <br/><br/>\
# 구성요소 <br/>\
- 매뉴얼 : 시스템, 컴포넌트, SW 운영자 매뉴얼 / HW, SW 매뉴얼 <br/>\
- Build : 테스트 대상 되는 제품 빌드 / Daily Build <br/>\
- Tester : 제3자 테스트팀 or 개발팀 내 테스트 팀 / QA <br/>\
- Test 분석 정보 : 결과물, 빌드 완성도 낮을 경우 활용 정보 / 스모크 테스트 결함 보고서 <br/>\
- 인프라 : 테스트 수행 위한 WH, SW 자원 / 서버, 솔루션 <br/><br/>\
# 절차 <br/>\
- 사전준비 : 스모크 테스트 수행 위한 시스템 환경 구성 / 시스템 구성도, 메뉴얼 <br/>\
- Build : 스모크 테스트 대상 제품 빌드 / 프로그램, 패키지 <br/>\
- 테스트 수행 : 주요 모듈, 시스템 간단 테스트 / 테스트 계획서 <br/>\
- 결과 보고 : 테스트 수행 결과 보고 / 테스트 결과서 <br/><br/>\
<img src = "./img/smoke.png" style = "max-width:100%; hegiht:auto;">\
',

// Sanity Testing
'# 정의 : UAT 전, 전문 테스터 / 마무리 단계 빌드 대상 실행 <br/>\
- 새로운 SW Version이 주요 테스팅 업무를 수행하기에 충분히 적합한가를 판단하기 위해 수행되는 테스트 <br/><br/>\
# Overview <br/>\
<img src = "./img/SanatiyTest.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
# 특징 <br/>\
- 대상 : 일부 제한된 기능 대한 자세한 테스트 <br/>\
- 형식 : non-script 형식 <br/>\
- 용도 : 최종 사용자 요구사항 만족 여부 증명 사용 <br/>\
- Regression Test 하위 집합 <br/><br/>\
# Keyword : 합리성(Rationality) 검증 / Unscripted 테스트 / 인수 테스트 전 / BAT <br/><br/>\
* Sanity : 온전한 정신(상태), 분별 \
',

// Concolic Test
'# 정의 : 데이터 생성 테스트 기법 / 모든 경로 탐색 <br/>\
- 특정 프로그램 경로나 포인트 대신에 프로그램의 모든 경로들을 탐색하여 테스트 데이터를 생성하는 테스트 기법 <br/><br/>\
# 암기 : 콘실심 <br/><br/>\
# Keyword : 실제 실행(Concrete execution) + 심볼릭 수행(Symbolic execution) <br/>\
- 실제 실행(Concrete Execution) : 대상 프로그램을 정적으로 테스트하는 도구 <br/>\
- 심볼릭 경로 수식(Symbolic Path Formula) 추출 방법 : 심볼릭 경로 수식을 추출하기 위해 수정된 가상머신을 활용하는 방법 \
',

// Fuzz
'# 정의 : 취약점 테스트 방법 / 무작위 데이터 입력 / 조직적 실패 유발<br/>\
- SW에 무작위 데이터를 입력하여 SW의 조직적 실패를 유발함으로써 SW의 보안 취약점을 찾아내는 테스트 방법 <br/><br/>\
# 커버리지 <br/>\
- Direct Physical Attack : NW(OBD), File System, File/Media <br/>\
- Indirect Physical Attack : Application <br/>\
- Local/Remote Wireless Attack : Application, NW <br/><br/>\
# 절차 <br/>\
- 테스트 대상 분석 : 시스템 식별 및 특징 분석 <br/>\
- 입력 값 선정 : 오류 유발 입력값 선정 <br/>\
- 테스트 케이스 생성 : 입력값 대한 테스트 케이스 생성 <br/>\
- 테스트 실행 : 테스트 케이스 입력, 실행 <br/>\
- 시스템 동작 모니터링 : 문제 발생시 로그 수집 <br/>\
- 분류 및 해결 : 문제 발생 항목 점검, 원인 분석 및 코드 수정 <br/><br/>\
# 테스팅 기법 <br/>\
- 블랙박스 퍼징 : <font color = "red">내부 분석 x</font> 무작위 입력값 <br/>\
- 화이트 박스 퍼징 : <font color = "red">소스 코드</font> 기반 분석, 입력값 산출 <br/>\
- 그레이 박스 퍼징 : 내부 구조 <font color = "red">일부</font>만 알고 입력값 산출 <br/><br/>\
# 데이터 변조 방식 <br/>\
- 뮤테이션 기반 퍼징 : 기존 입력값, 임의 <font color = "red">대체, 삭제, 추가</font> <br/>\
- 제너레이션 퍼징 : 파일 포맷, 프로토콜 스펙 분석, 취약 공격 <br/><br/>\
# 고려사항 : 종료 조건 생성, 취약점 분석 능력, 풍부한 프로토콜 및 프로그램 지시<br/><br/>\
* ITPE 7회 관리 4교시 2번\
',

// Shift-left Testing
'# 정의 : 과정 최적화 테스트 / 초기 결함 발견 / 빠른 피드백 <br/>\
- 소프트웨어 개발 라이프 사이클 (SDLC) 초기에 결함을 발견하고 해결하여 결함 분석 시간을 줄이고 빠른 피드백을 통해 개발 전 과정을 최적화시키는 테스트\
',

// TMMi 
'# 정의 : SW 테스트 활동의 전략, 정책, 프로세스 진단하고 개선하기 위한 성숙도 모델 <br/><br/>\
# 특징 : CMMi 보완, 테스트 조직 평가, 글로벌 통용 <br/>\
# 단계 <br/>\
- Initial > Managed > Defined > Managed & Measurement > Optimization \
',

// ISO/IEC/IEEE 29119
'# 정의 : SW Testing 국제 표준 <br/>\
- SW개발 생명주기 전 과정에 걸쳐 있는 테스팅 프로세스와 관련 산출물에 대한 국제 표준 (표준적 테스트 기법 포함) <br/>\
- 테스팅과 품질에 대한 인식 개선, 객관적 지표 수립 <br/><br/>\
<img src = "./img/ISOIEC29119_2.png" style = "max-width:100%; hegiht:auto;">\
',

// ISO/IEC 33063
'# 정의 : 테스팅 프로세스 심사를 위한 국제 표준 모델 <br/>\
- ISO/IEC 29119-2(Teset Process)를 기반으로 한 소프트웨어 테스팅 프로세스 심사를 위한 국제 표준 모델 <br/><br/>\
# 특징 <br/>\
- T-PAM(Testing Process Assessment Model) 표준화 <br/>\
- 한국 주도 심사모델 <br/><br/>\
',

// ISO/IEC 20246
'# 정의 : SW 테스트 산출물 국제 표준 / 주석, 개발 산출물 포함 <br/>\
- SW 테스트 작업 산출물 리뷰(Work product Reviews)에 대한 국제표준. 작업산출물은 소스코드의 주석, 개발 산출물 등을 포함하는 개념임<br/><br/>\
# 암기 <br/>\
- 내용 : 프유기 <br/><br/>\
프로세스 : 계준,오,미,이분,수리 <br/>\
- 유형 : MPWTI <br/>\
- 기법 : 에체시관 <br/><br/>\
# 특징 <br/>\
- T-PAMT(Testing Process Assessment Model) 표준화 (TPI, TMMi, Test SPICE등 통합표준화)<br/>\
- 한국 주도 심사모델 : 국가 기술표준원, STA <br/>\
- 참조 모델 : 29119-2, 15504-5 <br/><br/>\
# 심사 대상 : 테스트 전략수립, 환경구축, 결함관리, 리포팅 등 100여개로 구성되며 SW 테스팅 전 생명주기가 대상 <br/><br/>\
# 구성 <br/>\
- Scope : 테스트 프로세스 범위 <br/>\
- Normative Reference : 참조모델 소개 <br/>\
- Terms and Definitions<br/>\
- Overviews of the exampler<br/>\
- Test Process Assessment Model<br/>\
- The Process Dimenssion and Process Performance Indicators (OTDS <- 2019) <br/>\
- Test Process Capability indicator : 5등급 PMEPO <- 15504-5 <br/><br/>\
<img src = "./img/ISOIEC20246_1.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
<img src = "./img/ISOIEC20246_2.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
',

// TPI
'# 정의 : 테스트 프로세스 단계적 향상, 개선 <br/>\
- 조직내 테스트 프로세스의 단계적 향상과 테스트 프로세스 개선을 쉽게 수행하기 위한 모델 <br/><br/>\
# 구성 <br/>\
- Key Area : 테스트 프로세스에서 관련기술, 도구, 보고서 <br/>\
- Levels : KA 시험 성숙도 레벨 분류 <br/>\
- Test Maturity Matrix : KA간 의존관계, 테스트 프로세스 수준 보여줌 <br/>\
- Check point : 각 레벨별 요구사항 정의 <br/>\
- Improvement Suggestrion : 특정 레벨 취득 위한 제안 \
',

// TCoE 
'# 정의 : 테스트 역량 증진 센터 <br/>\
- Test Center Of Excellence <br/>\
- 개별 조직이나 프로젝트 단위로 수행되는 테스트 업무를 한 곳에 집중해 프로세스와 툴 등의 Resource를 효율적으로 사용, 이를 통해 최고의 테스팅 성과를 거두기 위한 테스트 FW, 표준화된 테스트 방법론, 모범사례, 자동화, 측정 및 도구를 제공하는 소프트웨어 테스트에 대한 역량을 증진하는 센터 <br/><br/>\
# 목적 <br/>\
- 테스트프로세스 개선 <br/>\
- 전문지식 서비스 <br/>\
- 프로젝트 지원 <br/>\
- 테스트 역량강화를 통한 기업의 품질 경영 및 비즈니스 효과적 지원 <br/><br/>\
# 핵심요소 <br/>\
- 전략 : 테스트 정책 및 전략 <br/>\
- 프로세스 : 생명주기 <br/>\
- 도구/인프라 : 테스트관리도구, 결함관리도구 <br/>\
- 인력/조직 <br/><br/>\
# 구현 방법 : 인식 > 내재화 > 전개 > 개선 \
',

// 테스팅 가이드 
'# 정의 : 테스팅 실무에 필요한 Nipa 소프트웨어공학센터 제공 가이드 <br/>\
- 소프트웨어 테스팅에 대해 기본부터 테스팅 도구, 테스팅 지표 등 실무에 필요한 사항까지 정리한 Nipa 소프트웨어 공학센터 제공 가이드 <br/><br/>\
# 특징 : 기본/실무전반, 국제표준활용, 무료SW도구 위주 제시 <br/><br/>\
# 유형 <br/>\
- 테스팅 관리 지원도구 <br/>\
- 정적테스팅 지원도구 <br/>\
- 테스팅 설계 지원도구 <br/>\
- 테스트 실행 및 로깅 지원도구 <br/>\
- 성능과 모니터링 지원도구 \
',
 
// 테스트 케이스(IEEE 829)
'# 정의 : 프로그램의 측정 가능한 상태에 대한 정보, 상황, 이벤트, 입출력 값을 포함하는 데이터로 구성된 테스트를 수행하기 위해 기본이 되는 문서화된 항목 <br/><br/>\
# Key word : 식별자, 테스트 항목, 입력 명세, 출력 명세, 환경 설정, 특수 절차 요구, 의존성 기술 <br/><br/>\
# 구성도 <br/>\
<img src = "./img/IEEE829.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 구성요소(IEEE 829) <br/>\
- 식별자 : 추적성 <br/>\
- 테스트 항목 : 테스트 대상 <br/>\
- 입력 명세 : 입력 값 <br/>\
- 출력 명세 : 출력 값 <br/>\
- 환경 설정 : 테스트 베드 <br/>\
- 특수절차 요구 : 프로세스 <br/>\
- 의존성 기술 : 선/후 관계 <br/><br/>\
* 라이지움 87회 1교시 5번\
',
 
// Agile Test
'# 정의 : 개발과 테스트 사이의 지속적 통합을 목표로 비연속적이고 짧은 반복 주기를 갖는 테스트 방법론 <br/><br/>\
# Agile Test 4분면 <br/>\
<img src = "./img/AgileTest4Metrix.png" style = "max-width:100%; height:auto;"><br/><br/>\
# Agile Test 기법 <br/>\
<img src = "./img/AgileTestMethod.png" style = "max-width:100%; height:auto;"><br/><br/>\
* KPC 96회 관리 2교시 4번\
',
 
// Test 자동화 도구
'<img src = "./img/TestAutomationTool.png" style = "max-width:100%; height:auto;">\
',

// BMT
'# 정의 : 실존 두 대상 / 비교 분석 / 수행 평가 <br/>\
- Benchmark Test <br/>\
- 실존하는 비교 대상을 두고 하드웨어나 소프트웨어의 성능을 비교 분석하여 수행하는 평가 <br/><br/>\
# 법적 근거 <br/>\
- 소프트웨어 산업 진흥법 제 13조 2 : 소프트웨어 품질성능 평가시험 <br/>\
- 소프트웨어 산업 진흥법 시행규칙 제 6조 2 : 품질성능 평가시험의 대상 등 <br/>\
- 소프트웨어 산업 진흥법 시행규칙 제 6조 3 : 평가시험의 의뢰 등 <br/><br/>\
# 적용대상, 제외 기준 <br/>\
- 적용대상 : 분리발주 대상 SW 5천만원 이상 <br/>\
- 제외기준 : 5천만원 미만 / 조달청 구매 / 발주 기관장 판단 TTA 기관 의장 협의 <br/><br/>\
# 구성요소 (<font color = "red">참발수심</font>)<br/>\
- BMT 참여 업체 <br/>\
- 발주처 <br/>\
- BMT 수행 기관 <br/>\
- BMT 심의 위원회 <br/><br/>\
# BMT POC 비교 <br/>\
<img src = "./img/BMT_POC_Compare.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 110회 관리 2교시 3번\
',

// SRGM
'# 정의 : 테스트 시간 경과 / 결함 발견, 수정, 제거 / 고장 확률 감소 / 신뢰도 증가, 발생 간격 증가 / 수학적 모델 표현 기법 <br/>\
- Software Reliability Growth Model <br/>\
- 소프트웨어 테스트 시간이 경과함에 따라 소프트웨어 내에 잠재하는 결함수가 발견, 수정, 제거되어 고장 확률 발생이 감소됨에 따라 소프트웨어 신뢰도가 증가되고 고장의 발생 간격이 길어지는 현상을 수학적 모델로 표현한 기법 <br/><br/>\
# 모델 <br/>\
1. 시간계측 모델 : 고장 발생시간, 결함 발견시간 기초 <br/>\
- Goel-Okumoto <br/>\
- Littlewood <br/><br/>\
2. 개수 계측 모델 : 고장 ,결함 수 기초<br/>\
- NHPP <br/>\
- Musa <br/><br/>\
3. 가용시간 모델 : 정상, 중단 상태 기초<br/>\
- Shooman <br/>\
- Shooman-Trivedi <br/><br/>\
4. 경향 곡선 모델 : 잠재 결함수 회귀 분석 <br/>\
- Logistic 곡선 <br/>\
- Gomperts 곡선 <br/><br/>\
* 124회 관리 2교시 4번\
',

// 레만의 원리
'# 정의 : 변화 원리, 핵심 개념 <br/>\
- SW 변화의 원리와 유지보수의 핵심개념을 설명한 이론 <br/>\
- E-type 소프트웨어에 대해 변화 원리를 제시 <br/><br/>\
# 내용 <br/>\
- 프로세스 : 계속적 변경, 복잡도증가, 자가규제 <br/>\
- 조직 : 조직적 안정화 유지 <br/>\
- 시스템 : 친근성 유지, 게속적 성장, 감소하는 품질\
',

// Code Smell
'# 정의 : 비효율적 프로그램 <br/>\
- 읽기 어려운 프로그램이나 중복된 로직을 가진 프로그램 <br/>\
- 복잡한 조건문이 포함된 프로그램등 리팩토링으로 해결될 수 있는 문제가 있다는 징후를 알려주는 것 <br/><br/>\
# 특징 <br/>\
- 읽기 어려운 프로그램 <br/>\
- 중복된 로직을 가진 프로그램 <br/>\
- 실행 중인 코드를 변경해야 하는 특별한 동작을 요구하는 프로그램 <br/>\
- 복잡한 조건문이 포함된 프로그램 <br/><br/>\
# 유형 및 리펙토링<br/>\
- 중복된 코드 : 중복 제거 <br/>\
- 긴 메소드 : 메소드 분리<br/>\
- 큰 클래스 : 클래스 경량화<br/>\
- 긴 파라미터 리스트 : 파라미터 경량화<br/>\
- 두가지 이상의 이유로 수정되는 클래스 : 클래스 수정<br/>\
- 여러 클래스를 동시에 수정 : 응집도 증가<br/>\
- 다른 클래스를 지나치게 이용 : 매소드 이전<br/>\
- 유사 데이터들의 그룹 중복 : 독립된 클래스 정의<br/>\
- 기본 데이터 타입 선호 : 같은 작업을 수행하는 기본 데이터의 그룹을 별도의 클래스로 만듦<br/>\
- Siwtch, if 문장 : 다형성으로 변경<br/>\
- 병렬 상속 계층도 : 호출 당하는 쪽 변경<br/>\
- 게으른 클래스 : 제거, 합병<br/>\
- 지나친 일반화 : 상속 제거<br/>\
- 임시 속성 : 속성을 메소드의 내부로 옮김<br/>\
- 메시지 체인 : 직접 사용<br/>\
- 미들 맨 : 미들 맨 역할 객체 제거<br/>\
- 부적절한 친밀성 : 다른 클래스 레퍼런스 유지 금지<br/>\
- 미완성 라이브러리 클래스 : wrapping class 이용<br/>\
- 데이터 클래스 : 이 클래스의 데이터를 주로 사용<br/>\
- 상속 거부 : 클래스 합병<br/>\
- 주석 : 주석 없이도 코드를 이해할 수 있도록 변경<br/><br/>\
* 라이지움 78회 3교시 1번\
',

// Refactoring
'# 정의 : 내부 구조 개선 기법 <br/>\
- 소프트웨어의 기능은 변경하지 않고 내부 구조를 개선하여 가독성, 성능, 로직개선을 수행하는 품질 향상 기법 <br/><br/>\
# 절차 <br/>\
<img src = "./img/Refactoring_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
1. 소규모 변경 : 단일 리펙토링 <br/>\
2. 코드가 전부 잘 작동되는지 테스트 <br/>\
3. 전체가 잘 작동하면 다음 리펙토링 단계 전진 <br/>\
4. 작동하지 않으면 문제를 해결하고 리펙토링 한 것을 undo 하여 시스템이 작동되도록 유지 <br/><br/>\
# 주요기법 <br/>\
1. 클래스의 역할 명확화 <br/>\
- Extract Class / Method : 명확한 단위 분리<br/>\
- Push Down Method : 일부만 관련된 경우 이동<br/><br/>\
2. 커플링 최소화 <br/>\
- Move Method : 결합도 높은 경우 이동<br/>\
- Move Attribute : 결합도 높은 경우 이동<br/><br/>\
3. 접근제어 <br/>\
- Self Encapsulated Field : 참조시 접근 제어<br/><br/>\
4. 조건 단순화 <br/>\
- Decompose Condition : 작은 조건식으로 분해<br/>\
- Remove Parameter : 파라미터 제거 조건 단순화<br/><br/>\
5. 가독성 향상 <br/>\
- Replace Temp with Query : 임시변수를 메소드 호출로 대체<br/>\
- Rename Method : 메소드 명칭 명확화<br/><br/>\
6. 기타 <br/>\
- Inline Method : 호출하는 곳에 메소드의 몸체를 넣고 메소드를 삭제<br/>\
- Subtitute Algorithm : 메서드의 몸체를 새로운 알고리즘으로 교체<br/><br/>\
* 라이지움 78회 3교시 1번\
',

// 3R
'# 정의 : S/W 생산성 극대화 기법 (Reverse Engineering, Re-engineering, Re-use) <br/>\
- 완성된 소프트웨어 실체를 Repository 기반으로 역공학, 재공학, 재사용을 통해 소프트웨어 생산성을 극대화하는 기법 <br/><br/>\
# 특징 : 생산성 향상, 표준화, 유지보수 용이 <br/><br/>\
# 고려사항 : 비용증가, 전문인력 필요 <br/><br/>\
# 상세 설명 <br/>\
- Reverese Eng : 기존 시스템 역 분석 <br/>\
- Re-Eng : 기존 시스템 변환 <br/>\
- Re-Use : 재사용 SW 파악 <br/><br/>\
# 관계도 <br/>\
<img src = "./img/3R_Relation.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 실무사례 <br/>\
<img src = "./img/3R_Stragetic.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 119회 관리 4교시 2번\
',

// Reverse Engineering (저작권)
'# 정의 : 호환성 확보 <br/>\
- 일반적인 역공학은 디컴파일, 실행, 조사하는 행위로 부터 원시 프로그램을 추출하여 분석하는 일련의 과정으로 이해되는 반면, 저작권 측면에서의 역공학이란 호환성 확보를 위한 목적 <br/><br/>\
# 규정 <br/>\
- 허가 : 저작권기반(정당한 권리), 기술향상(호환에 필요한 부분해석), 고객 needs확보(대체 가능성) <br/>\
- 제한 : 무단복제, 변환/개작/재배포, 계약위반 <br/><br/>\
# 기술적 보호조치 : 디지털 저작물 확인/증명, 위변조 방지, 추적기술 \
',
 
// Reverse Engineering 
'# 정의 : 자동화된 도구(CASE)의 도움으로 물리적 수준의 소프트웨어 정보를 논리적인 소프트웨어 정보의 서술로 추출하는 프로세스 <br/><br/>\
# 특징 : 기존 SW 분석 지원, 유지보수성 향상, CASE 사용 용이 <br/>\
<img src = "./img/ReverseEngineering.png" style = "max-width:100%; height:auto;"><br/><br/>\
* CASE(Computer aided software engineering) : 컴퓨터 지원 시스템 공학 <br/><br/>\
* 119회 관리 4교시 2번\
',
 
// Re Engineering
'# 정의 : 자동화된 도구로 현존하는 시스템을 점검 또는 수정하는 프로세스로 시스템의 재설계, 교체를 CASE 도구로 사하도록 순공학을 준비하는 과정 <br/><br/>\
# 특징 : 유지보수성 향상, 표준 준수 <br/><br/>\
<img src = "./img/ReEngineering.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 119회 관리 4교시 2번\
',
 
// Re use
'# 정의 : 이미 개발 완료된 결과물을 신규 개발 SW에 적용하는 Process <br/><br/>\
# 특징 <br/>\
<img src = "./img/ReUse.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 119회 관리 4교시 2번\
',

// Anti-Reversing
'# 정의 : 원 소스코드를 분석하는 컴파일 과정의 역과정 기술인 리버싱 행위를 방해하는 기술 <br/><br/>\
# 주요도구 <br/>\
1. Themida <br/>\
- Anti-Debugger Detection : 디버거 탐지시 SW 보호하는 기능 <br/>\
- Anti Dumpers : 메모리 덤프 회피 방안 제시 <br/><br/>\
2. Code Virtualizer <br/>\
- 원소스 가상명령어 변환 : 가상머신이 매번 난독화할 때마다 벼경 <br/>\
- 머신 호환 이진코드 생성 : 특정 머신의 이진코드를 다른 머신에서 생성할 수 있도록 변경 <br/><br/>\
3. VMProject <br/>\
- 프로그램 바이너리 변경 : 내부 파일에서 보호되고 있는 코드의 일부분을 변경 <br/>\
- 복호화 없이 상태 실행 가능 : 가상 CPU에서 코드 실행 \
',

// 코드가상화
'# 정의 : Protector 통한 Virtualized Code 생성 Anti Reversing 기술 <br/>\
- 원래의 코드를 Protector 통해 Virtualized Code 생성하여 개발자가 만든 SW적 핸들러가 처리하는 안티리버싱 기술 <br/><br/>\
# 구성요소 <br/>\
- Virtualized Code <br/>\
- Virtual CPU <br/>\
- Real CPU <br/>\
- Normal Code <br/>\
- Protector <br/><br/>\
# 동작 <br/>\
1. 가상화 코드 생성 <br/>\
2. Virtual CPU 동작 <br/>\
3. 핸들러 처리 \
',

// ISO/IEC 14764
'# 정의 : 유지보수 프로세스 상세 유형 국제 표준 / ISO 12207 참고 / 4가지 유지보수 유형 <br/>\
- ISO 12207의 SW SDLC 참고하여 유지보수 프로세스의 상세 유형 제시한 국제 표준, ISO/IEC에서 정의한 유지보수 표준 4가지 유지보수 유형 정의 <br/><br/>\
# 암기 <br/>\
- 유형 : 수적완예 <br/>\
- 대상 : 데프문시 <br/>\
- 기법 : 3R <br/>\
- 절차 : 프로임, 프라모어, 모임, 메리억, 마, 리 <br/><br/>\
# 특징 : SW특성 무관, SW SDLC 모델 비종속, 유지보수 공정 반복 <br/><br/>\
# 유형 (수적완예) <br/>\
- reactive(수정, 적응)<br/>\
- Proactive(완전, 예방) <br/><br/>\
# 대상 : 데이터, 프로그램, 문서, 시스템 <br/><br/>\
# 기법 : 프로그램 이해, 재공학, 역공학, 재구조화 <br/><br/>\
# 절차 : 프분구검이페 / 프로임.프라모어.모임.메리억,마,리 <br/>\
1. 유지보수 프로세스 구현(Process Implementation) <br/>\
2-1. 문제 및 수정 분석 (Problem and Modification Analysis <br/>\
2-2. 수정 구현(Modification Implementation) <br/>\
2-3. 검토/승인(Maintenance Review / Acceptance) <br/>\
3. 이전(Migration) <br/>\
4. 폐기 (Retirement) <br/><br/>\
# 고려사항 : SLA, ITSM, ITIL, ISO/IEC 12207, SP인증기반 <br/><br/>\
<img src = "./img/ISO_IEC_14764.png" style = "max-width:100%; height:auto;">\
',

// [ISO/IEC 14764]- PERT/CPM, CCM, CCPM
'ISO 14764 : 소프트웨어 유지보수 표준<br/><br/>\
# 정의 <br/>\
- PERT(Program Evaluation and Review Technique) <br/>\
- CPM(Critical Path Method) <br/>\
- PERT/CPM : 작업의 선/후행관계를 고려하여 전체작업의 완료시간을 결정하고, 추가비용 투입을 고려하여 전체작업 완료시간을 단축하는 네트워크 분석 기법 <br/>\
- CCM: CPM에 자원가용성, 일정제약을 고려하고 버퍼관리를 통해 일정을 관리하는 기법<br/>\
- CCPM: 핵심자원의 자원경합을 해소하여 Critical Chain 관리기법<br/><br/>\
# 구성요소 : ES, 기간, EF, 활동 이름, LS, 여유시간, LF <br/>\
- 기간 : CPM(기존 자료), PERT(3점 추정 : (비관+(6*최빈)+낙관)/6) <br/><br/>\
# 주경로 산출 절차 : 시간추정 > 전진경로계산 > 후진경로계산 > 여유시간계산 > 주경로도출 <br/><br/>\
* 라이지움 89회 관리 2교시 2번\
',
  
// 일정관리
'# 정의 : SW 품질 준수 일련 활동 / 계획, 수립, 일정중심 통제 <br/>\
- 일정계획 수립, 일정 중심 통제 수행하여 SW 품질 준수하는 일련 활동<br/><br/>\
# 절차 <br/>\
1. 일정관리 계획 수립 <br/>\
- T : 분석기법, 미팅 <br/>\
- O : 일정관리계획서 <br/><br/>\
2. 활동 정의 <br/>\
- T : 분할, 연동계획 <br/>\
- O : 활동목록, 마일스톤 목록 <br/><br/>\
3. 활동 순서 배열 <br/>\
- T : 선후행도형법, 의존관계 설정 <br/>\
- O : 플젝일정 NW Diagram, 플젝문서 갱신 <br/><br/>\
4. 활동 자원 선정 <br/>\
- T : 대안분석, SW대가산정, PMS <br/>\
- O : 일정 기준선, 플젝 일정 <br/><br/>\
5. 일정 통제 <br/>\
- T : 성과검토, PMS, 자원최적화 <br/>\
- O : 작업성과 정보 <br/><br/>\
# Activity 순서 배열 <br/>\
- PDM(Precedent Diagramming Method) : 선후행도표, AON <br/>\
- ADM(Arrorw DM) : 화살도형법, AOA <br/>\
- 의존관계 : FS(Finish to Start), FF, SS, SF) <br/>\
- 선도 및 지연 : 선도 Lead, 지연 Lag <br/><br/>\
# 기간 산정 기법 <br/>\
- 유모3점-경험기반 : 유사산정, 전문가판단 <br/>\
- 산술/통계 : 모수산정(과거 실적 기반 함수식 생성), PERT(3점 추정), CPM(1점 추정) <br/><br/>\
# 일정 추정 기법(6) <br/>\
- PERT(비관치, 가능치, 낙관치3점추정, 액티비티 수행기간 산정에 확률반영)<br/>\
- CPM<br/>\
- Critical Path<br/>\
- CCM<br/>\
- CCPM<br/>\
- WBS<br/>\
- 간트차트 <br/><br/>\
# 자원 최적화 기법 <br/>\
- 자원 평준화(Resource Leveling) : 가용자원 한계내 여유일정, 순서 조정 <br/>\
- 자원 스무딩(Resource Smoothing) : 정해진 자원 한도 내 일정 모델 활동 조정, Free Float와 Total Float 안에서만 지연 <br/><br/>\
# 일정 단축 기법 <br/>\
- Crashing : CP 상 Activity 추가자원 투입, 공정압축법, Cost증가, Risk 증가 <br/>\
- Fast Tracking : CP상 순차 진행 계획 병행 추진, 공정중첩 단축법, 재작업 위험 증가, Risk 증가 <br/>\
- Re-Estimation : CP상 불확실성 여유일정 변경 <br/>\
- What-If 시나리오 : 일정 영향 Factor 기준 분석/대안 시뮬레이션 <br/><br/>\
* PMS : Project Mgmt SW <br/>\
* 대안 분석 : 고급개발자1 vs 초급개발자5<br/>\
* 3점 산정 : (낙관치 + (평균치*4) + 비관치) / 6<br/>\
* 예비분석 <br/>\
- Contigency Reservers : 우발적 예비-사전파악 위험버퍼<br/>\
- Management Reservers : 관리적 예비비-일정기준선 포함x, 사전파악x, 위험 버퍼 <br/><br/>\
* 고려사항 : PODB \
',
  
// 3점 산정
'# 정의 : 일정 산정 기법 <br/>\
- 프로젝트 일정산정에 있어 낙관치(O), 비관치(P), 평균치(M)의 산정 값을 계산하여 일정을 산정하는 기법 <br/><br/>\
# 구성요소 <br/>\
1. 추정치 요소 <br/>\
- 낙관치(Optimistic) : 낙관적 추정치 <br/>\
- 평균치(Most likely) : 가능성 가장 높은 추정치 <br/>\
- 비관치(Pessimistic) : 비관적 추정치 <br/><br/>\
2. 계산식 종류 <br/>\
- 삼각분포 : (O+M+P)/3 <br/>\
- 베타분포 : (O+4M+P)/6 <br/>\
- 표준편차 : sigma(P-O)/6 \
',
  
// 일정 단축 기법
'# 정의 : 프로젝트 납기 준수 <br/>\
- 프로젝트 납기 준수를 위해 프로젝트의 범위 변경 없이 일정을 조정하는 기법 <br/><br/>\
# 종류 (크자 패병)<br/>\
- Crashing : 자원추가 <br/>\
- Fast Tracking : 작업 병행 추진 <br/><br/>\
# 실질적인 일정단축 방안 <br/>\
- Re Estimation : 자원/범위/일정 검토 단축 <br/>\
- 인적자원 품질 : 도메인 및 해당 IT 기술 및 지속 교육 <br/>\
- 초과 근무 : 주 52시간 고려 초과 근무 수행 <br/>\
- CCM 버퍼 축소 : Min, Max 조정 <br/>\
- 범위 조정 : 의사결정자 협의 / 중재 <br/>\
- 테스트 범위 : STA, FTA 확인, QC 레벨 조정 \
',
  
// CPM
'# 정의 : 프로젝트 일정관리 <br/>\
- 프로젝트의 일정 개발을 위해 활동의 시간, 비용, 의존관계를 파악하여, 시작, 종료, 예정일을 산정하는 프로젝트 일정개발 기법 <br/><br/>\
# Critical Path <br/>\
- 정의 : 프로젝트 납기일에 영향을 미치는 일련의 액티비티의 집합 <br/>\
- 의미 : 가장 긴 경로, 작업이 늦어지면 그만큼 전체가 늦어짐 <br/><br/>\
# 절차 <br/>\
- WBS 전후관계 목록표 작성 <br/>\
- Network 도표 작성 <br/>\
- 가장 많이 소요된 경로 탐색 <br/><br/>\
# 경로 도출 방법 <br/>\
<img src = "./img/CPM_Calc.png" style = "max-width:100%; height:auto;"><br/>\
- Total Float : LS-EF or LS-ES <br/>\
- Free Float : 후행 ES - EF -1<br/><br/>\
* 83회 관리 4교시 5번\
',
  
// CCM
'# 정의 : 주공정연쇄법 <br/>\
- Ciritical Chain Method <br/>\
- 자원제약사항을 고려하여 계획수립시 과다하게 설정될 수 있는 여유시간을 줄여 통합된 버퍼로 책정하고 버퍼의 소진율을 모니터링하여 전체 프로젝트 일정을 관리하는 기법 <br/><br/>\
# 납기 지연 4가지 법칙 (파자후학)<br/>\
- 파키슨의 법칙 : 주어진 시간 모두 사용 <br/>\
- 자기방어 : 작업완료 숨김 <br/>\
- 후행공정 작업준비 미흡 : 후속작업 자원 미비시 <br/>\
- 학생 증후군 : Deadline 전 효율 \
',
  
// Lehman 소프트웨어 변화
'# 정의 : 소프트웨어는 요구에 의해 계속적으로 변경되며, 변경에 따른 복잡성, 프로그램의 고유한 변경 추세, SW조직 생산성의 일관성, 소프트웨어 각 버전의 변화에 대한 일관성을 제시한 SW 변화의 원리 <br/><br/>\
# 소프트웨어 분류 <br/>\
- S-Type(Static) : 정해진 명세에 따라 정확히 동작하는 S/W (계산기) <br/>\
- P-Type(Practical) : 절차나 실행 입력 값에 따라 다르게 수행되는 S/W (체스게임) <br/>\
- E-Type(Embedded) : 실 세계의 환경적 상황과 밀접하게 연관되어 동작하는 S/W (Tax 시스템)\
',
  
// 프로젝트 관리 계획서
'<img src = "./img/ProjectAdminReport.png" style = "max-width:100%; height:auto;"><br/>\
- 개범일인교통품인측\
',

// 통합관리
'# 정의 : 총괄관리 절차, 활동 <br/>\
- 각 영역의 계획과 활동이 유기적으로 결합되도록 조정하고 총괄 관리하는 절차 및 활동 <br/><br/>\
# 구성 : PJT헌장 개발 > 관리계획개발 > 작업지시 및 관리 > 감시 및 통제 > 변경 통제 > 종료 <br/><br/>\
# 도구 : 전문가판단, 촉진기법(브레인 스토밍, 갈등해결, 미팅)\
',

// 범위관리
'# 정의 : 업무, 산출물 정의 / 통제 활동 <br/>\
- 프로젝트를 성공적으로 완료하는데 필요한 모든 업무와 산출물(제품, 서비스)을 정의하고 통제하는 활동 및 프로세스 <br/><br/>\
# 종류 <br/>\
- 제품범위(산출물 위주)<br/>\
- 프로젝트범위(지정기능 결과물) <br/><br/>\
# 절차 (<font color = "red">계요정W검통</font>)<br/>\
- 계획 수립 : 범위관리 계획서 작성 <br/>\
- 요구사항수집 : 이해관계자 니즈, 요구사항 결정 <br/>\
- 범위정의 : 상세 범위, 목표인수 기준 결정 <br/>\
- WBS 작성 : 관리가능한 작업 패키지 분할 작성<br/>\
- 범위 검증 : 프로젝트 범위, 인도물 범위 공식적 수용<br/>\
- 범위 통제 : 범위 관리 단계<br/><br/>\
# 범위 기술서 요소 (범인도제제가)<br/>\
- 제품 범위명세서 : 특성 점진적 구체화 문서 <br/>\
- 인수기준 : 완료 조건 <br/>\
- 프로젝트 인도물 : 완료 위해 산출하는 검증 가능한 제품 <br/>\
- 프로젝트 제외사항 : 제외되는 대상 식별 <br/>\
- 프로젝트 제약사항 : 영향 미치는 제한 요인 <br/>\
- 프로젝트 가정사항 : 잠재적 영향도 설명 \
',
 
// 형상관리
'# 정의 : 산출물 체계적 관리 / 가시성, 추적성 / 품질 보증 향상<br/>\
- SW SDLC 단계의 산출물을 체계적으로 관리하여 SW 가시성 및 추적성을 부여하여 품질 보증을 향상시키는 관리 활동 <br/><br/>\
# Overview <br/>\
<img src = "./img/ShapeAdminProcess.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 구성요소 <br/>\
- 기준선 : 모든 변화 통제 시점 기준 <br/>\
- 형상항목 : 프로젝트에서 공식적으로 정의된 관리 대상 <br/>\
- 형상물 : 형상항목의 실제 대상 컨텐츠 <br/>\
- 형상버전 : 기준선 설정 이후 일어난 변경 기록 <br/>\
- CCB(Configuration Control Board) <br/><br/>\
# 절차 (<font color = "red">식통감기</font>) <br/>\
- 준비 : 형상항목 식별, 통제, 평가 수행 방안 수립 <br/>\
- 식별 : 형상 관리 대상 구분, Numbering / 소스코드 목록, 기준선, 관리체계 <br/>\
- 통제 : SW Baseline 반영 통제 / 변경 요청서, 검토,승인서, 변경 보고서 <br/>\
- 감사 : SW Baseline 무결성 평가 수단 / 계획서, 보고서 <br/>\
- 기록 : 형상 및 변경관리 대한 기록, 보고서 작성 / 상태 기록 문서, 상태 보고서 <br/><br/>\
# 도구 <br/>\
1. 저장관리 측면 <br/>\
- CVS, SVN : 변경사항 추적, 관리 도구 <br/>\
- Git : 분산 저장소 타입 <br/>\
- Git Hub : 컴퓨터 파일 웹 서비스 기반 관리 저장소 제공 도구 <br/><br/>\
2. 변경관리 측면 <br/>\
- 형상관리 문서 : 변경 요청서, 형상상태 보고서 등 <br/>\
- 형상통제 위원회 : 변경 대한 검토, 승인/거부 수행 관리 <br/><br/>\
* ITPE 6회 관리 2교시 2번\
',

// 형상관리 베이스라인
'# 정의 : 특정 시점 / 완전 산출물 / 이용 상태 집합<br/>\
- 소프트웨어 개발의 특정시점에서 형상항목이 소프트웨어 개발에 하나의 완전한 산출물로써 이용될 수 있는 상태의 집합 <br/><br/>\
# 내용 (<font color = "red">기분설시제운</font>)<br/>\
<img src = "./img/ShapeAdmin.png" style = "max-width:100%; height:auto;"><br/><br/>\
* ITPE 6회 관리 2교시 2번\
',

// WBS
'# 정의 : 실행작업 인도물 중심 분할 계층구조 체계 <br/>\
- Work Breakdown Structure<br/>\
- 프로젝트 목표를 달성하고 필요한 인도물을 산출하기 위하여 프로젝트 팀이 실행할 작업을 인도물 중심으로 분할한 계층구조 체계 <br/><br/>\
# 구성 (<font color = "red">PC사통</font>)<br/>\
<img src = "./img/WBS.png" style = "max-width:100%; height:auto;"><br/>\
- 작업 패키지 : WBS 최하위 구성요소 / 80시간 내외 <br/>\
- 작업분류 코드 : 고유 식별자 <br/>\
- WBS 사전 : 패키지별 작업 내용 <br/>\
- 통제 계정 : 범위, 예산, 일정, 성과 측정 단위 <br/><br/>\
# 특징 (<font color = "red">산8리유연백</font>)<br/>\
- 산출물 중심 <br/>\
- 8/80 법칙 : 8~80 사이 WP 크기 <br/>\
- Report 법칙 : Report 크기 따라 WP 크기 정의 <br/>\
- 유용성 법칙 : 세분화 <br/>\
- 연동기획 : Rolling Waver Planning 가까운 미래만 상세히 작성 <br/>\
- 100% Rule <br/><br/>\
# 사례 (<font color = "red">프단작패소</font>)<br/>\
<img src = "./img/WBS_Example.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 라이지움 87회 관리 1교시 7번\
',

// Gold Plating
'# 정의 : 경험적 초과 개발 <br/>\
- 고객이나 이해관계자가 요구하지 않은 사항을 개발자나 PM의 추측으로 인해 초과 개발하는 현상 <br/><br/>\
# 원인 : 요구사항과 관계없는 개발로 시간, 배용의 낭비 <br/><br/>\
# 영향 : 불필요 기능, 과도한 품질 양산 <br/><br/>\
# 방지 방안 <br/>\
- 제안전략 및 SOW 품질 <br/>\
- 요구기준 및 Baseline 정량화 <br/>\
- 업무시각화 및 의욕관리 \
',

// Resource Leveling 
'# 정의 : 자원 조정 기법 <br/>\
- 자원의 한계에 따라 시작일과 종료일을 조정하는 기법, 자원의 양/사용가능기간 한정되거나, 동시에 두개 이상의 활동에 포함된 경우 이를 조정해주는 방법 <br/><br/>\
# 유형 <br/>\
- 자원 고정형 : 자원제한, 제한된 자원 조건하 최단기간 <br/>\
- 시간 고정형 : 자원무제한, 기간제한 <br/><br/>\
# 절차 <br/>\
1. CPM 계산 <br/>\
2. 자원히스토그램 작성 <br/>\
3. 평균화 최적값 도출 <br/>\
4. 자원 히스토그램 비교 \
',

// 브룩스 법칙
'# 정의 : 커뮤니케이션 비대 역효과 <br/>\
- 지연되는 프로젝트에 인력을 더 투입하면 오히려 일정이 지연됨 <br/><br/>\
# 의사소통 라인수 = N(N-1) / 2 <br/><br/>\
# 원인 <br/>\
- 추가 투입 인원 교육 필요 <br/>\
- 커뮤니케이션 비용증가 <br/>\
- 업무진행 오류 가능성 증가 <br/>\
- 오류해결 위해 추가 일정지연 가능성 <br/><br/>\
# 대응 <br/>\
- 고급인력, 잔업, 아웃소싱, 병행 작업, Critical Chain, Re-Estimation \
',

// 수확 체감의 법칙
'# 정의 : 공산당 법칙 <br/>\
- Low of Diminishing returns <br/>\
- 프로젝트에 작업하는 하나의 요인인 노동자수만 증가할 수록 1인당 수확량은 점차 적어진다는 프로젝트 자원 관리 법칙 <br/><br/>\
# 설명 <br/>\
<img src = "./img/LawOfDiminishingReturns.png" style = "max-width:100%; height:auto;">\
',

// 범위 크립
'# 정의 : 요구사항만 추가 / 부정적 영향 상황 <br/>\
- 프로젝트 범위 확장, 통제되지 않은 변경, 일정, 자원, 원가의 조종 없이 요구사항 추가로, 프로젝트 성과 달성에 부정적인 영향을 미치게 되는 상황 <br/><br/>\
# 설명 <br/>\
<img src = "./img/ScopeCreep.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 원인 : 프로젝트 범위 증가 <br/><br/>\
# 영향 : 프로젝트 범위, 시간, 자원의 과다소모 <br/><br/>\
# 방지방안 <br/>\
- 리뷰/승인 필수 <br/>\
- Service Desk 활용 <br/>\
- SRS, 변경관리 시스템, Request Freezing \
',

// 원가관리
'# 정의 : 예산 범위 위한 통제활동 <br/>\
- 승인 예산 범위 내 프로젝트 완료위해 원가 산정, 프로젝트 분석, 통제하는 활동 <br/><br/>\
# 절차 <br/>\
- 원가관리 계획 수립 <br/>\
- 원가 산정 <br/>\
- 예산 결정 <br/>\
- 원가 통제 <br/><br/>\
# 원가 산정 기법 <br/>\
- 유사산정, 모수산정, 3점산정, 상향식산정, 예비비 분석, 품질 비용 \
',

// 품질관리
'# 정의 : 품질보증, 통제 수행 절차 <br/>\
- 품질 정책, 목표 책임사항을 결정하여 품질보증, 통제를 수행하는 절차 <br/><br/>\
# 구성 <br/>\
- 품질 계획(QM) : 품질계획 관리 <br/>\
- 품질 통제(QC) : 변경요청 <br/>\
- 품질 보증(QA) : 품질통제측정치, 변경요청<br/><br/>\
# 도구 (<font color = "red">7벤실 브명흐 친우)</font>)<br/>\
- 7QC Tools : 기본 품질도구 <br/>\
- 벤치마킹 : 품질목표 수준 설정시 <br/>\
- 실험 설계법 : 제품에 영향 요인 분석시 <br/>\
- 브레인스토밍 : 문제해결 의견 모집시 <br/>\
- 명목 집단법 : 간섭 없이 우선순위 정할때 <br/>\
- 흐름도 : 프로세스 개선점 도출시 <br/>\
- 친화도 : 브레인스톰이 아이디어 그룹핑 <br/>\
- 우선순위 매트릭스 : 여러 대안 체계적 평가시 <br/><br/>\
# 절차 (<font color = "red">계보통</font>)<br/>\
- 계획 수립 <br/>\
- 보증 수행 <br/>\
- 통제 수행 \
',
 
// SW Metrics
'# 정의 : 측정 기술 / 소프트웨어 특성 정량화 <br/>\
- 소프트웨어 측정 기술을 기반으로 SDLC 동안에 소프트웨어의 특성을 객관적이고 과학적인 수치로 정량화 할 수 있는 기술 <br/><br/>\
# 유형<br/>\
- Product : Size(LoC, FP), Complexity(McCabe 회전복잡도) <br/>\
- Process : 프로세스 준수율, 품질 실패 비용율 <br/>\
- Project : 공정진도 준수율, 예산 준수율 <br/><br/>\
# 측정 프로세스 (<font color = "red">요식수계분검</font>)<br/>\
- 품질 요구사항 설정 : 품질 요구사항, 품질 매트릭 기본 구조 <br/>\
- 식별 : 매트릭 집합, 매트릭 명세서 <br/>\
- 자료수집 : 자료항목 명세서, 비용효과 분석 <br/>\
- 계산 : 매트릭/자료항목 추적 매트릭스 <br/>\
- 결과 분석 : 분석결과보고서 개발과정 변경계획 <br/>\
- 검증 : 검증결과 <br/><br/>\
* KPC 92회 관리 1교시 2번\
',

// 품질비용 
'# 정의 : 품질 실현 발생 비용 <br/>\
- 요구된 품질을 실현하기 위한 원가, 품질활동 수행을 위해 발생하는 비용 <br/><br/>\
# 구성요소 <br/>\
- 적합비용 : 예방비용, 평가비용 <br/>\
- 부적합비용 : 내부 실패, 외부 실패 <br/>\
- 총비용 : 통제비용 + 통제실패비용 <br/>\
- 적절 품질비용 : 수용가능 품질수준 확보수준 확보할 수 있는 비용 \
',

// 품질관리QC7도구
'# 정의 : 데이터의 기초적인 정리 방법 <br/>\
- 적은 데이터로부터 가능한 한 신뢰성이 높은 정보를 얻는데 가장 유효한 수단으로서 품질의 개발, 개선, 관리의 재활동에 대한 유용한 도구로, 데이터의 기초적인 정리방법으로 널리 쓰이며, 품질관리를 하는데 있어서 가장 필수적인 통계적 방법 <br/><br/>\
# 구성 (<font color = "red">인산관히파체층</font>)<br/>\
P 인과관계도 : 특성요인도-원인규명 <br/>\
P 산점도 : 영향을 주는 2개 인과관계 <br/>\
P 관리도 : 공정수준 유지 관리 <br/>\
P 히스토그램 : Data 분포 <br/>\
- 파레토 차트 : 문제의 중점화, 우선순위 파악 <br/>\
- 체크시트 : 간단히 체크 <br/>\
- 층별 : 불량 요인마다 데이터 구분 \
\
',

// 품질관리신QC7도구
'# 정의 : 언어데이터를 이용한 문제 분석 정성적 방법 <br/>\
- QC 7가지 도구가 수치데이터를 해석, 신 QC 7가지 도구는 언어데이터를 이용하여 문제를 분석하는 정성적 방법 <br/><br/>\
# 구성 <br/>\
- 친화도 <br/>\
- 연관도 <br/>\
- 계통도 <br/>\
- 애로우 다이어그램 <br/>\
- 매트릭스도 <br/>\
- PDPC <br/>\
- 매트릭스 데이터 해석법\
',

// 인적자원관리
'# 정의 : 프로젝트 팀원 관리, 방법 <br/>\
- 프로젝트 팀을 구성, 관리하는 방법 및 프로세스 <br/><br/>\
# 절차 <br/>\
- 인적자원 계획서 개발 <br/>\
- 프로젝트 팀 확보 <br/>\
- 팀 개발 <br/>\
- 팀 관리 \
',

// 터크만 팀 발달 5단계 
'# 정의 : 그룹 개발 모델 <br/>\
- 조직이 성장하고 도전에 대응하고 문제의식을 갖고 해결책을 찾으며 작업계획을 세우고 결과를 전달하기 위해 필요한 5가지 단계를 표현한 그룹개발 모델 <br/><br/>\
# 사이클 (<font color = "red">형격규성해 탐준형실휴</font>)<br/>\
- 형성기(탐색) <br/>\
- 격동기(준비) <br/>\
- 규범기(형성) <br/>\
- 성과기(실행) <br/>\
- 해산기(휴지) \
',

// 동기부여이론
'# 정의 : 조직원 분석 이론 <br/>\
- 조직원들이 어떤 욕구나 보상에 의해 어떠한 행동을 보이고, 그 성과는 어떠한가를 분석하는 이론 <br/><br/>\
# 구성요소 <br/>\
- 능력 <br/>\
- 동기부여 (욕구, 실제활동, 행위의도) <br/>\
- 작업환경 <br/>\
- 성과 <br/><br/>\
# 유형 <br/>\
- 내용이론 : 동기 욕구가 무엇이냐 <br/>\
- 과정이론 : 어떻게 그 행동을 이끄냐 <br/><br/>\
* KPC 74회 2교시 4번\
',

// 내용이론
'# 정의 : What <br/>\
- 어떤 요소와 내용이 사람들을 동기부여하는지 살피는 연구 <br/><br/>\
# 종류 <br/>\
<img src = "./img/MotivateContents.png" style = "max-width:100%; height:auto;"><br/>\
- 욕구 5단계(매슬로우) : 생리, 안전, 소속, 존경, 자아실현 <br/>\
- ERG 이론(엘더퍼) : 존재, 관계, 성장<br/>\
- 허즈버그(2요인) : 위생, 동기 <br/><br/>\
* KPC 74회 2교시 4번 \
',

// 과정이론
'# 정의 : How <br/>\
- 동기부여가 어떤 프로세스를 거쳐 일어나는가에 관심을 갖는 연구 <br/><br/>\
# 종류 <br/>\
- 기대 이론 : 노력, 성과, 보상 / 기대, 수단성(성과,보상연결), 유의성(특정결과 선호) <br/>\
- 공정성 이론 : 공정한 평가, 보상 / 만족감, 죄책감, 불만족 <br/>\
- 강화 이론 : 강화요인 도구로 작용 / 반복, 덜반복<br/><br/>\
* KPC 74회 2교시 4번\
',

// [관리표준]- 프로젝트 위험
'# 정의 : 불확실 위험요소 <br/>\
- 발생여부가 불확실하지만 발생하게 되면 잘못된 결과나 손실을 주게되는 위협요소 <br/><br/>\
# 위험의 범주 <br/>\
- Project Risk : 일정 및 비용 증가 위험 <br/>\
- Techincal Risk : 구현이 어려워지거나 불가능 해지는 위험 <br/>\
- Business Risk : 생존 가능성에 대한 위협 <br/><br/>\
# 위험의 종류 <br/>\
- Known Risk : 발견된 위험, 관리 계획을 통해 대응 가능 <br/>\
- Predictable Risk : 과거 경험을 통해 예측 가능한 위험, 관리 계획 통해 대응 가능 <br/>\
- Unpredictable Risk : 사전 예측이 어려운 위험, 계획 수립 불가, 예비비 통한 대응 <br/><br/>\
* 그리타\
',
 
// [관리표준]- 프로젝트 위험관리
'# 정의 : Stake-holder 관리 방법 <br/>\
- 프로젝트 이해 당사자(Stake-holders)간에 효율적인 정보 전달체계를 계획, 조직, 관리하는 방법 <br/>\
- 기회는 극대화하고 위험은 최소화하여 프로젝트의 성공 가능성을 높이는 일련의 관리 활동 <br/>\
- 프로젝트 위험관리는 정성적 분석과 정량적 분석방법이 있으며, 효과 측면에서 정량적 분석기법이 현업에서 많이 활용됨 <br/><br/>\
<img src = "./img/위험관리.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 절차 (<font color = "red">계식성량대(계실)감</font>) <br/>\
<img src = "./img/위험관리_0.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/위험관리_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/RiskAdminProcess.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 대응방안 (<font color = "red">적극 -> 소극</font>)<br/>\
1. 부정적 위험 대응 (<font color = "red">회전완수</font>)<br/>\
- 에스컬레이션 : PM 권한 밖 / 보고 <br/>\
- 회피 : 프로젝트 목표, 위험의 영향권 고립, 변경 / 중단, 계획 변경<br/>\
- 전가 : 제3자 책임이동 / 보험, 조달 프로세스 <br/>\
- 완화 : 수용가능까지 낮춤 / (병행)테스트, 단순 프로세스, 재배치 <br/>\
- 수용 : 위험 제거, 전략 수립 불가 / 능동, 수동 수용 <br/><br/>\
2. 긍정적 위험 대응 (<font color = "red">활공증수</font>)+<br/>\
- 에스컬레이션 : PM 권한 밖 / 보고 <br/>\
- 활용 : 리스크 선택 / 자원 투입 <br/>\
- 공유 : 제3자 기회 / 제휴 <br/>\
- 증대 : 긍정 영향 식별, 극대화 / 컨설팅<br/>\
- 수용 : 활용하지만, 기회추구 x / 무대응<br/><br/>\
# 고려사항 <br/>\
- 프로세스 : 변경 통제 절차, 베이스라인 <br/>\
- 도구/기법 : 통합관리도구(EVM), 일정단축기법(크자패병) <br/>\
- 정책 : 범위 명확화(WBS 재분할), 예비비 확보(Countingency, Management Reserve) <br/><br/>\
* 125회 관리 2교시 2번 <br/>\
* 라이지움 85회 1교시 2번<br/>\
* KPC 94회 2교시 2번 \
',

// 프로젝트 위험요소 
'# 프로젝트 위험 요소 <br/>\
1. 일정 측면 <br/>\
- 불확실한 업무 범위 : 포괄적 제안 요청, 투입 공수 적용 <br/>\
- 숙련된 전문가 부족 : 도메인, 기술 전문가 부재 <br/>\
- 부정확한 일정 계획 : 경험기반 견적 산정, 부정확한 투입 공수 산정 <br/>\
- 개발자 중간 이탈 : 실적 압박 개발자 이탈 <br/><br/>\
2. 비용 측면 <br/>\
- 인력비용 : 인력 추가 대한 비용 <br/>\
- H/W, S/W 구매비용 : 스토리지, 메모리, 상용SW <br/>\
- 프로젝트 공간 임대비용 : 프로젝트 수행 위한 공간 임대 <br/><br/>\
# Boehm 제시 프로젝트 10대 위험요소 <br/>\
- 개인적 부족<br/>\
- 일정, 예산, 프로세스<br/>\
- 기존의 상업적 상품, 외부 구성 요소<br/>\
- 요구 사항 불일치<br/>\
- 사용자 인터페이스 불일치<br/>\
- 아키텍처, 성능, 품질<br/>\
- 요구 사항 변경<br/>\
- 레거시 소프트웨어<br/>\
- 외부적으로 실행되는 작업<br/>\
- 제한적인 컴퓨터 과학<br/><br/>\
* 125회 관리 2교시 2번\
',

// 정성적 위험분석
'# 정의 : 발생확률, 영향, 특징 평가 / 우선순위 결정 프로세스 <br/>\
- 위험 발생확률과 영향, 특징 평가하여 대응과 분석 위한 개별 프로젝트 위험 우선순위 결정하는 프로세스 <br/><br/>\
# 기법 (<font color = "red">수분표대기</font>)<br/>\
1. 수집 <br/>\
- 인터뷰 : 기밀 보장 <br/><br/>\
2. 분석 (<font color = "red">영품기</font>) <br/>\
- 위험 확률 및 영향력 평가 : 프로젝트 목표 영향 평가 <br/>\
- 데이터 품질 평가 : 정확성, 품질, 신뢰성, 무결성 검토 <br/>\
- 기타 위험 모수 평가 : 긴급성, 가까움, 전략적 영향 우선순위 고려 <br/><br/>\
3. 데이터 표현 (<font color = "red">영계</font>) <br/>\
- PI 매트릭스 : 확률,영향 등급화 <br/>\
- 계층적 차트 : 3개 모수 표현 버블 차트 <br/><br/>\
4. 대인 <br/>\
- 촉진 : 분석 효과 촉진, 편견 원인 식별, 충돌 해결 <br/><br/>\
5. 기타기법 (<font color = "red">전유미</font>) <br/>\
- 전문가 판단 : PI 평가, 위치 결정 <br/>\
- 위험 유형 분류 : 비슷 리스크, RBS 이용 분류 <br/>\
- 미팅 : 정성적 위험 워크샵 \
',
  
// 정량적 위험분석
'# 정량적 <br/>\
1. 수집 <br/>\
- 인터뷰 <br/><br/>\
2. 분석 (<font color = "red">영민의모</font>) <br/>\
- 영향도 분석 : 위험 요인, 원인 결과 미치는 관계 도표 표현 <br/>\
- 민감도 분석 : 특정 기준값 변화 영향 <br/>\
- 의사결정나무 분석 : 도표화, 소집단 분류, Root, Parent, Child Node<br/>\
- 모의실험 <br/>\
-> EMV : 미래가치 계산 <br/>\
-> 몬테카를로 시뮬레이션 : 확률분포 정의, 난수 시뮬, 전체 확률 분포 계산 <br/><br/>\
3. 대인 <br/>\
- 촉진 <br/><br/>\
4. 기타 (불전) <br/>\
- 불확실성 표현 <br/>\
- 전문가 판단 <br/><br/>\
<img src = "./img/영민의모.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 정량적 위험분석 용어 (<font color = "red">노SAA</font>)<br/>\
- 노출계수(Exposure Factor) : 침해 발생시 손실 비율 / % 표현 <br/>\
- SLE(Single Loss Expectancy) : 한번의 침해로 발생한 손실 / 자산가치 * 노출 계수 <br/>\
- ARO(Annualized Rate of Occurrence) : 연간 발생율 / 0.0(발생x), 1.0(1년에 한번) <br/>\
- ALE(Annual Loss Expectancy) : 단일예상 손실값 * 연간 발생율 / SLE * ARO <br/><br/>\
* 123회 관리 4교시 5번 <br/>\
* KPC 90회 관리 2교시 5번\
',

// [PMBOK 5th edition]- 민감도 분석 <br/>\
'# 정의 : 평가 방법 / 불확실성 / 목표 영향 <br/>\
- Sensativity Analysis <br/>\
- 프로젝트 요소의 불확실성이 검토 대상 목표에 미칠 영향력을 평가하는 방식 <br/><br/>\
# 예시 <br/>\
- Tornado diagram : 어떤 특성치가 가장 큰 영향을 주는지에 대한 분석 결과를 민감도가 높은 순서대로 배열하여 나타낸 도표 <br/><br/>\
* 123회 관리 4교시 5번\
',

// 의사결정나무 분석
'# 정의 : 도표화 / 분류, 예측 / 정량적 분석 기법 <br/>\
- 의사결정 규칙을 도표화하여 관심대상이 되는 집단을 몇 개의 소집단으로 분류하거나 예측을 수행하는 정량적 분석 기법 <br/><br/>\
# 특징 <br/>\
- Tree 형태 규칙 표현, 쉽게 이해 되고 활용 가능 <br/>\
- 두 개 이상 변수 결합 목표변수에 어떤 영향 주는지 확인 가능 <br/><br/>\
# 예시 <br/>\
<img src = "./img/DecisionTreeAnalysisDetail.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 123회 관리 4교시 5번\
',
  
// 몬테카를로 시뮬레이션
'# 정의 : 확률모형 모수, 변수 반복적 대입 / 확률 변수 분포 산정 <br/>\
- 특정 변수를 예측하기 위해 확률모형의 모수나 변수에 대해 반복적으로 여러 수치를 대입하여 확률 변수의 분포를 산정하는 기법 <br/>\
- 일련의 난수를 반복적으로 생성하여 계산 가능한 함수의 값을 확률적으로 계산하는 알고리즘 <br/><br/>\
# 절차 <br/>\
- 시작 : 난수 생성 (0~1) <br/>\
- 전환 : 난수 -> 표본값 <br/>\
- 변환 : 확률분포(pdf) -> 확률분포(cdf) <br/>\
- 입력 : 표본 값 변환 모델에 입력 <br/>\
- 기록 : 모델 계산 시뮬레이션 결과값 기록 <br/>\
<img src = "./img/MonteCraloSimulationProcess.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 123회 4교시 5번\
',

// [관리표준]- EMV
'# 정의 : 위험분석 / 기대값 도출 <br/>\
- 위험분석 등 수행시 각 케이스별 금전적 기대값 도출 기반 Risk 평가 수행 지표 <br/><br/>\
# 특징 <br/>\
- 의사 결정 나무형태 표현 <br/>\
- 기회는 양수, 리스크는 임수 표현 <br/>\
- EMV = 성공했을때 수익 * 성공확률 - 실패했을때의 수익 * 실패확률 <br/><br/>\
# 사례 <br/>\
<img src = "./img/EMV_Example.png" style = "max-width:100%; height:auto;"><br/>\
<img src = "./img/EMV_1.png" style = "max-width:100%; height:auto;"><br/>\
<img src = "./img/EMV_2.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 123회 관리 4교시 5번 <br/>\
* 라이지움 85회 1교시 2번\
',

// 조달관리(구매)
'# 정의 : 외부 구매 <br/>\
- 과업수행에 필요한 제품, 서비스, 결과물을 외부에서 구매, 획득하기 위한 프로세스 <br/><br/>\
# 절차 <br/>\
- 조달관리계획 수립 <br/>\
- 조달수행 <br/>\
- 조달통제 <br/>\
- 조달종료 <br/><br/>\
# 계약유형 <br/>\
- 확정가격/총괄계약 <br/>\
- 비용상환 계약 <br/>\
- T&M 계약\
',

// 이해관계자관리
'# 정의 : 관리 전략 / 식별 / 기대사항 / 영향력<br/>\
- 프로젝트에 영향미치는 사람,그룹,조직을 식별하고 이해관계자의 기대사항과 영향력 파악하여 관리하는 전략<br/>\<br/>\
# 암기 <br/>\
1. 프로세스 <br/>\
- 식별 : 정보분석, 문서화 <br/>\
- 계획 : 전략 개발 <br/>\
- 관리 : 의사소통 <br/>\
- 감시 : 모니터링 <br/><br/>\
2. 영향도표 : 밀만정감 <br/><br/>\
<img src = "./img/이해관계자관리_1.png" style = "max-width:100%; height:auto;">\
',

// 현저성 모델
'# 정의 : 이해관계자 설명 모델 <br/>\
- Salience Model <br/>\
- 권력성, 긴급성, 적합성에 따라 이해관계자 그룹을 설명하는 모델 <br/><br/>\
<img src = "./img/SalienceModel.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 유형 <br/>\
- Power (영향력) <br/>\
- Legitimacy (프로젝트와 상호작용 및 적합성) <br/>\
- Urgency (의사소통 요구의 긴급성 및 민감성) <br/><br/>\
# 구성 <br/>\
7. Definitive (가장 중요한) <br/>\
4. Dominant (우세한) <br/>\
5. Dangerous (위험한) <br/>\
6. Dependent (의지하는) <br/>\
1. Dormant (휴면기의) <br/>\
2. Discretionary (자유재량에 의한) <br/>\
3. Demanding (요구가 많은) <br/><br/>\
<img src = "./img/StakeholderSalienceModelCompare.png" style = "max-width:100%; height:auto;"><br/><br/>\
* ITPE 합숙 125회 4일차 1교시 13번\
', 

// 갈등관리
'# 정의 : 갈등 대처, 기능 최적화 <br/>\
- 갈등을 적절히 대처하여 역기능은 최소화 하고 순기능은 극대화하기 위한 방안 <br/><br/>\
# 원인 : 일정, 프로젝트 우선순위, 자원, 기술적 옵션, 관리절차, 원가, 대인관계 <br/><br/>\
# 해결전략 <br/>\
- 관철 <br/>\
- 해결 <br/>\
- 타결 <br/>\
- 회피 <br/>\
- 수용 \
',
 
// 자원 최적화
'# 정의 : 일정, 원가, Trade Off <br/>\
- 일정과 원가 간의 트레이드-오프를 고려하여 자원할당을 조정하는 프로젝트 일정관리의 자원 최적화 기법 <br/><br/>\
# 기법 <br/>\
- 리소스 레벨링 : 자원 한계, 일정 지연 / 주공정 변경 / Total Float 0 이상 <br/>\
- 리소스 스무딩 : 일정 한계, 자원 최적화 / 주공정 변경 x / Free Float ~ Total Float 내 <br/><br/>\
* Free Float : 다음활동 기반 여유시간 <br/>\
* Total Float : 종료일 기반 여유시간 <br/><br/>\
* KPC 92회 관리 1교시 8번\
',

// ISO 21500
'# 정의 : 프로세스 지침 국제 표준 <br/>\
- 프로젝트 성공을 위한 중요한 프로젝트 관리 및 프로세스에 대한 일반적인 지침을 제공하는 국제 표준<br/><br/>\
# 프로세스 그룹 (착기이통종) <br/>\
- 착수 : 프로젝트 헌장 개발 <br/>\
- 기획 : 계획 수립 <br/>\
- 이행/실행 : 프로젝트 작업지시 <br/>\
- 통제 : 프로젝트 작업통제 <br/>\
- 종료 : 교훈 수집 <br/>\
<img src = "./img/ISO21500_ProcessGroup.png" style = "max-width:100%; height:auto;">\
',

// SWEBOK
'# 정의 : SW 엔지니어링 지식 정리 체계<br/>\
- IEEE Computer Society 에서 제정한 SW 엔지니어링 분야의 지식 정리한 체계 <br/><br/>\
# 특징 <br/>\
- 가이드 라인/개발지침서 포함 <br/>\
- SW 공학에 대한 총체적 접근 <br/>\
- What 제공, How 제공 x <br/>\
- 2004년 SWEBOK 2.0(ISO 24773) 발표 <br/>\
- 2014년 SWEBOK 3.0(ISO 19759) 발표 (15확장) <br/><br/>\
# 목적 <br/>\
- SWE 일관성 있는 정보 전달 <br/>\
- SWE 범위 명확, 다른 활동 차이 명세(수학, 전산학, 프로젝트 관리) <br/>\
- SWE 내용 설명 <br/>\
- 쉬운 Top-Down 접근방법 제공 <br/>\
- 인증, 자격증 교과 과정 위한 기법 제공 <br/><br/>\
# 구성 <br/>\
1. 개발 (<font color = "red">요설개테유</font>)<br/>\
- SW 요구사항 <br/>\
- SW 설계 <br/>\
- SW 개발 <br/>\
- SW 테스트 <br/>\
- SW 유지보수 <br/><br/>\
2. 관리 (<font color = "red">형공프도품</font>)<br/>\
- SW 형상관리 <br/>\
- SW 공학관리 <br/>\
- SW 공학프로세스 <br/>\
- SW 공학도구와 방법 <br/>\
- SW 품질 <br/><br/>\
3. 신규기반 (<font color = "red">전경컴수공)</font><br/>\
+ SW 전문가 실천 <br/>\
+ SW 경제학 <br/>\
+ SW 컴퓨팅 기반 <br/>\
+ SW 수학적 기반 <br/>\
+ SW 공학적 기반 <br/><br/>\
* ITPE 7회 3교시 6번\
',

// 요르돈 법칙
'# 정의 : 초기 체계적 필요 법칙 <br/>\
- 개발초기에 체계적 분석, 설계 수행되지 않으면 후반에 상대적으로 커진다는 법칙 <br/><br/>\
# 품질비용 : 1:10:100의 법칙 <br/><br/>\
# 프로젝트 유형 <br/>\
- 제1형 : Mission Impossible (성공하면 모두 만족) <br/>\
- 제2형 : Kamikaze (성공해도 팀은 희생) <br/>\
- 제3형 : Sucide (성공못함) \
',

// SW 품질
'# 정의 : Software Quality <br/>\
- 주어진 요구사항을 만족시키는 소프트웨어 제품의 특성과 생산성 <br/><br/>\
# 표준 모델 <br/>\
- 제품품질 : ISO 9126, ISO 14598, ISO 12119, ISO 9001, 9002, ISO 25000<br/>\
- SW 프로세스 품질 : ISO 12207, CMMI, SPICE <br/>\
- 품질경영 : 6 시그마, ISO 9000 \
',

// SW 품질관리 
'# 정의 : 경영자원 품질 확보 활동 <br/>\
- 품질통제를 통해 제품의 품질을 확보하고 품질관리 통한 품질 보증으로 프로세스의 품질을 확보함으로써 궁극적으로 경영자원의 품질을 확보하는 활동 <br/><br/>\
# 절차 <br/>\
- 품질계획 수립 <br/>\
- 품질보증 수행 <br/>\
- 품질통제 수행 \
',

// SW 품질보증
'# 정의 : Quality Assuarnce <br/>\
- QP에서 정의한 QC를 제대로 하고 있는지를 확인하는 활동 <br/><br/>\
# 기법 (PMBOK5) (메테워인감) <br/>\
- Management Review : 진행상태 점검 / 경영 결과 보고서 <br/>\
- Technical Review : 기술 적합성 / 기술 검토 보고서 <br/>\
- Walkthrough : 팀 내 결함 찾기 / 비공식적 동료 검토 미팅 <br/>\
- Inspection : 공식적 동료 검토 검사 / 고객 미팅 <br/>\
- Audit : 요구분석, 설계 프로그램 품질검사 / 정보시스템 감리 <br/><br/>\
# 절차 : 품질보증계획 수립 > 엔지니어링활동 검토 > 품질특정평가 > 문서화 > 승인 > 보고 및 통보 <br/><br/>\
# 활동 : 형상관리, 문서관리, 품질기록, 합동검토, 검증 및 확인, 시정조치, 위험관리 \
',

// SW 품질통제 
'# 정의 : 준수여부 감시, 기록, 제시 활동 <br/>\
- Quality Control <br/>\
- 프로젝트 결과가 관련 품질 기준을 준수하는지를 결정하기 위해 감시하고 성과를 평가하고 권고안을 제시하는 활동 <br/><br/>\
# 도구 <br/>\
- 부적합 식별 및 수정 : 통제차트, 검사, 결함수정검토, 런차트 <br/>\
- 부적합 유형 분류 및 우선순위 결정 : 히스토그램, 특성요인도, 파레토 차트 <br/>\
- 원인분석 : 산점도, 흐름도 <br/>\
- 기타 : 통계적 표본추출 \
',

// 품질경영
'# 정의 : 경영 관리 체계<br/>\
- ISO9001, 6 Sigma <br/>\
- 품질을 통해 기업 우위성을 확보하는 한편, 고객만족, 인간성 존중을 바탕으로 전 사원이 혁신과 개선에 참여해 경쟁력을 키우는 경영 관리 체계 \
',

// ISO 9001
'# 정의 : 제품을 생산, 공급하는 품질경영시스템을 평가하여 인증하는 국제표준 \
',

// 품질평가
'# 정의 : SW 제품이 요구사항과 일치하는지 확인하는 체계적이고 계획적인 작업 <br/><br/>\
# 필요성 : 요구사항 검증, 생산성 향상, 품질 향상 <br/><br/>\
# 품질평가 모델 <br/>\
<img src = "./img/SourceCodeQualityEvaluation.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
# 신뢰도 측정 방법 <br/>\
- 성숙성 : 고장을 피해가는 능력 (문제 해결이력, 사용환경 시험) <br/>\
- 오류 허용성 : 결함 발생시 성능 수준 유지 (다운 회피율, 오조작 회피율) <br/>\
- 회복성 : 데이터 복구 능력 (회복율, 복구율) <br/>\
- 준수성 : 목표 이행 능력 (정보제공, 준수율) <br/><br/>\
# 프로세스 인증모델 개선 부각배경 <br/>\
<img src = "./img/SWProductEvaluationBackground.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
# 대응전략 방안 <br/>\
<img src = "./img/SW_Autheorization_Model_Change.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
* KPC 97회 관리 4교시 3번 <br/>\
* 라이지움 87회 2교시 1번 <br/>\
* 119회 응용 4교시 4번\
',

// McCall 품질요소 
'# 정의 : 사용자 요구사항 지표 제시 항목 <br/>\
- 사용자가 요구하는 소프트웨어 제품의 품질을 구체화하였으며, 소프트웨어의 품질에 영향을 미치는 요소들을 제품운영, 제품개선, 제품변환과 같이 세 가지 측면으로 분류하고 이들에게 각각 적용할 수 있는 척도를 제시하고 소프트웨어가 요구된 제품 품질을 달성하기 위해 얼마나 진행되었는지 파악할 수 있도록 지표를 제시 <br/><br/>\
# 구성 <br/>\
- 제품운영 : 운영상 특징 / 정확성, 신뢰성, 효율성, 무결성, 사용성 <br/>\
- 제품개선 : 변화 견디는 능력 / 유지보수성, 시험성, 유연성 <br/>\
- 제품전이(변화) : 새로운 환경 적응력 / 이식성, 재사용성, 상호운영성 \
',

// ISO/IEC 9126
'# 정의 : 사용자관점 품질 특성 국제 표준 <br/>\
- 소프트웨어 공학 - 제품품질 <br/>\
- 사용자관점에서 품질 특성을 정의하고 객관적 측정을 위한 품질 평가 매트릭스 제공하는 국제 표준 <br/><br/>\
# 구성 <br/>\
- 품질모델(9126-1) : 주특성(기신사효유이), 부특성 <br/>\
<font color = "red">-> 기능 : 기능성, 유용성, 호환성, 보안성 <br/>\
-> 비기능 : 신뢰성, 사용성, 효율성, 이식성 </font><br/>\
- 외부메트릭(9126-2) : 외부적 성질(시험,운영,관찰가능) <br/>\
- 내부 메트릭(9126-3) : 내부적 성질(설계,코드 산출물 측정) <br/>\
- 사용메트릭(9126-4) : 실제 사용자 환경, 제품 효과 측정 정량적 <br/><br/>\
* 라이지움 87회 관리 2교시 1번\
',
 
// ISO 12119
'# 정의 : 품질 요구사항, 시험에 대한 국제 표준 / <font color = "red">패키지</font> 형태 <br/>\
- 정보기술 및 소프트웨어 패키지 형태의 제품에 대한 품질 요구사항 및 시험에 대한 국제 표준<br/><br/>\
# 대상 <br/>\
- 1단계 : 패키지SW <br/>\
- 2단계 : SW패키지 <br/>\
- 3단계 : 패키지, Critical 수주개발 SW <br/><br/>\
# 구성 (제사실)<br/>\
- 제품 : 기본적인 요구사항과 적절한 문서화 체계 평가 <br/>\
- 사용자문서 : 정확, 이해, 쉬운 구조 평가 <br/>\
- 실행프로그램 : 정확, 안정적 실행 평가 <br/><br/>\
# 절차 : 제품 설명서 시험 > 사용자 문서 시험 > 실행 프로그램 시험 > 시험 기록 > 시험 보고서 작성 <br/><br/>\
* ISO/IEC 25051로 대체 <br/><br/>\
<img src = "./img/ISOIEC12119.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
* 라이지움 87회 관리 2교시 1번\
',

// ISO 14598
'# 정의 : 프로세스 표준 / ISO 9126 사용 / 절차, 기본사항, 평가 프로세스<br/>\
- ISO 9126의 사용을 위한 절차와 기본 사항 및 소프트웨어 평가 프로세스에 대한 표준<br/><br/>\
# 특징 : 반복성, 재사용성, 공정성, 객관성 <br/><br/>\
# 구성 (<font color = "red">일기개구평평</font>) <br/>\
- ISO 14598-1 : 일반 사항 (ISO 25040) <br/>\
- ISO 14598-2 : 기획 및 관리 (ISO 25001) <br/>\
- ISO 14598-3 : 개발자를 위한 프로세스 (ISO 25042) <br/>\
- ISO 14598-4 : 구매자를 위한 프로세스 (ISO 25043) <br/>\
- ISO 14598-5 : 평가자를 위한 프로세스 (ISO 25044) <br/>\
- ISO 14598-6 : 평가 모듈 (ISO 25041) <br/>\
<img src = "./img/ISOIEC14598_2.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 라이지움 87회 관리 2교시 1번\
',

// [제품품질]- ISO 25000(SQuaRE)
'# 정의 : 품질 측정 및 기법, 평가 및 방안에 대한 국제 표준 / 각 단계 산출 제품 / <br/>\
- SQuaRE / Software product Quality Requirements and Evaluation <br/>\
- 개별적으로 개발된 기존의 SW 품질표준들을 하나로 통합한 SW 품질평가 국제 포준 <br/><br/>\
# 기반 표준 <br/>\
- ISO 9126 : SW 품질특성/품질측정 표준 <br/>\
- ISO 12119 : 패키지 SW 품질 표준 <br/>\
- ISO 14598 : SW 품질평가 표준 <br/>\
- ISO 15288 : 시스템 엔지니어링 프로세스 표준 <br/><br/>\
# 구성 (<font color = "red">관모메요가</font>) <br/>\
- 2500n : 품질관리 - 25000(가이드라인), 250001(14598-2(계획/관리)) <br/>\
- 2501n : 품질모델 - 25010(제품품질모델 9126-1), 25012(데이터 품질모델)<br/>\
- 2502n : 품질측정 - 25020(매트릭 참조 모델), 25021(품질 측정요소), 25022(내부 매트릭 9126-3), 25023(외부 메트릭 9126-2), 25024(사용중 품질 9126-4)<br/>\
- 2503n : 품질요구 - 25030(품질요구 15288) <br/>\
- 2504n : 품질평가 - 25040(평가개요 14598-1), 25041(평가모델 14598-6), 25042(개발자프 14598-3), 25043(획득자프(14598-4), 25044(평가자프 14598-5), 25045(복구평가모델)<br/>\
- 25050~99 확장 : 25051(COTS 품질 요구사항), 25060(사용성 품질 특성 구조), 25062(사용성 시험구조) <br/><br/>\
<img src = "./img/ISO25000.png" style = "max-width:100%; hegiht:auto;">\
',

// ISO 25010
'# 정의 : 품질 특성 / 품질 평가 Metrics / 국제 표준 <br/>\
- 소프트웨어 품질의 특성을 정의하고, 품질 평가의 Metrics를 정의한 국제 표준 <br/><br/>\
# 특징 <br/>\
- 사용자 관점 : 개발자 관점이 아닌 사용자 관점 <br/>\
- ISO 9126 개선 : 보안성과 호환성이 추가, 준수성 항목 전체 제외 <br/><br/>\
# 암기 <br/>\
- <font color = "red">기타정성</font> : 타당성 / 정확성 / 성숙도 <br/>\
- <font color = "red">신복 가결성</font> : 복구 용이성 / 가용성 / 결함 수용성 / 성숙성 <br/>\
- <font color = "red">사해 인류 접근LO</font> : 이해성 / 인터페이스 / 사용자 오류보호 / 접근성 / Learnability / Operation <br/>\
- <font color = "red">효자시기</font> : 자원 활용성 / 시간 효율성 / 기억 용량 <br/>\
- <font color = "red">유분수 재모시</font> : 분석성 / 수정 가능성 / 재사용성 / 모듈성 / 시험가능성 <br/>\
- <font color = "red">이환설치</font> : 환경 적응성 / 설치 용이성 / 치환성 <br/>\
- <font color = "red">보책 기무부인</font> : 책임성 / 인증성 / 기밀성 / 무결성 / 부인방지 <br/>\
- <font color = "red">호 공존운용</font> : 상호 공존성 / 상호 운용성 <br/><br/>\
# 품질 특성 <br/>\
1. 내부, 외부 품질 <br/>\
- 기능 적합성 : 기능 성숙도, 기능 정확성, 기능 타당성 <br/>\
- 신뢰성 : 성숙성, 결함 수용성, 복구 용이성, 가용성 <br/>\
- 실행 효율성 : 시간 효율성, 자원 효율성, 기억 용량 <br/>\
- 유지보수성 : 분석성, 수정 가능성, 시험 가능성, 모듈성, 재사용성 <br/>\
- 이식성 : 환경 적응성, 설치 용이성, 치환성 <br/>\
- 호환성 : 상호 공존성, 상호 운용성 <br/>\
- 보안성 : 기밀성, 무결성, 부인방지, 책임성, 인증성 <br/><br/>\
2. 사용 품질 <br/>\
- 효율성 : 주어진 목표달성을 위한 정확성, 완전성 측정 <br/>\
- 생산성 : Task 효율성과 관련되어 소요된 자원 측정 <br/>\
- 안정성 : 특정 위험의 발생 가능성의 수준 측정 <br/>\
- 만족도 : 제품의 사용에 대한 속성 측정 <br/><br/>\
* ITPE 합숙 122회 1일차 1교시 6번\
',

 
// ISO 12207
'# 정의 : 체계적인 소프트웨어 획득, 공급, 개발, 운영 및 유지보수를 위해서 소프트웨어 생명주기 공정 표준을 제공함으로써, 소프트웨어 실무자들이 개발 및 관리에 동일한 언어로 의사소통할 수 있는 기본틀을 제공하기 위한 프로세스<br/><br/>\
# 암기 <br/>\
# 구성 : 3개의 생명주기 프로세스, 17개의 세부프로세스, 74개 활동(Activity) 및 224개의 세부활동(Task)로 구성 <br/>\
<img src = "./img/ISO12207Overview.png" style = "max-width:100%; height:auto;"><br/>\
- 기본(획공개운유)<br/>\
- 지원(품검확합감문형문)<br/>\
- 조직(관기훈개)<br/><br/>\
# 유지보수 프로세스 <br/>\
- 프로세스 구현 <br/>\
- 문제 및 변경 분석 <br/>\
- 변경 구현 <br/>\
- 유지보수 검토 및 승인 <br/>\
- 이전(마이그레이션) <br/>\
- SW 폐기<br/><br/>\
* 라이지움 87회 관리 2교시 1번\
',
 
// [ISO 21500]- ISO 15504(SPICE)
'# 정의 : SW 프로세스 품질 표준 <br/>\
- 여러 프로세스 개선모형을 국제표준으로 통합한 ISO의 소프트웨어 프로세스 모형 <br/>\
- SW프로세스 전반을 심사하여 조직의 SW개발 프로세스를 개선하고 개발자의 개발능력을 향상시킴으로써 개발위험을 통제하기 위한 목적으로 ISO에서 추진하는 SW품질 표준화 심사평가 모형<br/><br/>\
# 등장배경 <br/>\
- ISO 9000-3이 SW 분야 특성 및 프로세스면 개선하지 못함 <br/>\
- ISO 12207 : What만 있고 How가 없는 단점 해결 <br/><br/>\
# 기본목표 <br/>\
- 프로세스별 성능수준 제시 <br/>\
- 구체적 향후 개선방향 제시 <br/>\
- S/W 프로세스 개선 + S/W 프로세스 수행능력수준 판단 <br/><br/>\
# 수행능력 차원 평가 (Y축 / IPMEPO) <br/>\
0. Incomplete : 미구현 혹은 목적의 미달성 <br/>\
1. Performed : 프로세스의 수행 및 목적 달성 <br/>\
2. Managed : 프로세스 수행의 계획 및 관리 <br/>\
3. Established : 표준 프로세스의 사용 <br/>\
4. Predictable : 프로세스의 정량적인 이해 및 통제 <br/>\
5. Optimizing : 프로세스의 지속적 개선 <br/><br/>\
# 프로세스 차원 평가 (ISO 12207 생명주기 프로세스 기반)(X축 / CESMO) <br/>\
1. 기본 프로세스 <br/>\
- CUS(Customer-Supplier) : 인수, 공급, 요구도출, 운영 <br/>\
- ENG(Engineering) : 시스템과 소프트웨어 개발, 유지보수 <br/><br/>\
2. 지원 프로세스 <br/>\
- SUP(Support) : 문서화, 형상, 품질보증, 검증/확인, Review, 감사, 문제해결 <br/><br/>\
3. 조직 프로세스 <br/>\
- MAN(Management) : 프로젝트 관리, 품질관리, 위험관리 <br/>\
- ORG(Organization) : 조직배치, 개선활동, 인력관리, 측정도구, 재사용 <br/><br/>\
<img src = "./img/ISO15504_4.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
* ISO 33000으로 표준 Family화 진행 <br/><br/>\
* 라이지움 87회 관리 2교시 1번\
',
 
// CMMI
'# 정의 : 기업 능력수준 지표 모델 (de facto)<br/>\
- Capability Maturity Model Integration <br/>\
- SW 및 시스템 품질인증 수행하여 정보시스템 구축하는 기업의 능력수준 나타내기 위해 SW-CMM과 SE-CMM을 통합해 개발한 모델 <br/><br/>\
# 연혁 <br/>\
- V1.0(1999) : 미국 개발 <br/>\
- V1.1(2002) : SW-CMM의 발전된 형태 <br/>\
- V1.3(2010) <br/>\
- V2.0(2018) : 2020년 4월부터 V2.0 심사만 허용<br/><br/>\
# 심사단계 <br/>\
- 예비심사(문서위주) <br/>\
- 본심사(문서,인터뷰,실제활동) <br/><br/>\
# 수행절차 : 평가준비 > 평가수행 > 평가결과보고 <br/><br/>\
# 성숙도 (<font color = "red">IMDMO, IPMDMO</font>)<br/>\
<img src = "./img/CMMI_Level.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
* 125회 응용 3교시 3번 <br/>\
* 라이지움 87회 관리 2교시 1번\
',
 
// CMMI V2.0
'# 정의 : DevOps, Agile을 반영한 기업 성숙도 평가모델 <br/>\
- 소프트웨어, 제품 및 서비스 개발 조직의 공정 및 관리 능력을 향상시키고, <font color = "red">생산성과 효율적 행동을 장려</font>할 수 있도록 고안된 프로세스이자 모델 <br/><br/>\
# Overview <br/>\
<img src = "./img/CMMI2Overview.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 구성도 (<font color = "red">PC, Model (PA G P)</font>) <br/>\
<img src = "./img/CMMI_Model.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 구성요소 <br/>\
1. Model <br/>\
- View : CMMI에 기정의된 모델 구성요소 중 사용자 입장에서 선택한 중요 요소 집합 <br/>\
- Category : 보편적 문제를 다루는 영역의 논리적 그룹이나 뷰 <br/>\
- Capability Area : 해당 PA에 정의된 가치 및 필수 정보 달성을 위한 행동 모음 <br/><br/>\
2. Practice Area <br/>\
- Required PA Info. : 정의된 목적, 가치 달성을 위한 필수 주요 활동 <br/>\
- Explanatory PA Info. : 개별 프랙티스 요약 및 연관 프랙티스 정보 <br/>\
- Practice Group : PA 내에서 프렉티스에 대해 구성된 구조로 성과 경로 개선 제공 <br/><br/>\
3. Practice : 목표 충족을 위한 구체적이고 실질적인 활동 지침 <br/><br/>\
# CMMI 심사 종류 (<font color = "red">공유자재</font>)<br/>\
- Benchmark(공식/3년) : CMMI 심사 시스템(CAS)에서 무작위 추출, 입력 후 심사 진행 <br/>\
- Sustainment(유지/2년) : 이전 심사 때와 동일한 조직, Sampling Factor 값 유지 여부 확인 <br/>\
- Evaluation(자체 심사) : 방침, 프로세스 모델 일치성 여부 점검 통한 개선 사항 식별 <br/>\
- Action Plan Reappraisal(재 심사) : 실패, 심사 목표 달성 확인, 60일 내 재심사, 동일 심사위원 진행 <br/><br/>\
# Process Category (D(생산), M(계획), E(제공), I(유지)) <br/>\
1. Doing <br/>\
- 설명 : 솔루션 생산, 제공 <br/>\
- 목표 : 고객 만족 <br/>\
- CA : Ensuring Quality, Engineering and Developing Products <br/><br/>\
2. Managing <br/>\
- 설명 : 솔루션 이행 계획, 관리 <br/>\
- 목표 : 이슈 해결 <br/>\
- CA : Plaaning and Managing Work, Managing Business Reslilience <br/><br/>\
3. Enabling <br/>\
- 설명 : 솔루션 이행 및 제공 지원 <br/>\
- 목표 : 명확한 접근 방식 제공 <br/>\
- CA : Supporting Implementation, Managing Safety,Security <br/><br/>\
4. Improving <br/>\
- 설명 : 성과 향상 유지 <br/>\
- 목표 : 효과적, 지속 가능적 <br/>\
- CA : Improving Performance, Building and Sustaining Capability <br/><br/>\
<img src = "./img/CMMI_Detail.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 1.3 2.0 비교 <br/>\
<img src = "./img/CMMI_Compare.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 125회 응용 3교시 3번 <br/>\
* ITPE 7회 2교시 6번 <br/>\
* ITPE 2회 1교시 9번 <br/>\
* KPC 97회 관리 4교시 3번\
',
 
// ISO/IEC 33000
'# 정의 : 프로세스 능력 평가를 위한 프로세스 심사모델의 구성을 전체 Framework를 제공하는 ISO 국제 표준 <br/><br/>\
# 구성 (<font color = "red">평측모 / 요 / 문공공프성 / 가 / 1 2 3 4 10 20 30 40 60 80 14 </font>)<br/>\
<img src = "./img/ISOIEC33000Overview.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 프로세스 수준 모델 <br/>\
<img src = "./img/ISOIEC33000Model.png" style = "max-width:100%; height:auto;"><br/><br/>\
* KPC 97회 관리 4교시 3번\
',
 
// ASPICE
'# 정의 : ISO 15504, 12207 / 자동차 개발 특화 / 프로세스 모델 국제 표준화 <br/>\
- Automotive SPICE <br/>\
- ISO/IEC 33000 표준 기반의 자동차 소프트웨어 개발에 특화된 국제표준 프로세스 모델 <br/><br/>\
# 능력수준 (ISO 15504 - 수행능력 차원 평가) <br/>\
0. Incomplete : 미구현 혹은 목적의 미달성 <br/>\
1. Performed : 프로세스의 수행 및 목적 달성 <br/>\
2. Managed : 프로세스 수행의 계획 및 관리 <br/>\
3. Established : 표준 프로세스의 사용 <br/>\
4. Predictable : 프로세스의 정량적인 이해 및 통제 <br/>\
5. Optimizing : 프로세스의 지속적 개선<br/><br/>\
# 참조 모델 (ISO 12207) <br/>\
<img src = "./img/ASPICE.png" style = "max-width:100%; height:auto;"><br/>\
1. 기본적 생명주기(<font color = "red">ASE</font>) : <br/>\
- Acquisition : 고객이 제품 및 서비스 획득 프로세스 <br/>\
- Supply : 공급업체가 제품 및 서비스 제안, 인도 프로세스 <br/>\
- Engineering : 고객의 요구사항 관리, 제품, 시스템 명세, 유지 관리 프로세스 <br/><br/>\
2. 지원 생명주기(<font color = "red">S</font>) <br/>\
- Support : 다른 프로세스 지원 구성 <br/><br/>\
3. 조직 생명주기(<font color = "red">MIR</font>) <br/>\
- Management : 프로젝트 관리자가 이행 활동 포함 프로세스 <br/>\
- Improvement : 조직단위 수행되는 프로세스 정의, 전개, 심사, 개선 위한 프로세스 <br/>\
- Reuse : 조직의 재사용 프로그램 체계적 활용 프로세스 <br/><br/>\
* 인포레버 116회 응용 1교시 16번\
',

// CAR
'# 정의 : 결함 재발 방지 시정 조치 활동 <br/>\
- Casual Analysis & Resolution <br/>\
- Level 4에서 5로 진입하기 위해 만족되어야 하는 두가지 프로세스 영역(CAR, OPM) 중 하나 <br/>\
- 결함, 기타문제들의 근본 원인을 분석하고 향후 재발을 방지하기 위한 시정조치를 취하는 활동 <br/><br/>\
# 절차 : 평가 대상 식별 > 원인분석 회의 > 해결방안 도출 > Pilot 수행 > 조직프로세스 적용 \
',

// SP 인증
'# 정의 : 한국형 SW 프로세스 평가모델 <br/>\
- SW 산업진흥법 23조 근거, SW 개발 단계별 작업절차, 산출물 관리역량 분석하여 SW 역량 수준 평가, 인증하는 한국형 SW 프로세스 평가모델 <br/><br/>\
# 평가영역 <br/>\
- 2등급 : 프로젝트 관리, 개발, 지원 <br/>\
- 3등급 : 조직, 프로세스 개선 <br/><br/>\
# 인증등급 <br/>\
- 1등급 : 프로젝트 임기응변식 수행 <br/>\
- 2등급 : 시행착오 프로젝트 팀내 반복 발생하지 않으나 조직 차원 발생 <br/>\
- 3등급 : 안정되고 품질수준 조직차원 방지 <br/><br/>\
# 인증 체계 <br/>\
- 정책기준 : 과기정통부 <br/>\
- 인증기관 : nipa \
',

// IEEE 1633
'# 정의 : SW 신뢰성 평가 프로세스 표준 <br/>\
- SW 신뢰성 분석한 데이터 수집절차, 신뢰성 평가 위한 프로세스, 가이드라인 제공 국제 표준 <br/><br/>\
# 암기 <br/>\
- 프로세스(6) : 도신합(정운테) 데평(부모)개 <br/><br/>\
# 평가 프로세스 <br/>\
<img src = "./img/IEEE1633_1.jpg" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/IEEE1633_2.png" style = "max-width:100%; height:auto;">\
', 

// GS 인증
'# 정의 : 국내 품질인증제도 (소프트웨어 품질 인증서 발급) <br/>\
- TTA가 국내 SW완성도, 기술력, 사용성, 신뢰성 평가하여 제품에 부여하는 품질인증제도 <br/><br/>\
# Overview <br/>\
<img src = "./img/GS_Overview.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
# 인증 대상 <br/>\
<img src = "./img/GS_Target.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
# 인증제도 기준 (측시평)<br/>\
<img src = "./img/GS_Standard.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
# 절차 <br/>\
<img src = "./img/GS_Process.png" style = "max-width:100%; hegiht:auto;"><br/>\
<img src = "./img/GS_Process_Detail.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
# 효과 <br/>\
<img src = "./img/GS_Effect.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
# 등급별 차이점 <br/>\
<img src = "./img/GSGrade.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
* 123회 응용 2교시 5번 <br/>\
* KPC 93회 관리 3교시 6번\
',

// NEP 인증
'# 정의 : 최초 개발 촉진 제도 <br/>\
- New Excellent Product <br/>\
- 국내에서 최초로 개발되는 기술 또는 이에 준하는 대체기술을 적용한 제품을 인증하고, 제품의 초기 판로를 지원 및 기술개발을 촉진하기 위한 제도 <br/><br/>\
# 근거 <br/>\
- 산업기술혁신 촉진법 <br/><br/>\
# 인증 예외 <br/>\
- 국내 일반화된 기술 적용 <br/>\
- 핵심 부품 일체가 수입제품 <br/>\
- 적용한 신기술이 신제품의 고유기능과 목적 구현에 불필요 <br/>\
- 엔지니어링 기술이 주된 기술이 되는 시설 <br/><br/>\
# 인증 혜택 <br/>\
- 공공기간 우선 구매, 사업우대, 홍보지원 <br/><br/>\
# 인증 주체 <br/>\
- 산자부 : 기술표준원 <br/>\
- 정통부 : 전파연구소 <br/><br/>\
# 유효기간 <br/>\
- 3년 (최대 6년) \
',

// NET 인증
'# 정의 : 신기술 국가 인증제도 <br/>\
- New Excellent Technology <br/>\
- 신기술을 조기에 발굴하고 그 우수성을 정부가 인증함으로써, 신기술의 상용화와 기술거래를 촉진, 제품의 원활한 시장진출을 돕기 위해 도입된 국가 인증제도 <br/><br/>\
# 근거 : 산업기술혁신 촉진법 <br/><br/>\
# 인증 대상 <br/>\
- 정량적 평가 지표확보한 2년이내 상용화 가능한 기술 <br/><br/>\
# 인증 혜택 <br/>\
- 국가/공공기관 구매지원, 자금지원, 조세지원, 기술지도, 지경부 산업기술 개발 사업 참여지원 <br/><br/>\
# 인증 주체 <br/>\
- 과기부 : 산업기술진흥협회 <br/>\
- 건교부 : 건설교통기술평가원 <br/>\
- 환경부 : 환경관리공단 <br/><br/>\
# 유효기간 : 3년 (최대10년) \
',

// 공개SW컴플라이언스이슈
'# 정의 : 저작권 보호, 사용간 상충 문제 <br/>\
- 저작자를 보호하기 위해 사용조건과 의무조항이 공개 SW 사용에 있어 컴플라이언스 이슈를 발생시키는 문제 <br/><br/>\
# 공개 SW 활성화를 위한 방안 <br/>\
- 소스코드 분리 : 분리정책 사용 <br/>\
- 저작권 선언문구와 라이선스 정보의 보존 <br/>\
- 공개 SW 명세 정보의 표준화 \
',

// Patent Map 
'# 정의 : 특허 수집 / 기술동향, 출원인 동향 / 그래프 시각화 시스템 <br/>\
- 현재까지 각국에서 출원된 특허자료를 검색, 수집하여 기술동향, 출원인동향 등을 그래프를 통해 시각적으로 보여 주어 복잡하게 얽힌 기술, 권리관계를 한 눈에 쉽게 이해하도록 한 시스템 <br/><br/>\
# 특허구성 <br/>\
- 서지적 항목 : 출원인, 발명자, 출원일 등 <br/>\
- 기술적 항목 : 기술분류, 기술용어 등 <br/>\
- 권리적 항목 : 특허권 범위, 권리이전 등 <br/><br/>\
# 활용 <br/>\
- 기술정보 : 개발동향, 핵심 기술, 기본특허 / 연구 테마 선정, 기술개발 방향 선정 <br/>\
- 권리정보 : 특허권리 범위, 특허취득, 침해가능성 / 특허출원여부 결정, Claim 처리 <br/>\
- 경영정보 : 기업기술 및 상품개발 동향 / 연구개발 전략 수립, 특허관리 방향 설정 <br/><br/>\
* 123회 응용 2교시 6번\
',

// 기술평가표
'# 정의 : 시스템 기술성 평가 / 나열 평가표 <br/>\
- 패키지소프트웨어 및 정보시스템의 기술성 평가를 위하여 필요한 사항 나열 평가표 <br/><br/>\
# 평가항목 <br/>\
1. 일반부분 <br/>\
- 업체의 경영상태 : 부채비율, 유동비율, 신용도 <br/>\
- 유사사업 수행경험 : 최근 3년 관련분야 사업 수행 실적 평가 <br/>\
- 투입인력의 적정성 : PM, 컨설턴트, 기술 수준, 사업 이해도<br/><br/>\
2. 기술부분 <br/>\
- 시스템 요구사항 : 요구 규격 충족, 인터페이스 및 확장 가능 여부 <br/>\
- 기능 요구사항 : 기능 요구,기대,제약사항 충족정도 <br/>\
- 보안 요구사항 : <font color = "red">충족정도, 적정성, 구체성</font> <br/>\
- 데이터 요구사항 : 데이터 전환 계획, 검증 방법, 오류 처리 <br/><br/>\
3. 관리부분 <br/>\
- 관리방법론 : 일정, 사업, 위험, 보안, 산출물 관리 <br/>\
- 일정계획 : 수행기간, 세부일정 평가 <br/>\
- 개발장비 : 개발에 필요한 환경 구성 구체 제시 <br/><br/>\
4. 프로젝트 지원 <br/>\
- 품질 보증 : 품질보증 방안 적합성 <br/>\
- 시험 운영 : 개발된 시스템 시험 운영 위한 방법 <br/>\
- 교육 훈련 : 관리자 위한 교육훈련 방법, 내용, 일정 <br/>\
- 유지 관리 : 유지관리 계획, 조직, 절차, 범위 및 기간, 기타 활동 <br/><br/>\
* 123회 응용 2교시 6번\
',

// 저작권, 특허권
'# 저작권(Copyright) : 창작자가 취득하는 권리 <br/>\
- 창작물에 대하여 창작자가 취득하는 권리. 저작물은 저작권자의 허락을 얻어야 저작물 복제, 배포, 수정 가능함 <br/><br/>\
# 특허권(Patent) : 발명자가 갖는 독점적 배타권 <br/>\
- 발명에 관하여 발명자가 갖는 독점적 배타권. 저작권과 달리 출원, 심사, 등록 절차가 수행되어야 권리가 발생 <br/><br/>\
* 라이지움 86회 1교시 5번 \
',
  
// FRAND
'# 정의 : 표준 특허권자 / 특허 사용자 차별 x / 규칙 <br/>\
- Fair, Reasonable And Non-Discriminatory Terms <br/>\
- 표준 특허권자가 표준 특허를 누구에게나 공정하고 합리적이며 비차별적인 방식으로 제공 원칙 <br/><br/>\
# 등장 배경 <br/>\
- 반독점 행위 제재 <br/><br/>\
# 표준 특허와의 관계 <br/>\
<img src = "./img/FRAND_Patent.png" style = "max-width:100%; height:auto;"><br/>\
<font color = "red">* 특허 Hold-Up : 특허권자 과도한 협상력 </font><br/><br/>\
# 3원칙 <br/>\
- FAIR : 라이선싱 조건, 반독과점/반경쟁법으로부터 나온 원칙 <br/>\
- Reasonable : 라인선스 비용, 여러 라이선스 패키지 중 합리적 요율 적용 <br/>\
- Non-Discriminatory : 라이선스 부여 받는 모든 당사자 비차별적 대우 <br/><br/>\
# 찬반 논란 <br/>\
- 찬성 : FRAND 로열티 합의 <br/>\
- 반대 : FRAND 계약 자체 금전 해결화 <br/><br/>\
* 인포레버 1705 관리 1교시 12번\
',
  
// 지식재산권
'# 정의 : 인간의 지적 창작물 보호 <br/>\
- 인간의 창조적 활동 또는 경험 등을 통해 창출하거나 발견한 지식,정보,기술이나 표현, 표시 그 밖에 무형적인 것으로서 재산적 가치가 실현될 수 있는지적 창작물에 부여된 재산에 관한 권리 <br/><br/>\
# 종류 <br/>\
- 산업 재산권 : 특허, 실용신안, 디자인, 상표 <br/>\
- 저작권 : 저작권, 저작인접권(음악제작자) <br/>\
- 신지식재산권 : 첨단사업재산권(AI), 산업저작권(SW), 정보재산권(DB, 영업비밀) <br/><br/>\
# 보호 기술 <br/>\
- 난독화 : Reverse Engineering 방지 <br/>\
- Finger printing : 저작권 정보 삽입 <br/>\
- Water mark : 저작자 정보 삽입 <br/>\
- Encryption : 전체 알고리즘 적용 \
',

// SDLC 
'# 정의 : 소프트웨어 생명주기 모형 <br/>\
- SW가 타당성 조사로부터 개발, 유지보수, 폐기까지의 전 과정을 하나의 주기로 보고, 전 과정을 단계별로 나눈 생명주기 모형 <br/><br/>\
# 절차 <br/>\
- 타당성 조사 -> 요구분석 -> 설계 -> 개발 -> 시험 -> 유지보수 -> 폐기 <br/><br/>\
# 종류 <br/>\
- 폭포수 : 분석, 설계, 개발, 구현, 시험, 납품 <br/>\
- 프로토타입 : 시제품, 점진적 개발 <br/>\
- 나선형 : 계획, 위험분석, 개발, 고객 평가 <br/>\
- 반복적점증적 : 정의, 시스템아케틱처, (증분명세,구현,검증,통합), 증분인도, 운영 <br/>\
- RAD : 빠른개발 모델(60~90일), CASE 도구 <br/>\
* CASE(Computer-Aided Software Engineering) : 시스템 개발 방법론 자동화 지원 <br/><br/>\
# 연계도 <br/>\
<img src = "./img/SDLC_Model_Interraction.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 라이지움 87회 관리 1교시 10번\
',

// 폭포수모델
'# 정의 : 순차적 접근 방법 / 고전 / SDLC<br/>\
- 고전적 라이프 사이클 패러다임의 분석, 설계, 개발, 구현, 시험 및 유지보수과정을 순차적으로 접근하는 방법<br/><br/>\
# 암기 <br/>\
- 선정기준 : 방통시인규 <br/>\
- 구성 : 타요설개시유폐 <br/><br/>\
# 구성 : 타당성조사 -> 요구분석 -> 설계 -> 개발 -> 유지보수 -> 폐기 <br/><br/>\
# 선정기준 : [방통시인규]<br/>\
- 개발소요 방법/도구 <br/>\
- 통제수단 <br/>\
- 시간/비용 <br/>\
- SW산출물 인도 방식 <br/>\
- 프로젝트 규모/성격 \
',

// 프로토타입모델
'# 정의 : 초기 실제 운영 모델 개발 / 이해향상 / 요구사항 도출 용이<br/>\
- 개발하려는 시스템의 주요기능을 초기에 실제 운영할 모델로 개발하여 사용자 이해향상, 요구사항 도출이 용이한 모델<br/><br/>\
# 장/단점 <br/>\
- 장점 : 요구사항 도출용이, 시스템 이해와 품질 향상, 개발자와 사용자 의사소통 원활 <br/>\
- 단점 : Prototype 폐기 따른 비경제적, 산출물 문서화 어려움, 프로젝트 관리소홀, 최종결과물 오해 <br/><br/>\
# 적합 : 사용자 요구가 불투명할 때, 프로젝트 타당성이 의심스러운 경우 신기술 실현가능성 검증시 <br/><br/>\
# 유형 <br/>\
- 수평 프로토타입 : 다양한 기능 고려해 결과물 전반적 예상 가능 <br/>\
- 수직 프로토타입 : 주요기능만 선별 세부 기능까지 구현 <br/>\
=> 단계별 선별 적용 : 초기 범위 결정시 수평 프로토타이핑 활용, 설계 검증단계에서 수직 프로토타이핑 활용, 3D 프린팅과 연결 <br/>\
=> Hybrid Prototyping : 핵심 주요 기능에 대해 수평과 수직을 동시에 적용한 시나리오 프로토타이핑 수행 <br/><br/>\
<img src = "./img/Prototype_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/Prototype_2.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/Prototype_3.png" style = "max-width:100%; height:auto;">\
',

// 나선형 모델
'# 정의 : 점진적 완성 모델 / 폭포수, 원형 + 위험분석 / 지속적 프로토타입 개선 <br/>\
- 폭포수모델과 원형모델에 위험분석 추가하여 개발된 프로토타입을 지속적으로 개선하여 최종 SW를 점진적으로 완성해 나가는 모델 <br/><br/>\
# 암기 : 계위개평 <br/><br/>\
# 단계 : 계획(목표)수립 -> 위험분석 -> 개발 -> 고객 평가 <br/><br/>\
# 장/단점 <br/>\
- 장점 : 신속한 사용자 요구 파악, Risk 감소 <br/>\
- 단점 : 개발기간 장기화 가능성(프로젝트 관리 어려움, 다수고객 사용제품에 부적합)<br/><br/>\
# 적용방안 : 위험관리 강화를 위해 다양한 위험관리 기법 적용 <br/><br/>\
<img src = "./img/SWE_52.PNG" style = "max-width:100%; hegiht:auto;">\
',

// 반복적개발모델
'# 정의 : 반복 개발 완성 모델 / 핵심 요구사항 /<br/>\
- Iterative 모델 <br/>\
- 핵심 요구사항 일부분 혹은 제품의 일부분을 반복적으로 개발하여 최종 시스템으로 완성하는 모델<br/><br/>\
# 암기 <br/>\
- 유형 : 증진 <br/><br/>\
# 적용방안 <br/>\
- 빌드관리 어려움 => CTIP, ALM 등의 자동화된 통합체계 적용 <br/><br/>\
# 유형 <br/>\
- Incremental(증분형) : 범위 확대, 일부분 개발 <br/>\
- Evolutionary(진화형) : 핵심 요구사항부터 개발 <br/><br/>\
# 프로세스 : 분석(증분)-> 설계 -> 구현/시험 -> 설치/운영 <br/><br/>\
# 진화<br/>\
- 특징(3) : 릴리즈 버전관리, 요구사항 명확화, 재사용 <br/><br/>\
<img src = "./img/Iterative_1.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
<img src = "./img/Iterative_2.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
<img src = "./img/EveloutionalModelCompare.png" style = "max-width:100%; hegiht:auto;">\
',
 
// 4세대 모형
'# 정의 : CASE, 코드생성기, 자동화 도구 이용 / 자동 생성 기법 <br/>\
- CASE 및 코드 생성기, 자동화 도구를 이용하여 요구사항 명세로부터 실행 코드를 자동으로 생성할 수 있게 해주는 기법 <br/><br/>\
# 효과 : 재사용성, 안전성, 신속성 표현의 효율성 <br/><br/>\
# CASE(Computer Aided System Engineering) <br/>\
- 요구사항 명세로부터 실행코드를 자동으로 생성 도구 <br/><br/>\
# 구분 : Upper(계획), Middle(분석/설계), Lower(구현), Integrated(통합)\
',

// RAD
'# 정의 : 짧은 기간 개발 방법 <br/>\
- Rapid Application Development <br/>\
- 중요한 시스템을 빠르게 개발하면서도 개발 비용을 줄이고 품질을 유지하기 위해 CASE등 최신개발도구 사용해 2~3개월의 짧은 기간동안 신속하게 개발하는 방법 <br/><br/>\
# 특징 <br/>\
- 도구 CASE 사용 <br/>\
- Prototyping 사용 <br/>\
- 사용자 적극참여 <br/>\
- 소요기간 (60~90일간) 짧은기간 <br/><br/>\
# 프로세스 <br/>\
- 비즈니스 모델링 JRP(Joint Requirement Planning) <br/>\
- 데이터 모델링 <br/>\
- 프로세스 모델링 JAD(Joint App Design) <br/>\
- App 생성 : CASE, RDB, 4GL <br/>\
- 시험 및 인수 \
',

// JAD 
'# 정의 : 집중적 회의 개발 프로세스 <br/>\
- Joint Application Development / Design <br/>\
- 사용자, 관리자, 분석가들이 일정기간(time-box) 내 시스템 요구사항을 규정하기 위해 집중적인 회의를 진행하는 개발 프로세스 <br/><br/>\
# 참여자 <br/>\
- Facilitator (Session Leader) <br/>\
- Analysis <br/>\
- Stakeholders (주제별 전문가, 프로젝트 sponsor 포함) <br/><br/>\
# 절차 <br/>\
- JAD Project 정의 <br/>\
- 사용자 요구조사 (예비정보수집) <br/>\
- JAD session 준비 (Team Building) <br/>\
- JAD session 실행 <br/>\
- 종료 \
',
 
// 원격지 개발
'# 정의 : 소프트웨어 기업이 고객의 통제없이 독립된 공간과 분리된 공정으로 소프트웨어 개발 결과를 서비스하는 방법 <br/><br/>\
# 필요성 : 인력활용 증대, IT 기술 고도화, 글로벌 역량 강화, 비용절감 <br/><br/>\
# 구성 : 온사이트(요구분석, 분석), 원격(설계, 개발, 테스트) <br/><br/>\
# 문제점 : 부정확한 산출물, 중계자 부재, 전달 체계 미흡, 요구사항 변경 대응 문제 <br/><br/>\
# 해결방안 : 중계자, 원격 개발방법론(사용자 스토리, TDD, 애자일 기반 프로세스, 산출물 테스트) \
',

// Clean Room
'# 정의 : 수학적 기초 완전 무결시스템 목표 모델 / 반복, 박스구조, 함수적 등가성 이용 검증 <br/>\
- 시스템의 핵심 영역을 최초로 개발 후 반복, 박스구조 또는 함수적 등가성 이용 검증하여 수학적 기초의 완전무결시스템 목표하는 모델(IBM사 고안)<br/><br/>\
# 암기 <br/>\
- 명세검증(3) : 박함통 <br/>\
- 박스구조(3) : 블상클 <br/>\
- 함수적등가성 순분선반 <br/>\
- 단계(4) : DRPR <br/><br/>\
# 특징 <br/>\
- 목표는 완전 무결한 시스템<br/>\
- 엄격한 설계 <br/>\
- 수학적 기법 활용한 Test <br/><br/>\
# 증가분 인크리먼트 검증 방법 <br/>\
1) 박스구조 분석에 의한 단계적 상세화 : 증가분 상세 검증 <br/>\
2) 함수등가성에 기초한 검증 : 상세화한 것이 정확한지의 검증 <br/>\
3) 이용 시나리오에 의한 통계적 테스트 <br/><br/>\
# 구성 <br/>\
1. 박스구조(블상클) <br/>\
- 블랙박스 : 입출력 데이터 흐름 중심 <br/>\
- 상태박스 : 블랙박스에 상태추가 <br/>\
- 클리어박스 : 상태박스에 제어흐름 추가 <br/><br/>\
2. 함수적 등가성(순분선반) : 순차, 분기, 선택, 반복 <br/><br/>\
# 단계 <br/>\
- SW Development : 박스구조 이용 <br/>\
- Reliability Certification : MTTF, 사용법 TEST <br/>\
- Project Mgmt : 점진개발 <br/>\
- Review : 재검토 <br/><br/>\
<img src = "./img/CleanRoom_1.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
<img src = "./img/CleanRoom_2.png" style = "max-width:100%; hegiht:auto;">\
',

// 함수적등가성
'# 정의 : 명세, 결과물 등가 확인 <br/>\
- 명세를 입력과 출력의 대등관계로 정의된 함수관계로 보고 반복적 개발시 원래 명세와 등가함을 확인 \
',

// V Model 
'# 정의 : Verification, Validation 지원 개발 검증 모형 <br/>\
- 소프트웨어 개발모델 중 폭포수모델의 각 단계별 Verification과 최종 완성물의 Validation을 지원하기 위해 개발된 검증 모형 <br/><br/>\
# 장단점 <br/>\
1. 장점 <br/>\
- 모든 단계에 검증과 확인 과정이 있어 오류를 줄일 수 있음 <br/>\
- 비용 시간 감소 <br/><br/>\
2. 단점 <br/>\
- 생명주기의 반복을 허용하지 않아 변경을 다루기가 쉽지 않음 \
',

// DESS V Model
'# 정의 : 유럽 ITEA, 실시간 임베디드 개발모델 <br/>\
- 유럽 ITEA 협회 고안, 실시간 임베디드 SW 개발위한 SW 개발 생명주기 모델 <br/><br/>\
# 특징 <br/>\
- H/W, S/W 이원화 개발환경 <br/>\
- Relation V : 구현 관점 <br/>\
- Validation V : 확인 및 검증관점 <br/>\
- Model Checking, Review, C-Testing, Integration Testing 중점 <br/><br/>\
<img src = "./img/DESS_VModel.png" style = "max-width:100%; height:auto;">\
',

// Multiple V Model
'# 정의 : Model, Prototype, Final Product Model <br/>\
- 기존의 V 모델을 모델, 프로토타입, 최종제품으로 나누어 연결한 모델 <br/><br/>\
# 구성<br/>\
1. Model : PC를 통해 Simulation TEST <br/>\
2. Prototype : 실험용 HW에서 Prototyping TEST <br/>\
3. Final Product : 실제 HW 및 운영환경에서 테스트 <br/><br/>\
# 각 단계 는 Design, Build, Test 순차적인 개발과정 포함\
',

// W Model 
'# 정의 : 동적 한계 극복 모델 <br/>\
- V 모델의 동적인 테스트 사이클만 제공하는 단점을 보완, 다양한 테스트 단계와 테스트 기반들 사이를 연결한 모델 \
',
 
// COMET
'# 정의 : 초기단계 명확화 모델 <br/>\
- Concurrent Object Modeling and [architectural] design mETod <br/>\
- 하드웨어 및 소프트웨어의 동시 설계 위험성을 최소화하기 위하여 중간에 모형 주택과 같은 의미의 폐기형 프로토타이핑 기법을 적용하여 하드웨어와 소프트웨어간의 역할분담 등을 개발 초기 단계에서 명확히 하는 모델 <br/><br/>\
# 특징 <br/>\
- 임베디드 시스템에 적합 <br/>\
- 개발 중간단계에서는 점증적 프로토타이핑 기법을 적용 <br/>\
- 점진적 반복적 \
',

// Secure SDLC 
'# 정의 : <br/>\
- 개발 단계에만 초점 한 기존 개발 보안의 한계를 극복하고, SPOF 대응 및 비용 효율적 보안 적용을 위하여 SDLC 전 영역에 대응한 제반적 보안기술 <br/><br/>\
# 핵심사항 : Code Review / 보안요구 <br/><br/>\
# 단계별 보안기술 <br/>\
- 사전/준비 : 위협모델링 <br/>\
- 계획/분석 : Secure By Design, 보안/프라이버시 위험분석 <br/>\
- 설계 : 공격 영역 분석, 샘플 코드 인스펙션 <br/>\
- 구현 : 정적 분석, 취약 API 탐지, 사용자 식별 <br/>\
- 시험 검증 : 동적/퍼징/침투 테스트, 공격/위협모델 검증 <br/>\
- 배포/운영 : 24*365 모니터링, 취약점 탐지/대응 <br/><br/>\
# 종류 <br/>\
- CLASP : 개념/역할/활동평가/활동구현/취약성 검증(Secure SW사) <br/>\
- MSSDL : Secure By Design, Default, Deployment, Commuications <br/>\
- BSIMM : 12개 보안 강화 활동 <br/>\
- Open SAMM : 설계리뷰, 코드리뷰, 보안 테스팅 <br/>\
- Seven-Touch Point : 코드 검토, 아키텍처 위험분석, 침투 테스트, 위험기반 테스트, 악용사례, 보안요구, 보안운영 <br/>\
- TSP Secure : PSP 기술 구축, TSP 팀 구축 및 작업 <br/>\
- Oracle SSAP \
',
 
// 일정중심 모형 
'# 정의 : 릴리즈일자 목표중심 SW 개발 모델 <br/><br/>\
# 특징 : 요구사항 수렴/우선순위\
',
 
// 진화적 출시 모형
'# 개념 : 여러 사이클 / 제품 개발 <br/>\
- 고객의 요구를 여러 사이클에 걸쳐 개발하여 보여주고 제품을 개선해 나가는 모형 <br/><br/>\
# 절차 : 계획 > 요구분석 > 설계 > (버전개발 > 개발버전 출시 > 고객의견유도 > 고객의견반영 ) > 출시 \
',
 
// 방법론
'# 정의 : 공학적 접근 / 기술 절차,집합 <br/>\
- 공학적 접근에 의해 체계적/순서적 방법에 의해 정보를 분석하여 사용하는 기술의 절차/집합 <br/><br/>\
# 유형 : 기획, 관리, 개발, 품질\
',

// SW 개발 방법론 
'# 정의 : SW공학원리 + SW개발생명주기 적용 개념 <br/>\
- SW공학원리를 SW개발생명주기에 적용한 개념으로 작업활동, 절차, 산출물, 기법등을 체계적으로 정리한 이론 <br/><br/>\
# Over view <br/>\
<img src = "./img/SW개발방법론.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
# 상세 설명 <br/>\
<img src = "./img/SWDevType.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
',

// 구조적 방법론
'# 정의 : 요구사항 및 문서화 기반 SW 개발 방법론 / 모듈화 하향식 분할 수행 <br/>\
- 소프트웨어 모듈화를 위해 하향식 분할의 분석/설계 수행하며 사용자 요구사항 및 문서화를 기반으로 소프트웨어를 개발하는 방법론<br/><br/>\
# 특징 <br/>\
- 프로세스 중심 <br/>\
- Top Down 방식 : 정보공학과 동일 <br/>\
- 분할과 정복 : 정보공학과 동일 <br/>\
- 단계적/절차적 Waterfall 기반 <br/><br/>\
# 단계<br/>\
1. 구조적 분석 : 도형중심, Top Down방식 기능 분해 <br/>\
- 산출물 : DFD, ERD, STD(상태전이도), Mini-Spec(소기능명세서), Data Dictionary(자료 사전) <br/>\
2. 구조적 설계 : 추상화, 결합도, 응집도 고려<br/>\
- 산출물 : Structure Chart, 프로그램 명세서, Multi-Level DFD <br/>\
3. 구조적 개발 : 계층적 형식, 제한된 제어구조, 작성순서대로 PG실행 <br/>\
=> 3개의 논리적 구조 : 연속(Sequence), 조건(IF-Then-Else), 반복(Repetition) \
',

// 정보공학방법론
'# 정의 : 데이터 중심 개발 방법론 / 기업 정보 + 공학적 기법 /<br/>\
- 기업 정보시스템에 공학적 기법을 적용하여 시스템계획, 분석, 설계 및 구축을 하는 데이터 중심의 개발 방법론<br/><br/>\
# 암기 <br/>\
- 특징(5) : 기데도분공 <br/>\
- 단계(4) : 정업분설구 <br/>\
- 원칙(3) : 분데모 <br/>\
- 기술(9) <br/>\
- 한계(4) <br/><br/>\
# 특징 : 기업중심, ISP 중심, 데이터중심 분석/설계, 프로세스/데이터 분리, 분할과 정복, 공학적 접근(자동화도구), 사용자참여, Repository, 통합 CASE툴, 4세대 언어, 프로토타이핑 <br/><br/>\
# 절차: ISP -> BAA(업무영역분석) -> BSD(업무시스템설계) -> BSC(구축) <br/><br/>\
# 원칙(3) : 분할과 정복, 데이터,프로세스 균형유지, 모듈화에 의한 하향식 구성 <br/><br/>\
# 핵심기술 (9) : FW, UML, ERD, Architecture, DB, Repository, CRUD, 프로토타이핑, 통합 CASE Tool <br/><br/>\
# 한계(4) <br/>\
- 구조적 방법론 SDLC 그대로 사용 <br/>\
- 중소규모 Prj 적용 어려움 <br/>\
- CASE Tool 사용 어려움 <br/>\
- 복잡한 논리구조와 많은 산출물 <br/><br/>\
<img src = "./img/SWE2_56_1.PNG" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/SWE2_56_2.PNG" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/정보공학방법론_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
',

// CRUD 매트릭스 
'# 정의 : 상관관계 분석 매트릭스 <br/>\
- Data의 Create, Read, Update, Delete를 업무 Process와 매칭한 프로세스와 데이터 모델링의 상관관계 분석 매트릭스 <br/><br/>\
# 절차 <br/>\
- ERD 분석 및 작성 <br/>\
- 업무 기능 분해도 작성 <br/>\
- CRUD Matrix 작성 \
',

// 절차지향, 객체지향 비교
'# 개념 비교 <br/>\
- 절차지향 : 순서대로 명령을 수행하는 것을 의미하는 것이 아닌 프로시저 호출의 개념을 바탕으로 하는 구조적 프로그래밍 <br/>\
- 절차지향 : 현실 세계의 개체(Entity)를 Attribute와 Method가 결합된 객체(Object)로 모델링하여 Software를 개발하는 방법 <br/><br/>\
# 방법 비교 <br/>\
<img src = "./img/ProcedureObjectProgramming.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 125회 관리 4교시 5번\
',

// 객체지향방법론
'# 정의 : 추상화 생성 개념 기반 방법론 / 구체 -> 추상 <br/>\
- 구체적인 대상들에서 공통적인 특징을 추출하여 추상화 후 생성된 객체 위주로 SW를 개발하는 방법론<br/><br/>\
# 특성/목적 : 캡추다정상 <br/>\
<img src = "./img/객체지향방법론_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
- 캡슐화 : 접근통제 <br/>\
- 추상화 : 본질적 문제 집중 (추상화,인스턴스화) <br/>\
- 다형성 : 동적바인딩 <br/>\
- 정보은닉 : 메시지 전달 (Getter, Setter) <br/>\
- 상속성 : 개발 편리성 <br/><br/>\
# 절차 (<font color = "red">요-객동기-시객구-테패평</font>) <br/>\
<img src = "./img/객체지향방법론_2.png" style = "max-width:100%; height:auto;">\
',
 
// 캡슐화
'# 정의 : 속성, 행위 / 외부 비공개 <br/>\
- 객체의 속성과 행위를 하나로 묶고, 실제 구현 내용 일부를 외부에 감추어 은닉하는 기법 <br/><br/>\
# 예시 : Public(+), Private(-), Protected(#)\
',

// 추상화
'# 정의 : 간결화 모델링 표현 <br/>\
- 객체의 전체가 아닌 필요한 속성들의 일부분만 가지고 객체들을 표현하는 속성 <br/>\
- 모든 내용에 대해서 만들지 않고 중요 내용만을 표현(클래스는 공통 영역에 대한 표현) <br/><br/>\
# 유형 <br/>\
- 자료 추상화 : 객체를 데이터 타입으로 사용 / String, Class <br/>\
- 제어 추상화 : 제어 행위 명령 및 이벤트 / if, for, while <br/>\
- 구조적 추상화 <br/>\
- 단위 추상화 <br/>\
- 프로시저 추상화 <br/>\
- 기능 추상화 : 클래스 내 메소드 정의 / Obj, getName() \
',
 
// 인터페이스
'# 정의 : Class / 추상 메소드 + Static 변수 <br/>\
- 클래스간의 공통 기능을 정의할 때 사용하는 상수와 추상 메소드의 집합체 <br/><br/>\
# 특징 <br/>\
- 멤버변수 public static final 만 선언가능<br/>\
- 추상 메소드만 선언 가능 <br/>\
- Java 경우 다중 인터페이스 상속가능 <br/>\
- Implements <br/><br/>\
# UML 표현 : \<\< interfacae \>\>, 이텔릭체, 점선 화살표 <br/><br/>\
# 사례 : Adapter 패턴 중 class Adapter<br/><br/>\
<img src = "./img/Interface.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/AbstractClassInterface.png" style = "max-width:100%; height:auto;">\
',

// 추상클래스
'# 정의 : Class / 추상 메소드 1개 이상 <br/>\
- 하나 이상의 추상 메소드를 가지며 객체가 가지는 특성을 추상화 시켜 상속을 통해 새로운 클래스를 작성하는 실제 인스턴스를 생성할 수 없는 클래스 <br/><br/>\
# 특징 : 추상 메소드 선언 가능, 다중 인터페이스 상속 불가, extends, 인스턴스 생성 불가 <br/><br/>\
# UML 표현 : 이탤릭체, 화살표 <br/><br/>\
# 사례 : Templete Method 패턴 <br/><br/>\
<img src = "./img/AbstractClass.png" style = "max-width:100%; height:auto;">\
',

// 다형성
'# 정의 : 다른 처리 방식 구현 / 동일 인터페이스 <br/>\
- 동일 인터페이스에 대해 서로 다른 처리 방식으로 구현 가능한 특성<br/><br/>\
# 특징 : 확장성, 재사용성, 유지보수성 <br/><br/>\
# 구현방법 : 오버로딩, 오버라이딩\
',
 
// 정보은닉
'# 정의 : 내부 정보 노출 않는 법 <br/>\
- 외부에서 접근시 내부의 정보에 대해서 노출 시키지 않는 기법 \
',
 
// 상속
'# 정의 : 상 하위 클래스간 / 속성, 메소드 <br/>\
- 하위 클래스가 상위 클래스의 모든 특성(속성과 메소드)를 이어받는 기법 <br/><br/>\
# 종류 : 단일, 다중, 반복\
',
 
// 상속 합성
'<img src = "./img/InheritComposition.png" style = "max-width:100%; height:auto;">\
',
 
// 객체 모델링
'# 정의 : 객체 특성, 구조 / 관계 분석 모델링 <br/>\
- 요구되는 객체를 찾아내어 객체들의 특성과 객체들 사이의 정적 구조 관계를 분석하는 모델링 기법 <br/><br/>\
# 정의 과정 : 추상화 > 클래스 정의 > 관계 분석 > 상속성 <br/><br/>\
# 절차 : 문제 정의 > 객체 모델링 > 동적 모델링 > 기능적 모델링 > 시스템 설계 > 객체 설계 > 구현 > 테스트 및 검증 > 평가 <br/><br/>\
',

// [객체지향방법론]- SOLID
'# 정의 : 디자인 패턴 근본 원칙 / 객체지향 <br/>\
- 객체지향 소프트웨어 설계의 근본 원칙, 디자인 패턴의 근본 원칙 <br/><br/>\
# 주요내용 : SOLID <br/>\
1. SRP(Single Responsibility Priciple) 단일 책임 원칙 : 하나의 역할만 수행 토록 Class 설계<br/>\
- 위반사례 : God Class, Big Class <br/>\
- 목적 : 응집도 강화 <br/>\
<img src = "./img/SingleResponsePrinciple.png" style = "max-width:100%; height:auto;"><br/><br/>\
2. OCP(Open/Closed) 개방폐쇄의 원칙 : 확장에 개방, 변경에 폐쇄, 기능 추가시 영향도 없도록 설계 <br/>\
- 위반사례 : 구현상속, 구현클래스 의존 <br/>\
- 목적 : 재사용, 확장성 <br/>\
<img src = "./img/OpenClosedPrinciple.png" style = "max-width:100%; height:auto;"><br/><br/>\
3. LSP(Liskov Subsitution) 리스코프의 치환원칙 : Sub Type은 언제나 자신의 Base Type으로 교체가능 <br/>\
- 위반 사례 : 무분별한 기능 재정의 <br/>\
- 목적 : 동적바인딩(다형성) <br/>\
<img src = "./img/LiskovSubstitution.png" style = "max-width:100%; height:auto;"><br/><br/>\
4. ISP(Interface Segregation) 인터페이스 분리 원칙 : 다른 클래스 종속할 때, 최소한의 인터페이스 사용 <br/>\
- 위반 사례 : 구현상속, 여러기능 수행 메소드 <br/>\
- 목적 : 결합도 최소화(정보은닉, 다형성) <br/>\
<img src = "./img/InterfaceSegregation.png" style = "max-width:100%; height:auto;"><br/><br/>\
5. DIP(Dependency Inversion) 의존성 역전원칙 : 상위레벨 모듈은 하위레벨 의존금지, 추상화된 상위레벨모듈에 의존 <br/>\
- 위반 사례 : 구현상속, 구현클래스 의존 <br/>\
- 목적 : 결합도 최소화 <br/>\
<img src = "./img/DependancyInversion.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/SOLID_ALL.png" style = "max-width:100%; height:auto;"><br/><br/>\
* DRY(Don\'t Repeat Yourself)\
',

// 패키지 설계원리
'# 종류 (<font color = "red">RCAS</font>)<br/>\
1. REP <br/>\
- Reuse / Release Equivalency Principle <br/>\
- 재사용되는 요소 = 릴리즈(배포) 요소, 패키지 단위 <br/><br/>\
2. CRP <br/>\
- The Common Reuse Principle <br/>\
- ISP의 패키지까지 확장 <br/><br/>\
3. CCP <br/>\
- The Common Closure Principle <br/>\
- 패키지 클래스, 동일 유형 변경 닫혀있어야 함 <br/><br/>\
4. ADP <br/>\
- Acyclic Dependencies Principle <br/>\
- 패키지간 의존성 구조, 비순환 구조 <br/><br/>\
5. SDP <br/>\
- Stable Dependencies Principle <br/>\
- 패키지 최소한 자체, 안정적 패키지들에만 의존 <br/><br/>\
6. SAP <br/>\
- Stable Abstractions Principle <br/>\
- 패키지가 점점 안정될 수록 추상화 <br/><br/>\
* 아이리포 3회 관리 \
',

// IOC
'# 정의 : 컨테이너 위임 기법 <br/>\
- Inversion of Control <br/>\
- 기존의 프로그래밍에서 객체의 라이프 사이클을 개발자가 관리하던 것을 컨테이너에게 그 제어권을 위임하는 프로그래밍 기법 <br/><br/>\
# Overview <br/>\
<img src = "./img/IOC_Overview.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/DI_Structure.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 특징 <br/>\
- 유지보수 용이 <br/>\
- 재사용성 <br/>\
- 테스트 <br/>\
- 자유로운 환경 설정 <br/><br/>\
# 구성 : 빈, 빈펙토리, 애플리케이션컨텍스트, IoC 컨테이너 <br/><br/>\
# DI 유형 <br/>\
1. Setter Injection : Setter Method <br/>\
2. Constructor Injection : Constructor Method <br/>\
3. Method Injection : Singletone 인스턴스와 Non Singletone의 의존관계 연결시키는 방법 <br/><br/>\
# 구현 방법 <br/>\
- DL(Dependancy Lookup) : 개발자들이 컨테이너에게 제공하는 API를 이용하여 사용하고자 하는 Bean을 Lookup(의존성 검색) <br/>\
- DI(Dependancy Injection) : 각 클래스 사이에 필요로 하는 의존관계를 컨테이너가 자동으로 연결(의존성 주입) <br/><br/>\
* 124회 관리 1교시 6번\
',

// DL
'# 정의 : IoC / Pool / 참조 방법 <br/>\
- Dependency LookUp <br/>\
- 저장소에 저장되어 있는 Bean에 접근하기 위해 컨테이너가 제공하는 API를 이용하여 Bean을 Lookup 하는 기술 <br/><br/>\
* 124회 관리 1교시 6번\
',
 
// DI
'# 정의 : 필요한 객체 받아서 사용 / OOP 기법 <br/>\
- Dependency Injection <br/>\
- Loosely Coupled <br/>\
- 각 클래스간의 의존관계를 빈 설정 (Bean Definition) 정보를 바탕으로 컨테이너가 자동으로 연결해주는 IoC 기법 <br/>\
- 필요한 객체를 직접 생성하는 것이 아닌, 외부로부터 필요한 객체를 받아서 사용하는 객체지향 프로그래밍 기법 <br/><br/>\
# Overview <br/>\
<img src = "./img/DI_Overview.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 매커니즘 <br/>\
1. 개발자, 빈 설정파일 의존관계 정보 추가 <br/>\
2. 객체 레퍼런스 컨테이너 주입, 실행시 동적으로 의존관계 생성 <br/>\
3. 컨테이너가 흐름의 주체, 애플리케이션 코드에 의존관계 주입 <br/><br/>\
# 객체 사용 방법 <br/>\
<img src = "./img/ObjectUseMethod.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 유형 <br/>\
- Setter Injection : Setter Method 이용 의존성 삽입 <br/>\
- Constructor Injection : 생성자 이용 의존성 삽입 <br/>\
- Field Injection : Containor mandate <br/><br/>\
# 장점 <br/>\
1. 아키텍처 관점 <br/>\
- 구현 분리 : 자유로운 환경설정 <br/>\
- 변경 용이성 : 변경 쉽게 대처, 유지보수성 <br/>\
- 모듈성 강화 : 재 사용성 강화 <br/><br/>\
2. 개발자, 테스터 관점 <br/>\
- 다형성 : 개발 유연 용이 <br/>\
- Mocking 용이 : 다른 Mock 객체 DI 가능 <br/>\
- Configuration 활용 : 설정 적용된 Bean, 각 서비스에서 DI 가능 <br/>\
- 형식의 변화 유연성 : RestTemplate 같은 다른 Bean 과 형식 맞춰 사용 <br/>\
- Lifecycle 관리 : 외부 컨테이너에서 Singleton Lifecycle 관리 <br/><br/>\
# Code 사례 <br/>\
<img src = "./img/DI_Example.png" style = "max-width:100%; height:auto;"><br/><br/>\
# Class Call <br/>\
<img src = "./img/DI_ClassCall.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 유형 (IoC) <br/>\
1. Setter Injection : 1:1 설정 <br/>\
<img src = "./img/DI_SetterInjection.png" style = "max-width:100%; height:auto;"><br/><br/>\
2. Constructor Injection : <br/>\
<img src = "./img/DI_ConsturctorInjection.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 124회 관리 1교시 6번\
',
 
// Overriding, Overloading
'# Overriding : 하위 클래스, 상위 클래스 메소드 재정의 <br/>\
- 개념 : 상속 관계에 있는 두 클래스 중, 하위 클래스에서 상위 클래스의 메소드를 재정의 하는 기법 <br/>\
- 특징 : 확장성, 유연성 <br/><br/>\
# Overlading : 동일 이름 메소드 <br/>\
- 개념 : 한 클래스 내에서 비슷한 일을 하는 메소드 같은 이름의 메소드로 여러개 정의하는 기법 <br/>\
- 항목 : 메소드 명, 파라미터, 자료형, 리턴타입 \
',

// Demeter's Law
'# 정의 : 최소지식 원리 <br/>\
- 오브젝트간 협력 설계시, 오브젝트가 주변 오브젝트에 대해 제한된 정보를 가지는 최소지식의 원리 <br/><br/>\
# 특징 <br/>\
- 미준수시 message chain 발생 <br/>\
- 최소 지식 원칙 <br/><br/>\
# 규칙 <br/>\
1. 객체 자신의 메소드 <br/>\
2. 매소드의 매개변수로 넘어온 인자의 메소드 <br/>\
3. 메소드 내부에서 생성된 객체의 메소드 <br/>\
4. 메소드가 포함하고 있는 객체의 메소드 <br/>\
5. 메소드의 스코프안에서 객체가 접근 가능한 전역변수 \
',

// CBD
'# 정의 : 소프트웨어 민첩성(생산성 확보)과 품질향상을 위한 방법론 <br/>\
- 기 개개발된 SW 컴포넌트를 조립, 새로운 시스템을 구축하는 방식으로 객체지향의 단점인 SW 재사용성을 극대화한 개발방법론 <br/><br/>\
# 특징 (생고재편기관사) <br/>\
- 생산성 : 시간 단축 <br/>\
- 고품질 : 품질 검증 컴포넌트 사용 <br/>\
- 재사용성과 대치성 : 실행기반의 재사용 <br/>\
- 변경 용이성 : 요구사항 변화 수용 안정적 <br/>\
- 기술 집약석 : 기술 숙련에 대한 집중 <br/>\
- 관리 용이성 : 독립적인 컴포넌트 단위의 관리로 복잡성 최소 <br/>\
- 사용자 중심 <br/><br/>\
<img src = "./img/CBD_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/AgileCBD.png" style = "max-width:100%; height:auto;">\
',
 
// RUP
'# 정의 : UML / 점진, 반복 / 프로세스 수행 <br/>\
- Rational Unified Process <br/>\
- 요구사항을 UML로 정의하여 점진/반복적으로 개발 프로세스를 수행하여 개발하는 방법론 <br/><br/>\
# 특징 : 아키텍처 기반, UseCase(4+1), 반복/점진적 <br/><br/>\
# 단계 : Inception(초기분석) > Elaboration(세부분석) > Construction(구축) > Transition(검증) <br/><br/>\
# 구성 : 작업자, 행위, 산출물, Workflow <br/><br/>\
# 핵심워크플로우 : 비즈니스모델링 > 요구사항 > 분석/설계 > 구현 > 테스트 > 배포 <br/><br/>\
# 지원워크플로우 : 형상/변경관리, 프로젝트관리, 환경 \
',

// Agile 방법론
'# 정의 : 사람 중심 효율적 시스템 개발 방법론 / 유연성 / 신속성<br/>\
- 절차보다는 사람이 중심이 되어 변화에 유연하고 신속하게 적응하면서 효율적으로 시스템을 개발할 수 있는 방법론<br/><br/>\
# Agile 개발 SW 선언 (<font color = "red">공계문계 개변동고</font>)<br/>\
<img src = "./img/Agile_1.png" style = "max-width:100%; hegiht:auto;">\
',

// XP
'# 정의 : 유연하고 신속한 개발 방법론 <br/>\
- eXtreme Programming <br/>\
- 의사소통과 TDD를 기반으로 짧은 개발 주기를 통해 소프트웨어를 생산하는 Agile 개발 프로세스의 대표적 개발 방법론 <br/><br/>\
# Overview <br/>\
<img src = "./img/XPOverview.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
# 핵심 가치 (<font color = "red">용단커피존</font>) <br/>\
- 용기(Courage) : 요구사항 능동대처 <br/>\
- 단순성(Simplicity) : 부가 기능 배제 <br/>\
- 의사소통(Communication) : 이해관계자 <br/>\
- 피드백(Feed Back) : 빠른 피드백, 일처리 <br/>\
- 존중(Respect) : 상호간 존중 <br/><br/>\
# 단계 (<font color = "red">유릴사스</font>)<br/>\
<img src = "./img/XP.png" style = "max-width:100%; hegiht:auto;"><br/>\
- User story : 요구사항 수집 <br/>\
- Release Planning : 전체 배포 계획 <br/>\
- Spike : 핵심 기능 프로토타입 <br/>\
- Acceptance Test : 고객 진척 확인 <br/>\
- Small Release : 짧은 사이클, 빠른 피드백 <br/><br/>\
# 원칙 <br/>\
- Baby Steps : 단계 세분화 분하 < 큰 변화 시도 했다가 실패해서 돌아갈때드는 비용 <br/>\
- Flow : 개발의 모든 단계 동시 진행, 가치 잇는 SW 물흐르듯 끊임 없이 제공 <br/>\
- Reflection : 실수에서 배움 <br/>\
- Improvement : SW 완벽해지기 위해 노력 <br/>\
- Mutual Benefits : 모든 활동은 관련된 사람에게 이익 되어야 함 <br/>\
- Failure : 성공하는데 어려움 겪는 다면 실패해라 <br/>\
- Redundancy : 핵심적이면서 해결하기 어려운 문제는 보험을 들어라 <br/><br/>\
# 실천방법 <br/>\
1. Fine-Scale Feedback <br/>\
- Pair-Programming : 2명 프로그래머 코딩, 리뷰 역할 바꿔가며 공동작업 <br/>\
- Planning Game : 게임처럼 선수, 규칙 목표 두고 기획 <br/>\
- TDD : 테스트부터 작성 및 수행 기반 코드 작성 <br/>\
- Whole Team : 요구사항 대한 즉각적 대답 위해 고객 참여 <br/><br/>\
2. Continuous Process<br/>\
- Continuous Integration : 상시 빌드 및 배포 가능 상태 유지 <br/>\
- Refactoring : 기능 변경없이 중복/복잡성 제거 <br/>\
- Small Release : 짧은 주기(1~2주)로 잦은 배포, 고객 변경사항 볼 수 있게 함 <br/><br/>\
3. Shared Understanding <br/>\
- Coding Standards : 소스 코드 작성 포맷, 규칙들 표준화 관계 따라 작성 <br/>\
- Collective Code Ownership : 시스템에 있는 코드는 프로그래머 누구든지 언제라도 수정 가능 <br/>\
- Simple Design : 가능한 간결한 디자인 유지 <br/>\
- System Metaphore : 최종적 개발 되어야 할 시스템 구조 기술 <br/><br/>\
4. Programmer Welfare <br/>\
- Sustainable pace : 일주일 40시간 작업금지, 2주 연속 오버타임 금지 <br/><br/>\
* 123회 응용 3교시 2번\
',

// Scrum
'# 정의 : 짧은 시간 관리 중심 <br/>\
- 매일 정해진 시간, 정해진 장소에서 짧은 시간 개발하는 팀을 위한 프로젝트 관리 중심의 Agile 방법론 <br/><br/>\
# 구성 <br/>\
- 기간 : 스프린트 <br/>\
- 미팅 : 일일스크럼, 스프린트 계획, 스프린트 리뷰 <br/>\
- 산출물 : 제품 백로그, 스프린트 백로그, 소멸차트 <br/><br/>\
# 도구 <br/>\
- 요구사항 수집 : Product Backlog, Planning Poker <br/>\
- 진척 관리 : Burn Down,Up chart, Kanban Board <br/>\
- 형상 관리 : Git, SVN <br/>\
- 빌드, 배포 : CI/CD, Jenkins <br/>\
* Jira(이슈추적), Redmine(도입) <br/><br/>\
# 기법 <br/>\
- Time Boxing : 동작하는 SW <br/>\
- Planning Poker : 개인과 상호작용 <br/>\
- JRP, JRD : 고객과 협력 <br/>\
- 지속 배포 : 변화에 대응 <br/><br/>\
# 팀 구성 <br/>\
- Product Master : Back Log 작성, 우선순위 관리, 요구사항 검증 <br/>\
- Scrum Master : Daily Meeting 주관, Agile 촉진자, 가이드 제시, 장애 관리 <br/>\
- Scrum Team : 제품 개발, User Story 관리, 개발 환경 구성 <br/><br/>\
# 프로세스 <br/>\
<img src = "./img/Scrum.png" style = "max-width:100%; height:auto;"><br/>\
- 요구정의 : 린스타트업, 디자인 싱킹 <br/>\
- 프로젝트 준비 : 제품 백로그 <br/>\
- 스프린트 수행 : 스프린트 계획 회의, 일일 스크럼, 스프린트, 스프린트 종료 데모, 스프린트 회고 <br/>\
- 프로젝트 종료 : 프로젝트 교훈 미팅 <br/>\
<img src = "./img/ScrumMeeting.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 123회 관리 1교시 1번\
',
  
// Product Backlog
'# 정의 : 소프트웨어 제품의 기능 목록 <br/>\
- 소프트웨어 제품의 모든 요구사항에 대한 우선 순위화된 목록으로서, 모든 변경 요구사항을 포함하는 개발해야 할 우선순위가 정의된 제품의 기능 목록 <br/><br/>\
# Keyword : 우선순위화, 요구사항, 기능목록, Sprint Backlog <br/><br/>\
# 특징 <br/>\
- 초기 제품의 요구사항 기능 목록 <br/>\
- 스프린트 백로그에 개발할 분량 할당 <br/><br/>\
* 116회 응용 1교시 9번\
',

// Burn down Chart
'# 정의 : Scrum의 Sprint 일정관리 도구 <br/>\
- Agile 프로젝트기반 조직에서 점수(Story Point)를 산정하여 Sprint 계획대비 현재 진행을 파악할 수 있는 차트 <br/><br/>\
# 구성요소 <br/>\
<img src = "./img/BurnDownChart.png" style = "max-width:100%; height:auto;"><br/>\
- x축 : 시간, 스프린트 반복 주기 <br/>\
- y축 : 완료된 작업의 추정 일수 (Story Point) <br/>\
- 계획 그래프 <br/>\
- 실제 그래프 <br/><br/>\
* 119회 관리 2교시 5번\
',

// SafeScrum
'# 정의 : IEC 61508 + scrum <br/>\
- SW 안전성 표준 IEC 61508과 Scrum 방법론을 접목한 Safety Critical SW Agile 개발 방법론 <br/><br/>\
# 구성요소 <br/>\
- SRC, 개발 Scrum, RAM 검증 \
',

// 회고
'# 정의 : 정기 개선 활동 <br/>\
- Retrospective <br/>\
- 프로젝트의 비효율적인 프로세스나 커뮤니케이션을 주기적으로 개선하기 위해 스프린트 종료 시점이나 월 1~2회 정기적 수행하는 활동 <br/><br/>\
# 구성 <br/>\
- 1~3 시간 <br/>\
- 팀원전체 & 제품책임자 <br/>\
- 오픈된 장소 <br/>\
- 스프린트 백로그/요약자료 <br/>\
- 회고항목 (만족/개선/반성) <br/><br/>\
# 절차 <br/>\
- 사전 준비 : 작업규칙 공유 <br/>\
- 자료 수집 : 브레인스토밍 <br/>\
- 실행항목 선정 : 점투표 <br/>\
- 실행목표 수립 : 구체적, 측정가능, 달성가능, 적절 <br/>\
- 회고종료 \
',

// CI
'# 정의 : 지속적 QC 적용 <br/>\
- Continuous Integration <br/>\
- 지속적으로 Quality Control을 적용하는 프로세스 실행 Practice <br/><br/>\
# 특징 <br/>\
- 초기 발견<br/>\
- 짧은 사이클 <br/>\
- 빈번한 적용,빌드,자동화 <br/><br/>\
# 기술요소 (버C빌P자)<br/>\
- 버전관리 저장소 : CVS, Subversion, GIT <br/>\
- CI 시스템 : Hudson, Jenkins <br/>\
- 빌드스크립트 : 스크립트, 배치파일 <br/>\
- PM Tool : 이메일, UC <br/>\
- 자동화 테스트 : SmartQube \
',

// CD(Continous Delivery)
'# 정의 : 진화된 CI <br/>\
- CI 보다 진보된 상태, 단위 시험 자동화 뿐만 아니라, 특정 환경하에서의 인수시험을 일부 자동화 \
',

// CD(Continous Deployment)
'# 정의 : 모든 인수 시험 자동화 <br/>\
- CD(Continous Delivery)에서 진보된 상태, 모든 인수시험이 자동화가 되는 수준 \
',

// 제품백로그
'# 정의 : SRS + WBS <br/>\
- 제품 개발에 필요한 모든 업무를 우선순위화한 목록 (요구사항정의서 + 작업분류체계 혼합 형태 )<br/><br/>\
# 특징 <br/>\
- 요구기능 중심 기술 <br/>\
- 세부 작업 미포함 ( 스프린트 계획에서 도출 -> 변경 용이성 도출 목적) <br/><br/>\
# 작성 지침 <br/>\
- 스토리간 상호 독립적 <br/>\
- 변경 가능 <br/>\
- 사용자와 고객에 가치 부여 <br/>\
- 추정가능 <br/>\
- 크기 적절(1~2주) <br/>\
- 테스트 가능 수준 <br/><br/>\
# 작성 예시 (인터넷 서점 시스템 개발) <br/>\
* 사례 1 <br/>\
- 업무구분 : 인터넷 서점 V1.0 <br/>\
- 상위기능(에픽) : 사용자 로그인 <br/>\
- 스토리 : 사용자는 회원 ID와 비밀번호를 입력하여 로그인 할 수 있다 <br/>\
- 스토리 점수 : 1 <br/>\
- 완료조건 : 회원 ID와 비밀번호가 불일치 할 때는 메시지를 표시하여 다시 입력하게 한다 <br/><br/>\
* 사례 2 <br/>\
- 업무구분 : 비기능 <br/>\
- 상위기능(에픽)/스토리 : 시스템은 정기 점검을 제외한 24일 365일 가동해야 한다 \
',

// 사용자스토리
'# 정의 : 기능 요구사항 기술할 때 사용하는 방식 <br/>\
- User Story <br/>\
- 제품 백로그에서 기능 요구사항을 기술할 때 사용하는 방식으로 고객과 사용자에게 가치를 줄 수 있는 기능을 서술한 소프트웨어 기능 혹은 사용자의 요구사항 <br/><br/>\
# 특징 <br/>\
- 일반적으로 한 두문장으로 짧게 표현 <br/>\
- 스토리 카드 간략히 적어, 의사소통 <br/>\
- 고객 직접 작성 원칙 <br/><br/>\
# 구성요소 <br/>\
- 카드 : 포스트잇 등, 스토리추정/계획 활용 <br/>\
- 대화 : 고개과 대화, 스토리 내용 구체화 <br/>\
- 확인 : 완료조건, 스토리 완료 확인 <br/><br/>\
# 작성원칙 <br/>\
- 독립성 : 스토리간의 의존성 배제 <br/>\
- 간결성 : 간결 작성, 세부 내용은 고객과 대화를 통해 구현여부 협상 <br/>\
- 추정성 : 개발자들은 각 스토리의 크기 혹은 소요시간 추정 가능해야 함 <br/>\
- 소단위 : 한 두명의 개발자가 0.5일 이내 구현, 테스트 가능한 크기 적당 <br/>\
- 검증성 : 모든 사용자 스토리는 테스트 가능하도록 작성되어야 함 <br/><br/>\
# 작성 예시 <br/>\
- 교육생은 수강신청을 위해 신청, 취소, 리스트보기를 할 수 있다 \
',

// 기술 스토리 
'# 정의 : 기술적, 관리적 업무 서술 <br/>\
- Techincal Story <br/>\
- 사용자 스토리를 지원하는 기술적, 관리적 업무를 서술할 때 사용하는 제품 백로그 항목중 하나 <br/><br/>\
# 특징 <br/>\
- 형식 없음 <br/>\
- 고객 이해할 수 있는 수준으로 작성 <br/>\
- 개발팀 중심 도출 (사용자 스토리는 고객과 책임자 중심 도출) <br/>\
- 비용 추정 기준 <br/><br/>\
# 포함활동 <br/>\
- 요구분석과 아키텍처, 도구 셋업등 기술적인 활동 <br/>\
- 비기능 요구사항과 인프라 시스템 개선 활동 <br/>\
- 코드리뷰, 리팩토링, 인스팩션 등 품질 개선활동 <br/>\
- 버그수정, 모듈 안정화\
',

// [Agile 방법론]- 스토리 포인트 
'# 정의 : 상대적 단위 / 작업 규모 표현 <br/>\
- 사용자 스토리나 기능 또는 어떤 작업의 규모를 표현하기 위해 사용되는 상대적인 단위 -> 사용자 스토리별 우선순위와 개발시간 산정기준 <br/><br/>\
# 특징 : 시간단위와는 대비되는 개념, 요구사항을 완성하기 위해 사용되는 기간과 달리 요구사항의 복잡도 혹은 크기를 상대적인 측정 단위로 사용 <br/><br/>\
# 추정기법 : 유사추정, 전문가추정, 플래닝포커, 삼각측량 <br/><br/>\
# 요구사항 우선순위 선정기법 <br/>\
- MosCow 방법 : 4가지 기준 분류-필수(must have) <br/>\
- 종료(Should have) <br/>\
- 선택(Could have) <br/>\
- 보류(Won\'t have this item) <br/>\
- 가치점수 : 요구기능간 상대적 가치 평가 활용, 가치점수와 스토리 점수 함께 고려 <br/><br/>\
<img src = "./img/StoryPoint_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/StoryPoint_2.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 스토리 점수 기준 작성 필요 : 최소 점수 산정후 비율적 적용 <br/>\
* 조직, 기업마다 상이 <br/>\
* 운영업무 고려 필요 \
',

// Pair Programming 
'# 정의 : 두사람이 한 컴퓨터 사용 <br/>\
- 두 사람이 한 컴퓨터를 사용해서 Pair work 로 프로그래밍을 하는 것으로 Extream Programming(XP)에서 표방하는 프로그래밍 방법 중 한 가지 <br/><br/>\
# 구성 <br/>\
- Driver : Coder <br/>\
- Partner : Supporter \
',

// Lean 방법론
'# 정의 : 낭비 줄이는 개발 방법론 / 빠른 프로토타입 제작 / 신속한 고객 피드백 / CI / 신속 회피 <br/>\
- 빠른 프로토타입 제작과, 신속한 고객 피드백 및 CI를 통해 시장에 대한 잘못된 가정을 신속히 검증 및 회피하여 낭비를 줄이는 개발방법론 <br/><br/>\
# 암기 <br/>\
# 낭비 (<font color = "red">운과대재과결움기</font>)<br/>\
- 운반, 과잉생산, 대기, 재고, 과잉처리, 결합, 움직임, 기술<br/><br/>\
# 원칙(<font color = "red">낭배늦팀빠통전</font>) <br/>\
- 낭비의 재고 : 낭비 찾기, 가치 흐름도<br/>\
- 배움 증폭 : 피드백, 반복 동기화, 집합기반 개발<br/>\
- 늦은 결정 : 대안적 사고, 마지막 순간, 의사결정<br/>\
- 팀에 권한 위임 : 자기결정권, 동기부여, 리더십, 전문지식<br/>\
- 빠른 납품 : 당김 시스템, 대기 행렬이론, 지연비용<br/>\
- 통합성 구축 : 인식 통합성, 개념 통합성, 리펙토링 테스트<br/>\
- 전체를 볼것 : 측정, 계약<br/><br/>\
* 22가지 도구\
',

// Lean UX
'# 정의 : 핵심가치, 핵심지표 조정 과정 <br/>\
- 핵심가치를 만들고 그에 기반한 가설, 검증을 빠르게 진행한 뒤 핵심지표를 보며 계속 조정해가는 과정 <br/><br/>\
# 원칙 <br/>\
- 디자인 사고, 애자일 개발, 린 스타트업 <br/><br/>\
# 적용 프로세스 <br/>\
- Proto-Personas : 팀원들, 가정에 의해 페르소나 만듦 <br/>\
- 디자인 협업 : 디자인 사고 적용 <br/>\
- MVP : 최소기능 사용 <br/>\
- 가설검증 <br/>\
- Feed Back <br/><br/>\
# 도구 : Google Docs, Jira, GitHub \
',

// Kanban 방법론
'# 정의 : 칸반보드 / WIP 제한 / Lean / 개발 방법론  <br/>\
- 칸반보드를 통해 개발공정을 시각화하고 WIP 제한을 이용해 Workflow 상의 공정을 관리하고 최적화하는 Lean 생산 방식 기반의 개발 방법론 <br/><br/>\
# 암기 <br/>\
- 규칙(3) : 워W플 <br/><br/>\
# 개념도 (백택개배서)<br/>\
<img src = "./img/KanbanboardImg.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 구성요소 <br/>\
- KanbanBoard : 프로세스를 기재한 Baord, Story card 이용해 업무 흐름제어 <br/>\
- Process : 실제 업무 이루어지는 단계 및 업무 수행 통한 산출물 작성 <br/>\
- Work Queue : 대기행렬, 개발 대기, 테스트 대기, 배포/릴리즈 대기 과정 <br/>\
- 총 주기 시간 : 총 작업의 수행시간. 개별 업무의 Cycle Time 합으로 구성 <br/><br/>\
# 규칙(3) <br/>\
- 워크플로 가시화 : 일을 잘게 분할->backlog <br/>\
- WP 제한 : 동시진행 가능 항목제한 <br/>\
- 플로우의 측정 및 최적화 : 완료 평균시간, Cycle Time <br/><br/>\
<font color = "red">* 매우 적은 규칙을 갖고 있는 방법이기에 다른 방법론 특히 스크럼과 함께사용 : TDD, CI도 함께 사용</font>\
',
 
// Daily Build
'# 정의 : 매일 마감 / 컴파일, 링크 <br/>\
- 매일 변경이 마감된 시스템을 컴파일하고 링크하는 개발활동 <br/><br/>\
# 특징 : CI의 작은 의미 \
',
 
// Planning Poker
'# 정의 : User Story 추정 게임 <br/>\
- 사용자의 스토리의 규모를 추정(팀원 전체가 같이 수행하는 실천적 방법) <br/><br/>\
# 절차 : 결정 > 업무 이해 > 채점 > 추가 설명 > 최대/최소 이해 > 게임 반복 > 최종 결정 > 분할검토 > 마무리 \
',
 
// MetaPhore
'# 정의 : 효과적 정보 교류 위한 / 방식 장치 전략 수단 <br/>\
- 시스템과 사용자간의 자연스럽고 효과적인 정보 교류를 제공하기 위한 방식, 장치, 전략, 수단 <br/><br/>\
# 주요요소 <br/>\
- 공통비전, 공유어휘, 해결책, 인터페이스 <br/><br/>\
# 목적 <br/>\
- 커뮤니케이션, 개발사상 전달, 시스템 작동에 대한 스토리 \
',

// 방법론 테일러링
'# 정의 : 기 개발 산출물 최적화 활동 <br/>\
- 프로젝트의 특성에 따라 각 산출물의 적용여부 및 변경여부를 체크하고 변경시에는 사유와 변경 문서명을 기재하는 작업 <br/><br/>\
# 필요성 <br/>\
- 방대한 표준방법론 <br/>\
- 프로젝트 다양성 <br/>\
- 선리스크 제거 <br/>\
- 최적 기술 도입 <br/><br/>\
# 테일러링 기준 <br/>\
- 사업적 특성 : 업무, 재무적 특성 <br/>\
- 프로젝트 특성 : 일정 <br/>\
- 기술적 특성 : 개발언어, 플랫폼, 기술 <br/><br/>\
# 고려사항 <br/>\
1. 환경<br/>\
- 외부 환경 : 법,제도 <br/>\
- 프로젝트 규모/복잡도 <br/>\
- 기존 시스템 이해 <br/><br/>\
2. 수행 <br/>\
- 참여인력, 기술, 개발환경, 방법론 교육 \
',

// MOM, MOA
'# 정의 : Message Queing 기술 이용 비동기 통신 지원 아키텍처 <br/>\
- Message Oriented Middleware(Architecture) <br/>\
- Message Queuing 기술을 이용하여 상이한 어플리케이션간 통신을 비동기식으로 지원하는 메시지 기반 미들웨어 (아키텍처) <br/><br/>\
# 특징 <br/>\
- 비동기식/ 비연결형 메시징 지원 <br/>\
- 큐잉 기술 기반 통신<br/>\
- 느슨한 커플링에 따라 C/S와 객체지향 컴퓨팅 확장 \
',

// EIP
'# 정의 : 메시지 기반 아키텍처 방법론 / 기업 애플리케이션 통합 / Loosely Coupled <br/>\
- Loosely coupled 방식으로 메시지 기반(MOA : Message Oriented Architecture)의 기업 애플리케이션 통합을 정의하는 아키텍처 방법론 <br/>\
- 기업의 분산 컴퓨팅 환경에서 시스템 간 통신, 애플리케이션 통합을 위한 새로운 아키텍처 방법론<br/><br/>\
<img src = "./img/EIP.png" style = "max-width:100%; height:auto;">\
',

// TDD
'# 정의 : Simple Code 추구 목적 Agile 개발 방법론 <br/>\
- Simple code의 추구를 목적으로 Testcase를 먼저 개발하고 Testcase를 통과하는 실제코드를 나중에 개발하는 Agile 개발 방법<br/><br/>\
# 절차 <br/>\
<img src = "./img/TDD.png" style = "max-width:100%; hegiht:auto;"><br/><br/>\
# 패턴 <br/>\
- 빨간 막대 패턴 : 언제,어디에 작성, 언제 멈출 것인지 결정, 실패하는 작은 테스트 작성 <br/>\
- 초록 막대 패턴 : 테스트에 통과할 만한 작은 코드 작성 <br/>\
- 테스팅 패턴 : 상세한 테스트 작성(자식/모의 객체/Self-Shut/메시지 호출) <br/>\
- xUnit 패턴 : 자동화된 단위 테스트 지원 프레임워크 <br/>\
- 디자인 패턴 : 유사 도메인에서 발생하는 문제 해결 위한 Best Practice 모음 <br/><br/>\
* KPC 92회 관리 4교시 2번\
',

// ATDD
'# 정의 : TDD테스트 확장 개발 방법론 <br/>\
- Acceptance Test Driven Development <br/>\
- 소스 품질을 점검하는 TDD에서의 테스트를 더 확장하여 <font color = "red">전체 시스템 관점</font>에서의 품질을 검증하는 애자일 개발 방법론 <br/><br/>\
# 프로세스 <br/>\
- 사용자 스토리 작성 <br/>\
- 인수(시스템) Testcase <br/>\
- 시스템 구현 <br/>\
- 테스트 수행 \
',

// BDD
'# 정의 : TDD + DDD / SW 개발 방법 <br/>\
- TDD에 DDD(Domain Driven Design)의 스타일(유비쿼터스 언어, 임베디드 도메인 전용 언어 등)을 적용하여 탄생한 SW개발 방법 <br/>\
- 사용자의 스토리로부터 요구사항을 식별, 충족시키는 <font color = "red">Outside-in TDD</font>라고도 함 <br/><br/>\
# Keyword : Outside-in, DDD, 유비쿼터스 언어, User Story, 시나리오 <br/><br/>\
# 프로세스 <br/>\
1. 행위 표현 스토리 작성 <br/>\
2. 실패하는 스토리 실행 <br/>\
3. 첫번째 단계 정의 <br/>\
4. 테스트 성공하도록 어플리케이션 코드 작성 <br/>\
5. 시나리오 통과할 때까지 4,5 과정 반복하여 리팩토링 <br/>\
6. 시나리오 통과 <br/>\
7. Application 리펙토링 <br/><br/>\
# BDD 테스트 행위 명세법 <br/>\
<img src = "./img/BDD_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/BDD_2.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 유비쿼터스랭귀지와 MDD가 DDD 구현위한 핵심 기술임 <br/><br/>\
<img src = "./img/BDD_3.png" style = "max-width:100%; height:auto;">\
',

// DDD
'# 정의 : 도메인 초점 / 모델 / 설계 개발 방법론 <br/>\
- 도메인에 초점을 맞추어 도메인을 잘 표현한 모델을 만들고 모델이 최종 SW 개발에 까지 기여하도록 하는 설계(개발) 방법론 <br/><br/>\
# 주요구성 (<font color = "red">매서공유씨</font>)<br/>\
- Main Model : 구축하고자 하는 도메인의 요구사항을 유비쿼터스 언어를 통해 일관성있게 표현 <br/>\
- Sub Model : 독립적인 업무단위, 프로젝트 팀 단위 로 메인 모델을 구체화하기 위해 분할 <br/>\
- 공유커널 : 도메인 중심의 공유 업무, 횡단 관심사의 공통로직 등을 별도의 공유 커널로 분리 <br/>\
- 유비쿼터스 언어 : Usecase, BPM등의 도메인에 대해 통일된 언어로 의사소통할 수 있는 언어 체계 <br/>\
- CI : 지속적 통합, 공유커널의 변경시 발생할 수 있는 의존성 문제를 파악 및 대응하기 위한 지속적 통합 <br/><br/>\
# 기본 구성요소 (<font color = "red">EVARS</font>)<br/>\
- Entity : 고유 식별값 / Employee <br/>\
- Value Object : 데이터 표현(고유x) / Address<br/>\
- Aggregate : 관련 객체 묶음 / 주문-고객-상품<br/>\
- Repositiory : Entity 보관 장소 / 리포트 집계<br/>\
- Service : 별도 분리 / 계좌이체\
',

// AOSE
'# 정의 : 캡슐화된 모델링/개발 방법론 <br/>\
- Agent-Oriented Software Engineering <br/>\
- 특정환경 상황에서 유연하고, 자율적인 조치를 취할 수 있는 설계를 목표로 캡슐화된 컴퓨터 시스템 개발 위한 모델링/개발 방법론 <br/><br/>\
# 특징 <br/>\
- 캡슐화, 목적적응, 반응, 자체판단, 선행성, 상호작용, 영속성 <br/><br/>\
# 방법론 유형 <br/>\
- Gaia : Agent 조직 역할, 상호작용 <br/>\
- Prometheus : 단일 Agent 상세한 정의 <br/>\
- Tropos : 조기 요구분석 중심 \
',

// 68
'# 정의 : 프로그래밍 기법 / 객체지향 보완 / 공통관심사 횡단 관심 분리 / 코드 삽입 <br/>\
- 객체지향기법을 보완하여 공통관심사를 횡단관심으로 분리하여 코드에 삽입하는 프로그래밍 기법<br/><br/>\
# 암기 <br/>\
- 구성(5) : JPAAW <br/><br/>\
# 구성요소 <br/>\
- Join Point : 횡단관심이 삽입될 위치 <br/>\
- Point Cut : 클래스의 어느 Joint Point를 사용할 것인지 선택기능 <br/>\
- Weaving : Join Point에 해당하는 Advice를 삽입하는 과정 <br/>\
- Advice : Joint Point에 삽입되어 동작하는 모듈(Before, After Returning, After Throwing, Around Advise) <br/>\
- Aspect : Product과 Advice를 합쳐놓은 코드 <br/><br/>\
# 프로그램 : Code + Aspect (PointCut + Advise) <br/><br/>\
# 절차 <br/>\
- Primary Concern 코드 작성 <br/>\
- Cross Cutting 코드 작성 <br/>\
- Point Cut 정보이용 Weaving <br/>\
- Point Cut<br/><br/>\
<img src = "./img/AOP.png" style = "max-width:100%; height:auto;">\
',

// SSPL
'# 정의 : 가변 요소 집중 개발 SW 공학 방법론 <br/>\
- System & Software Product Line <br/>\
- SW와 HW 생산성 제고를 위해 단일 제품군 내에서 아키텍처나 컴포넌트, 문서 등 핵심 자산은 재사용하고, 가변요소만 선택적으로 집중 개발해 이를 조립하는 SW공학 방법론 <br/><br/>\
# 특징 <br/>\
- 재사용성 <br/>\
- 아키텍처 기반 <br/>\
- 리엔지니어링 <br/>\
- 포괄적 개발방법론 : 플랫폼 + 프로세스 + SW + 시스템 <br/>\
- 대량고객 맞춤화 <br/>\
- 요구사항 공통성 <br/>\
- 요구사항 가변성 <br/><br/>\
# 구성요소 <br/>\
- 도메인 공학 : 아키텍처 설계, 컴포넌트 생성 <br/>\
- 애플리케이션 공학 <br/>\
- 관리활동 : Core Asset 개발과 Product 개발의 연동/조율 <br/>\
- 기술관리 : 형상,프로세스 <br/>\
- 조직관리 : 구성, 자원 할당 <br/><br/>\
# 4대 핵심요소 : 대량고객맞춤화, 역량 플랫폼, 프로세스, SW와 시스템 통합 <br/><br/>\
# 제품 개량 활동(5개영역) <br/>\
- 제품군 정의 <br/>\
- 제품군 플랫폼 개발 : 도메인 아키스타일, 가변성 모델링, 도메인 V&V, 도메인아키 trade-off평가) <br/>\
- 제품군 멤버 제품 개발 <br/>\
- 재사용 자산 베이스 구축품 개량 <br/><br/>\
# SSPL 방법론 <br/>\
1. Proactive <br/>\
- FORM : SW제품라인 위한 초기 마케팅 및 제품 계획 단계부터 정해진 의사결정을 바탕으로 Feature 모델 구성, 선행적 방식 개발 적합 기법 <br/>\
2. Reactive <br/>\
AHEAD(Algebraic Hierarchical Equation for Application Design) : 반복적 Feature 정렬(Refinement)통해 SW제품라인 점차 확대반응식 (Reactive) 방식 <br/>\
GP(Generative Programming) : 상세한 Feature 모델 바탕으로 프로그램 코드 생성시키는 방식 <br/>\
3. Extractive <br/>\
- PulSE(Productline Software Engineering) : 재공학 통해 기존 제품들로 부터 SW 제품라인 구성하는 추출 방식 적용 용이 <br/><br/>\
# SSPL Framework <br/>\
<img src = "./img/SSPL_Framework.png" style = "max-width: 100%; height: auto;"><br/><br/>\
',

// Feature
'# 정의 : 시스템 행위 논리적 단위 <br/>\
- 제품군 혹은 제품에 대한 일련의 기능 및 품질 요구사항에 근거하여 명문화 된 시스템 행위의 논리적 단위 \
',
 
// Product Line 방법론
'# 개념 : 도메인 공학, 어플리케이션 공학, 다수 제품 맞춤 개발, CBD 한계 극복, Core Asset <br/>\
- 제품/서비스 군 별로 SW 핵심자산(Core Asset)을 개발하고 이를 관리/조직적인 재사용을 통해 경제적인 S/W 제품을 생산하여 S/W Reusability 와 Productivity를 극대화하기 위한 개발 방법론 <br/><br/>\
# 필요성 : 품질개선(52%), 비용절감(45%), 생산성 향상(39%), 제품출시기간(30%) 경쟁력 확보 (Carmegi Mellon Univ. SPL 기술보고서) <br/><br/>\
# 구성요소 <br/>\
1. Engineering 측면 <br/>\
- Domain Engineering : 단일 제품군 내의 핵심 자산 식별하여 개발 / Core Asset 도출, 식별 <br/>\
- Application Engineering : Core Asset 재사용하고 가변요소 선택적으로 집중 개발 / 회귀 테스트 <br/>\
- Management : Repository 저장, 프로세스 관리, 진행상태 통제 / 형상, 품질관리, V&V <br/><br/>\
2. Core Asset 측면 <br/>\
- 실행 : 컴포넌트, 소스 코드 실행가능한 Core Asset 형태 자산 / CBD, TDD <br/>\
- 지식 : 아키텍처, 실행결과, 디자인 패턴등 형식지 형태 자산 : UML Diagram, Profile <br/>\
- 도메인 : Domain Specific 형태 요구사항, 비즈니스 모델 형태 자산 / MDA, MDD <br/><br/>\
# 개발방식 선택 <br/>\
- 선행적 : Core Asset 먼저 개발 후 제품 개발 / 새로운 제품 개발시 코드 개발 최소화<br/>\
- 반응적 : 하나 또는 여러개 제품에서 Core Asset 도출 / 처음 적용시 효과<br/>\
- 추출식 : 선제적 방식 대비 적용비용 필요 / 기존 개발 시스템 3R 기법 추출<br/>\
- 점진적 : 선행적 방식과 반응적 방식 혼용 / 초기 Core Asset 기반 추가하는 반복적 방식 <br/><br/>\
* 라이지움 88회 3교시 4번\
',
 
// FORM
'# 정의 : Feature Model 기반의 SPL 구현 방법론 <br/>\
- 특정 마켓/도메인 부합 Core Asset을 구축, Core Asset의 조립에 의해 Product 생산하는 기법 <br/><br/>\
# 구성요소 <br/>\
- 도메인 공학 <br/>\
- 어플리케이션 공학 <br/>\
- 관리 활동(형상관리, 프로세스 개선, 기술적 코칭) <br/>\
- Core Asset <br/>\
- Product Development <br/>\
- Management <br/>\
- Repository 저장 \
',
 
// 도메인 공학
'# 정의 : 도메인 모델의 공통성과 가변성을 분석하여 재사용 가능한 요구사항, 아키텍처, 컴포넌트, 테스트 케이스 개발 <br/><br/>\
# Application 공학 <br/>\
- 도메인 공학의 핵심 자산을 바탕으로 특정 프로덕트 개발하는 활동 <br/>\
- 동일한 기능의 산출물을 재사용, 신규 기능의 산출물을 프로덕트에 포함시켜 어플리케이션 개발 <br/><br/>\
# Process : 정의 > 모델 > 디자인 > 구현 <br/><br/>\
# 도메인 공학 : 추출 > 분석 > 명세 >검증 \
',

// MDA
'# 정의 : 모델기반의 SW 개발 아키텍처 <br/>\
- Model Driven Architecture <br/>\
- 모든 컴포넌트 기술 요소의 표준 메타모델을 정의하고 이를 기반으로 각 구성요소를 정의함으로써 호환성 및 시스템간 자동성을 보장하고자 하는 소프트웨어 개발 아키텍처 <br/><br/>\
# 등장배경 <br/>\
- 다양한 미들웨어 플랫폼 <br/>\
- 다양한 컴포넌트 아키텍처의 등장 <br/>\
- 개발 패러다임의 변화 <br/>\
- CORBRA의 복잡성 : 개방형 객체표준, 무겁고 복잡한 표준규격, 외면 <br/><br/>\
# 개념도 <br/>\
<img src = "./img/MDA_Overview.png" style = "max-width: 100%; height: auto;">\
',

// MDD
'# 정의 : 소스코드 자동생성 개발 방식  <br/>\
- 프로그래밍 언어로 직접코딩하는 방식이 아닌 SW 설계모델을 통해 소스코드를 자동생성하는 개발방식<br/><br/>\
# Keyword : 메타모델, CIM, PIM, PSM, 도메인 전문가, MDD 도구 개발자, 프레임워크 담당자 <br/>\
* PIM : Platform Independent Model <br/>\
* PSM : Platform Specefic Model <br/><br/>\
# 개념도 <br/>\
<img src = "./img/MDD_Concept.png" style = "max-width: 100%; height: auto;"><br/><br/>\
# 개발 참여자 <br/>\
1. 일반 프로젝트 <br/>\
- 도메인 전문가 : DLS 정의, 기본설계 수행 <br/>\
- MDD 도구 개발자 : 모델, 소스코드 변환 <br/>\
- 프레임워크 담당자 : 하위 시스템 호환 위한 MDD 도구 수정 및 교육 <br/><br/>\
2. 대형 프로젝트 <br/>\
- Modeler : SI 프로젝트 수행에 필요한 모델 생성 <br/><br/>\
* 119회 응용 3교시 6번\
',

// ASD
'# 정의 : 코드자동생성 + 유연성, 호환성 중심 방법론 <br/>\
- Automated Software Development <br/>\
- MDD의 비즈니스 기반의 코드자동생성의 장점과 모델의 유연성 및 호환성을 중심으로 한 SW 개발 방법론 \
',

// EDA
'# 정의 : 외부 감지 대응 가능한 IT 구조 / 비즈니스<br/>\
- Application을 통해 이벤트 발생, 응답하는 형태의 이벤트 처리 능력과 프로세스 이벤트를 가진 아키텍처<br/>\
- 비즈니스 상에서 발생하는 이벤트와 비즈니스에 영향을 줄 수 있는 외부 이벤트의 감지와 대응이 가능한 IT구조 (시스템 아키텍처) <br/><br/>\
# 암기 <br/>\
- 특징 : 디N트비 <br/>\
- 구성요소(3) : 메프 구관 통외 <br/>\
- 절차(5) : 이수엔의R <br/><br/>\
# 특징 <br/>\
- Decouple 인터렉션 <br/>\
- N:N 통신 <br/>\
- 이벤트기반 트리거 <br/>\
- 비동기식 <br/>\
[참고] SOA는 loosely coupled, 1:1연결, 순차적프로세스 , 동기식 <br/><br/>\
# 구성 <br/>\
- 이벤트 메타데이터 : 규격, Rule, 이벤트소스, 수신자, 처리자 <br/>\
- 이벤트 프로세싱 : SEP, ESP, CEP <br/>\
- 이벤트 도구 <br/>\
- 이벤트 관리 도구 : 모니터링, 대시보드 <br/>\
- 엔터프라이즈 통합 : by Enterprise Integration Backbone <br/>\
- 통합할 외부 자원 : 외부서비스 <br/><br/>\
# 절차 : 이벤트 -> 이벤트 수집 -> EDA 엔진 복합이벤트 -> 의사결청체계 -> RTE <br/><br/>\
# 처리기법 <br/>\
- SEP(Simple Event Processing) : 실시간 작업 흐름 / BRE, Alert <br/>\
- ESP(Event Stream Processing) : 실시간 정보 흐름 / BAM <br/>\
- CEP(Complex Event Processing) : 이벤트 통한 추론 / 주식 등락 통해 투자 시기 추론 = ESP(Event Stream Processing) + 패턴 감지 기능\
',

// DevOps
'# 정의 : 개발 + 운영 문화, 방법론 <br/>\
- 개발과 운영이 분리되면서 오는 문제점(사후관리, 서비스등)을 해결하기 위해서, 개발과 운영을 하나의 조직으로 합쳐서 팀을 운영하는 문화이자 방법론 <br/><br/>\
# 프로세스 <br/>\
<img src = "./img/DevOpsPipeLine.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 구성요소 <br/>\
1. 품질 <br/>\
- 품질기준 : 시나리오기반 품질 속성 기술 <br/>\
- 테스트 자동화 : XUnit, 단위 테스트 자동화 <br/><br/>\
2. 프로세스 <br/>\
- 사이클 타임 축소 : 기증의 흐름 지속적 향상 <br/>\
- 완료시점 범위확장 : 완료시점 = 운영서버 정상동작 시점 <br/>\
- 지속적 출시 : 지속적 통합처럼 운영서버 반영시 자동화 <br/>\
- 릴리즈와 배포 분리 : 추상화된 브랜치, 기능토글(설정), 다크런칭(소스 사용자 배포), 블루그린(운영환경 신,구 분류) <br/><br/>\
3. 도구 <br/>\
- 소스 컨트롤 자동화 : Subversion, Github, GitLab, BitBucket <br/>\
- 빌드/테스트 자동화 : Maven, Selenium, SoapUI, Find Bugs <br/>\
- 배포 자동화 : JFrog Artifactory, docker <br/>\
- 배포/운영 : Puppet, Chef, Ansible <br/><br/>\
* 125회 관리 1교시 7번 <br/>\
* ITPE 7회 관리 4교시 5번\
',
 
// DataOps
'# 정의 : 데이터 생성자와 데이터 소비자를 연결하는 능력 <br/>\
- 기업내 논의를 통해 데이터 유형을 분류하고 다양한 데이터 세트에 목적을 달성하는 과정 <br/><br/>\
# 5가지 과제 <br/>\
- 가용 : 수집된 데이터 사용 가능하게 만들기 <br/>\
- 관리 : 데이터 스토리지 관리 <br/>\
- 검토 : 필요한 데이터 수집됐는지 확인 <br/>\
- 보안 : 데이터 보안 보장 <br/>\
- 극복 : 사용가능한 데이터 사일로 만들기 <br/><br/>\
* Silo : 각부서, 사업단위나 브랜치별로 데이터가 일치하지 않는 증상 \
',
 
// GitOps
'# 정의 : Weaveworks라는 회사에서 처음 쓰기 시작한, CI/CD 파이프라인 중 특별히 Delivery에 초점을 가지고 탄생한 개념 <br/>\
- 쿠버네티스 클러스터 관리, 어플리케이션 배포하는 방법론 중 하나 <br/>\
- 어플리케이션 소스 뿐만 아니라 배포 설정까지 깃 저장소를 통해 관리 <br/><br/>\
# 특징 <br/>\
- 단일 배포 : 체계적 관리, 자동화 <br/>\
- 완벽 배포 : 원천 상태 반영 <br/>\
- 신속 배포 : 배포, 피드백, 롤포워드, 롤백 <br/>\
- 쉬운 복구 : 트랜잭션 로그 스냅샷 <br/><br/>\
# 구현 방법 <br/>\
- Push : 코드 업데이트 트리거 / 모니터링 필요 <br/>\
- Pull : 지속적 비교(Operator : flux, argocd) <br/><br/>\
# IaC(Infra as Code)와 비교 <br/>\
<img src = "./img/IaCGitOPS.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 87회 라이지움 관리 1교시 2번\
',
 
// MLOps
'# 정의 : Meachine Laerning + DevOps <br/>\
- 데이터 과학 및 기계 학습의 솔루션 개발과 DevOps 기반의 전주기 운영통합 문화 기술 인프라 개념 결합 <br/><br/>\
# 특징 (<font color = "red">오기예수</font>)<br/>\
- ML 프로젝트 오해 : ML 프로젝트에서 모델링(Coding)은 비율상 작은 범위 <br/>\
- 기술 부채 발생 : 모델 개발 과도 집중 <br/>\
- 예측 불가능성 : 학습, 생산데이터 일치성 예측 불가 <br/>\
- 수정 불가능성 : ML 수행 도중 수정 불가능 <br/><br/>\
# MLOps 활용한 DSML 프로젝트 실행단계 <br/>\
<img src = "./img/MLOpsDSML.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 제언 <br/>\
1. ML 측면 <br/>\
- 학습보단 생산 데이터 중점 <br/>\
- 드리프트(시간 변화), 발생시 파이프라인 과정이 아닌 전체 수정 필요 <br/><br/>\
2. DevOps 측면 <br/>\
- 데이터 Silo 해체 <br/>\
- 협업, 소통 중시문화 \
',

// DevSecOps
'# 정의 : 보안 주기 포함 / 개발 방법론 <br/>\
- Development와 Operation의 융합과 협업을 통한 개발 주기에서 보안 측면의 주기를 포함하는 개발 방법론 <br/><br/>\
# 적용 기술 <br/>\
1. Cycle별 보안 기법 <br/>\
- 테스트 : IAST(정적+동적), Fuzzing, Pen Testing <br/>\
- 분석 : FMEA <br/>\
- 컨테이너 : RASP(Exploit 대응) <br/><br/>\
2. 도구 <br/>\
- Code : 형상관리, 코드 추적성, 단일 버전 유지 도구 <br/>\
- Build : 자동화된 코드 빌드 도구 <br/>\
- Test : 동적, 정적 커버리지 자동화 테스트 도구 <br/>\
- Release : 변경관리, 변경승인, 릴리즈 계획, 릴리즈 자동화 <br/><br/>\
3. 보안 기능 <br/>\
- Security Engineering : 보안 공학적 접근법, 자동화 도구 <br/>\
- Security Operations : 보안성 호가보 위한 지속적 Monitoring, Detecting <br/>\
- Security Science : 보안 모델 수립, 학습, 전파, 예측성 제공 <br/><br/>\
# CARTA 접근법 <br/>\
<img src = "./img/CARTA.png" style = "max-width:100%; height:auto;"><br/><br/>\
- Continous : 지속적 보안, 위험관리 핵심 <br/>\
- Adaptive : 컨텍스트 기반 대처 가능 지속 학습, 모니터링 관리 중점 <br/>\
- Risk : 위험은 일련의 이벤트 조합에 의해 결정 <br/>\
- Trust : 사용자 경험 영항 x, 지속적인 액세스 관리 <br/>\
- Assessment : 이전 단계 데이터 요소, 자동으로 실시간 요약, 최종 의사 결정 <br/>\
- Continuous : 지속적인 보안이 위험관리의 핵심 <br/><br/>\
* ITPE 합숙 124회 4일차 1교시 5번\
',
 
// 시각적 분석
'# 정의 : 데이터 패턴, 관계 표현 과정 <br/>\
- 데이터의 유의미한 패턴 혹은 데이터간의 관계를 파악하는 것 뿐 아니라 이러한 결과를 사용자가 이해하기 쉽게 화면에 표현하는 것까지의 과정<br/><br/>\
# 암기 <br/>\
- 개발방법론 : UCD <br/>\
- 평가 : 사탐평 <br/><br/>\
# 사용자중심 시각적 분석 연구개발 해외 동향 : HCI에 입각한 사용자 경험적 접근<br/><br/>\
# 사용자중심디자인 원칙에 따른 시각화 툴 개발 방법론 : 사용자중심디자인(UCD)<br/><br/>\
# 사용자 니즈파악 및 시스템 개선을 위한 평가 방법론 : 사용자 경험 연구(UX Research), 탐색적 연구(Exploratory Research), 평가적 연구 (Evaluative Research)\
',

// 시각화 분석
'# 정의 : 분석 및 결과 도출 / 상호작용 가능한 인터페이스 기반 <br/>\
- 상호작용이 가능한 인터페이스를 토대로 이루어지는 분석 및 결과의 도출<br/>\
-  대규모의 복잡한 데이터셋에 대한 이해, 추론 및 의사결정을 돕기 위한 분석 기법 및 상호작용적 시각화 기법<br/><br/>\
# 사용자 상호작용 측면 : 차원축소, 거리함수, 토픽모델링<br/><br/>\
# 결과 해석 측면 : LIME(Local Interpretable Model-agnostic Explanations), 나이브 베이즈 분류기(Naïve Bayes classifier), 의사결정트리(decision tree), CNN Filter Layer, 어텐션 모델(attention model)<br/><br/>\
# 실시간 측면 : BlickDB, imMens, 불필요한 연산 최소화, TopicLens, PIVE',

// 데이터 시각화
'# 정의 : 시각적 표현 / 데이터 분석 결과  <br/>\
- 데이터 분석 결과를 쉽게 이해할 수 있도록 시각적으로 표현하고 전달하는 과정(TTA)<br/><br/>\
# 암기 <br/>\
- DIKW 피라미드 : Data, info, Knowledge, Wisdom <br/>\
- Wisdom 단계로 갈수록 조직성과 이해성이 증가하는 특성 <br/><br/>\
# 절차  <br/>\
- 정보 구조화(데이터수집) : 탐색 -> 분류 -> 배열 -> 재배열 <br/>\
- 정보 시각화 : 시간,분포,관계,비교,여러변수 비교, 공간 시각화 <br/>\
- 정보 시각표현(그래픽 7요소) : 그래픽 디자인 기본원리 - 인터랙션 <br/><br/>\
# 유형 <br/>\
- 시간 : 막대, 점그래프 <br/>\
- 분포 : 파이차트, 트리맵 <br/>\
- 관계 : 히스토그램, 스캐터 플롯 <br/>\
- 비교 : 히트앱, 스타차트 <br/>\
- 공간시각화 : 지도매핑\
',

// 임베디드 SW
'# 정의 : 특정기능 수행 결합 시스템 <br/>\
- 컴퓨터 HW + SW 미리 정해진 특정기능 수행 결합 시스템 <br/><br/>\
# 특징 <br/>\
- HW 제약, 최적화, 실시간 처리지원, 안전성 \
',

// SW 진흥법 개정안 
'# 개념 :  SW 역량 강화 및 발전 기반 조성 법률 <br/>\
- 소프트웨어 진흥에 필요한 사항을 정하여 국가 전반의 소프트웨어 역량을 강화하고 소프트웨어산업 발전의 기반을 조성함으로써 국가경쟁력의 확보, 국민생활의 향상 및 국민경제의 건전하고 지속적인 발전에 이바지하기 위한 법률 <br/><br/>\
# 개정 방향(2020) <br/>\
- 과학/기술 : SW 기초 기술의 진흥, SW 융합 기반 기술의 진흥 <br/>\
- 산업/경제 : SW사업의 선진화, SW 산업의 경쟁력 강화, SW융합으로 전 산업 혁신 <br/>\
- 사회 : 전 국민 SW 기초소양 함양, SW 사회 조성, SW 안전 사회 실현 <br/><br/>\
# 주요개정 내용 (1345, 총산융교선)<br/>\
<img src = "./img/SW진흥법주요개정.png" style = "max-width:100%; height:auto;"><br/><br/>\
1. 1장 총칙 <br/>\
- 제2조 : 소프트웨어와 관련된 서비스 제공 산업 <br/><br/>\
2. 3장 소프트웨어 산업 기반 조성 (역창재인)<br/>\
- 제9조 : 지역별 소프트웨어 산업 진흥 <br/>\
- 제14조 : 창업 활성화 <br/>\
- 제17조 : 지식재산권 보호 <br/>\
- 제22조 : 인력 양성 <br/><br/>\
3. 4장 소프트웨어 융합 및 소프트웨어 교육 (융안진교)<br/>\
- 제28조 : 융합 촉진 <br/>\
- 제30조 : 안전 확보 <br/>\
- 제31조 : 산업 진흥등 <br/>\
- 제32조 : 교육 활성화 <br/><br/>\
4. 5장 소프트웨어 산업 선진화 (민범심비)<br/>\
- 제40조 : 민간투자형 소프트웨어 사업 <br/>\
- 제44조 : 사업의 과업범위 <br/>\
- 제50조 : 과업심의 위원회 <br/>\
- 제52조 : 상용소프트웨어 품질 성능의 비교평가 <br/><br/>\
* 실효성 확보 방안 <br/>\
- 모니터링 강화 : 이해관계자 간 공감대 형성, 제도 적용 모니터링, 후속 조치 <br/>\
- 커뮤니티 마련 : SW 관계자 참여할 수 있는 커뮤니티 생성, 토론의 장 마련 <br/><br/>\
* ITPE 1회 1교시 3번 \
',

// 하도급 금지
'# 근거 : SW 산업 진흥법 제 20조의 3 <br/><br/>\
# 주요 내용 (<font color = "red">하재사</font>)<br/>\
- 하도급 제한 : 사업금액의 <font color = "red">50% 초과</font> 하여 하도급 금지 <br/>\
- 재 하도급 금지 : 하도급 받은 SW 사업자의 <font color = "red">재하도급</font> 금지 <br/>\
- 하도급 사전 승인 : 사업비 일정비율 초과하는 경우 <font color = "red">공동 수급체</font>로 참여유도 <br/><br/>\
# 한계점 <br/>\
- 하도급 제한, 재 하도급 금지 : 민간 사업비 적용, 민간 실태 파악 불가능 <br/>\
- 하도급 사전 승인 : 탈법상황 발생, 근로환경 관점 부재 <br/>\
- 위반에 대한 제재수단 : 제재에 대한 회피 가능 <br/><br/>\
# 개선방안 <br/>\
- 법제도 일관성 형성 : 등록제, 하도급 제한제도, 파견금지 업종 <br/>\
- 처우개선 : 임금 보전 특례, 처우개선 방안, 사회보장 특례 <br/>\
- 적정임금제 도입 : 기준마련, 기구마련 <br/><br/>\
# 시사점 <br/>\
- 특수성 인정, 접근 : 임금 보장, 모니터링 <br/>\
- 범부처적 연대 방안 모색 필요 : 개발자 보호제도, 동반성장 강화 <br/><br/>\
* 124회 관리 3교시 1번\
',

// SW 산업 분류
'# 전통적 산업 분류 <br/>\
- 1차 : 농,축,어,임업 - 자연으로부터 원료 채취 <br/>\
- 2차 : 광업,건설,전력,제조업 - 1차 산업물 가공 재화 생산 <br/>\
- 3차 : 금융,보험,유통,도소매업 - 재화 이동,소비,축적 산업 <br/><br/>\
# SW 산업 분류 <br/>\
- 1차 : SI - 시스템 원료 상품 노동력 <br/>\
- 2차 : SW Package - 사용가치 1회성 제품 <br/>\
- 3차 : 인터넷 서비스, 온라인 게임 - 사용자 가치 영속적 서비스 <br/><br/>\
* 124회 관리 3교시 1번\
',

// [정책]- 산업의 디지털 전환 및 지능화 촉진법
'#개요 : 산업현장 축적데이터 기반 생산 효율 강화, 권리 통한 신산업 진출<br/><br/>\
#법안 상세내용<br/>\
1. 산업데이터 활성화로 <font color = "red">디지털전환 및 지능화 촉진</font> > 국가경제발전 이바지<br/>\
2. 산업데이터와 지능정보기술 <font color = "red">새로운 부가가치 창출</font> > 산업 디지털 전환<br/>\
9. 산업데이터 신규 생성자에게 <font color = "red">사용/수익권리 부여</font> > 권리침해방지를 위한 보호원칙제시<br/>\
10. 산업부 장관은 산업데이터 <font color = "red">생성, 활용 환경 보장</font> / 지원<br/>\
11,12. 산업데이터 활용지원 <font color = "red">전문회사 등록 의무 부여</font> 지원사항 규정/<font color = "red">표준화</font><br/><br/>\
#대응전략<br/>\
(정책적측면) 산업데이터 국제표준화, 산업데이터 활용지원 정부지원 강화, 산업데이터 활용 Best Practice 발굴<br/>\
(기술적측면) 산업데이터+신기술(AI, 빅데이터, 마이닝 활용), 데이터품질관리 정량화(인공지능 데이터 품질관리 참조) \
',

// UX 모델링
'# 정의 : 사용자 경험 중심 모델 개발, 분석 과정 (니즈,태도,동기,행동)<br/>\
- 사용자가 제품, 서비스 혹은 시스템을 직/간접적으로 이용하면서 느끼는 총체적 경험을 상호 교감적인 모델로 개발하고 분석하는 과정 <br/><br/>\
# 암기 <br/>\
1. 유형 <br/>\
- Persona : 동일경험 가상인물 <br/>\
- Journey Map : 변화 시각화 <br/>\
- Affinity Diagram : 리서치 수합, 가치 찾기 <br/>\
- Elito Method : Needs 파악, 해결책 고민 <br/><br/>\
# 기법 유형 <br/>\
<img src = "./img/UX_Modeling.png" style = "max-width:100%; height:auto;"><br/>\
- Persona : 동일 경험 사용자 가상인물 정의 <br/>\
-> 경험, 행위변수 공유, 형태 파악 <br/><br/>\
- Journey Map : 개별 경험 변화 시각화 작업 <br/>\
-> 경험의 시간흐름, 전체흐름 파악 <br/><br/>\
- Affinity Diagram : 리서치 결과 Bottom Up, 가치 찾는 작업 <br/>\
-> 리서치결과 그룹핑 <br/><br/>\
- Elito Method : 사용자 Needs 파악, 해결책 고민 <br/>\
-> Key Findings <br/><br/>\
# 적용 방안 <br/>\
- 전환 : 사용자가 예상한 순서에 따라 기능의 순서가 배열 <br/>\
- 확장 : 현재에도 존재하긴 하지만 충족하지 못한 경우 <br/>\
- 감성적 충족 : 감성적 부족 개선 <br/>\
- 숨겨진 니즈 : 사용자도 모르는 니즈 발굴 <br/><br/>\
* ILIFO 24회 1교시 1번\
',

// 페르소나(Persona) 
'# 정의 : 가상 인물 / 제품 서비스 사용 <br/>\
- 어떤 제품이나 서비스를 사용할만한 목표인구 집단에 있는 다양한 사용자 유형들을 대표하는 가상의 인물<br/><br/>\
# 특징 : 실무중심 방법론, 실제 데이터 기반, SW개발과 UX 분야 활용도 증가, 가상의 인물 묘사, 실제 사용자 특성, 현실적 인물 적용, 사용자 요구 확인 <br/>\
- 추상적 문제의 함정을 피하려다 구체적 문제의 항점에 빠질 수 있음 <br/><br/>\
# 절차 <br/>\
- 가상화 : 이름,나이,성별,문제점,목적,사진 <br/>\
- 리서치 <br/>\
- 실체화 <br/>\
- 다양한 요구사항 <br/>\
- 재구성 <br/><br/>\
# 타 사용자 요구사항 분석 방법 비교 <br/>\
1. User Survey <br/>\
- 장점 : 통계적 분석 가능, 대규모 분석 용이 <br/>\
- 단점 : Follow up 어려움, 깊이 있는 의견 받기 어려움 <br/><br/>\
2. Focus Group <br/>\
- 장점 : 광범위 사용자 관점 대한 빠른 분석 가능 <br/>\
- 단점 : 모집단 선택 문제, 모집단 의존적 <br/><br/>\
3. 인터뷰 <br/>\
- 장점 : 빠른 수렴 <br/>\
- 단점 : 요구사항 결함 및 합의 과정 필요 <br/><br/>\
4. 페르소나 <br/>\
- 장점 : 상황 기반으로 효과적 도출 가능 <br/>\
- 단점 : 사용자 모집단을 지나치게 단순화 시킬 수 있음 <br/><br/>\
5. Futuer Workshop <br/>\
- 장점 : 창조적 생각 도출 가능 <br/>\
- 단점 : 실제 요구사항보다 확대 해석 될 수 있음 <br/><br/>\
<img src = "./img/Persona.png" style = "max-width:100%; height:auto;">\
',
 
// 임베디드 개발 방법론
'# 정의 : 특정한 기능만을 수행하기 위해 포함된(내장된) SW 개발 방법론 <br/><br/>\
# 특징 <br/>\
- 물리적 특성 : 실시간 처리/저전력/저사양/소형화 <br/>\
- 설계 방법 : HW, SW 동시 설계 및 통합 <br/><br/>\
# 절차 <br/>\
- 요구사항 분석 > HW/SW(분석 > 설계(기능) > 개발 > 검증(기능) > 개발(비기능) >검증(HW/SW통합검증)) <br/><br/>\
# 응용 SW 개발 계획서 목차 <br/>\
- 개요, 자원 및 일정 예측, 조직 구성, 업무 분장, 기술관리 방법등이 포함된 문서 <br/><br/>\
# 목차 : 제목, 개요, 결과물, 개발방법, 위험관리, 단계적 개발 계획, 참여자, 업무분장 \
',

// Open Seed 
'# 정의 : ETRI 개설 사이트 / 멀티코어용 임베디드 SW 플랫폼 / 개발자, 중소기업 공개 <br/>\
- 이기종 멀티코어용 임베디드 SW 플랫폼을 국내 개발자 및 중소기업에게 공개하고 이를 활성화 하기 위해 ETRI에서 개설한 사이트',

// 80
'# 정의 : 그래픽 기반 프로세스 모델링 방법론 / 비즈니스 분석가, 개발자, 관리자 <br/>\
- 비즈니스 분석가, 개발자, 관리자 등의 모든 비즈니스 프로세스 관련자에게 모델링 요소를 제공하는 그래픽 기반의 프로세스 모델링 방법론 \
',

// 연동계획
'# 정의 : 반복적 계획 기법 / 점진적 상세화 / 가까운시기 상세 / 미래 작업 상위 수준 계획 <br/>\
- 프로젝트의 특성 중 하나인 점진적 상세화(Progressive elaboration)와 비슷한 특징을 지닌 개념으로 가까운 시기에 완료할 작업은 상세히 계획하고, 미래의 작업은 상위 수준에서 계획하는 반복적인 계획 기법<br/><br/>\
# 절차 (<font color = "red">마분W관실</font>)<br/>\
- 1단계 : 마스터 플랜 계획 <br/>\
- 2단계 : 분류 수준 계획 <br/>\
- 3단계 : WBS 단위 계획 <br/>\
- 4단계 : Work Package 관리, 인수기준 상세화 <br/>\
- 5단계 : Work Package 실제 수준 상세화 <br/><br/>\
# 작성원칙 <br/>\
- 관리 가능 크기 : 할당가능, 소통가능<br/>\
- 분할 레벨 구분 : 3~5단계<br/>\
- 작업 패키지의 적정 크기 : 1 ~ 10% 정도 <br/>\
- WBS 100% : 총합 100 <br/><br/>\
* KPC 25회 3교시 2번\
',

// SW 사업정보 저장소
'# 정의 : 통계적 데이터 기반 SW 사업지식 데이터 베이스 <br/>\
- 국가기관등에서 추진되는 SW사업(SW개발, 재개발, 유지보수 및 운영)의 수행실적 정보를 수집 및 분석하여 SW사업 추진시 예산수립, 비용산정, 요구사항도출 등을 위한 참조정보(사업규모, 사업금액, 사업기간 등)을 제공하는 객관적이고 정량적인 통계적 데이터 기반의 SW 사업지식 데이터베이스(Repository) <br/><br/>\
# 암기 <br/>\
- 소산법 22조 <br/>\
- 기.재.유.운 <br/>\
- 1억 <br/>\
- 분리제외, 상용제외 <br/><br/>\
# 개념도 <br/>\
- 데이터 제출(input) : 공공부문 발주기관 SW사업 수행 실적 정보(소산법 22조(SW 사업대가지급), 2013이후 제출 법적 의무화) <br/>\
- 데이터 수집 및 관리 : SW 사업정보저장소(총57개 데이터 수집 및 관리(사업기간, 사업금액, 요구사항, 기능점수(FP), 개발언어, 플랫폼정보) <br/>\
- 서비스 활용(output) : 공공부분 발주기관 - 유사사업 정보 활용 통한 예산 수립 참조, 대가산정 시뮬레이션(기능점수 참조 정보제공 예산 및 SW 산업 정책 관련기관 - 예산편성 기초 정보, 정책수립 및 의사결정 참고 정보<br/><br/>\
# 제출 대상 기관 : 소산법 의거 국가기관(국가, 지방자치단체, 국가 또는 지방자치단체가 투자하거나 출연한 법인 또는 그밖 공공기관)<br/><br/>\
# 제출 대상 사업 : 국가기관 등에서 매년 추진되는 SW 사업 <br/>\
- SW 개발 및 재개발 사업 : 발주금액 1억이상 사업 (분리발주 제외, HW, 상용 SW구매 비용 등 포함 통합 발주 금액 기준) <br/>\
- SW 유지보수 및 운영사업 : 발주금액 기준 1억이상 사업(다년계약일 경우 연간 유지보수 비용 기준) <br/><br/>\
# 제출 시점 <br/>\
- 개발 : 계약 및 착수후 1단계(계약 완료후 1개월 이내) <br/>\
- 사업종료후 2단계 : 사업 종료후 1개월 이내 <br/>\
- 재개발 : 개발 사업 동일 <br/>\
- 운영 및 유지보수 : 개발사업 동일 단, 다년계약일 경우 1회 이상 제출 <br/><br/>\
# 제출 절차 <br/>\
- 1차 : 계약 완료후 1개월 이내 : 사업정보와 FP정보를 시스템 등록 <br/>\
- 2차 : 사업 종료후 1개월 이내 : PM이 사업정보, FP정보(정통법), 수준 조사 정보 시스템 등록 <br/><br/>\
<img src = "./img/SW사업정보저장소.png" style = "max-width:100%; height:auto;">\
',

// SW사업 대가산정 가이드
'# 정의 : 유지관리, 운영업무 구분 명확화 개정 <br/>\
- SW 사업 대가산정 가이드 2019년 개정판에서 유지관리 업무와 운영업무의 구분 명확화 개정 진행',

// 옵저버 패턴
'# 정의 : 일대다 의존성 정의 패턴 / 타 객체 내용 반영 <br/>\
- 한 객체의 상태가 바뀌는 경우 의존 관계에 있는 다른 객체들에게 연락이 가고, 자동으로 그 내용이 갱신되도록 일대다 의존성을 정의한 패턴 <br/><br/>\
',

// PMO
'# 정의 : 프로젝트 전담 관리 조직 <br/>\
- Project Management Office <br/>\
- 성공적인 프로젝트 수행을 위해 프로젝트의 자원, 인력, 일정 등을 체계적으로 관리하기 위해 조직된 프로젝트 전담 관리 조직 <br/><br/>\
# 구성요소 <br/>\
1. 관리적 측면 (<font color = "red">전재일고형</font>)<br/>\
- 전문 PM : 전체 프로젝트 진행 관리 <br/>\
- 재무 관리자 <br/>\
- 일정 관리자 <br/>\
- 고객인수 담당자 <br/>\
- 형상 관리자 <br/><br/>\
2. 기술적 측면 (<font color = "red">품개형</font>)<br/>\
- 품질 관리자 <br/>\
- 개발기술 담당자 : 전문 Skill, Architecture <br/>\
- 형상관리 위원회<br/><br/>\
# Frame work <br/>\
<img src = "./img/PMO.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 활성화 방안 <br/>\
1. 공공 부문 정보화 사업 PMO 제도 현황 <br/>\
<img src = "./img/PMO_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
2. 활성화 방안 <br/>\
- 제도 측면 : 전문가 양성, 예산 확보, 생태계 기반 <br/>\
- 운영 측면 : 참조 모델, 실무적 방법론, 효과 및 효율 <br/><br/>\
* ITPE 8회 관리 1교시 5번 <br/>\
* 라이지움 86회 2교시 2번 \
',

// Agile PMO
'# 정의 : Scrum Master, 개발, QA 기능 조직 / 자문 및 상담 기능 / Agile Project 관리 조직 <br/>\
- Scrum Master, 개발, QA의 기능조직들과 함께 구성되어 계획 및 통제 역할이 아닌 자문 및 상담 기능을 제공하는 Agile 프로젝트 관리 조직 <br/><br/>\
# 역할 <br/>\
<img src = "./img/PMOAgilePMO.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 관리 영역 <br/>\
- 일정 : Agile Team, 일정 모니터링 <br/>\
- 범위 : 현재 상황, 시장환경 분석 <br/>\
- 위험 : 애자일 팀 간, 팀 내 자율적 조정 <br/>\
- 품질 : 간단한 문서로 관리 (모형 화면, 표현 결과물) <br/>\
- 의사소통 : 일일 스탠드업, 리더쉽 보드 공유 <br/>\
- 자원 : 사용 가능 리소스 기반 산정 <br/>\
- 성과 : 린캔버스 활용 비즈니스 성과 초점 <br/><br/>\
# AgilePMO 참조 프레임워크 <br/>\
- SAFe(Scaled Agile Framework) : 린 채택 4계층(Team, Program, Value Stream, Portfolio) 제공 FW <br/>\
- LeSS(Large-Scale Scrum) : Crag & Bas Agile FW <br/>\
- DAD(Disciplined Agile Delivery) : 도입, 구축, 전이 3단계 Agile FW <br/><br/>\
* ITPE 8회 관리 1교시 5번\
',
  
// 공공 PMO
'# 정의 : 공공정보화 사업에서의 PMO 제도 <br/>\
- 전자정부사업의 사업의 위험을 방지하고 품질을 향상시키기 위해 전자정부사업의 관리 감독 업무 일부 또는 전체를 전문가에게 위탁하는 제도 <br/><br/>\
# 법적 근거 <br/>\
- 전자정부법 64.2 : 전자정부사업관리의 위탁 <br/>\
- 전자정부법 64.3 : 전자정부사업관리자의 책무 <br/><br/>\
# 세부업무 <br/>\
- 기획단계 : 통합,성과 <br/>\
- 집행단계 : 통범일원품자의위조이 <br/>\
- 사후단계 : 통합,성과,변화 \
',
  
// 정보시스템 감리
'# 정의 : 3자 관점의 검증활동 <br/>\
- 프로젝트의 품질 향상 목적 <br/>\
- 감리발주기관 및 피감리인의 이해관계로부터 독립된자가 제3자적 관점에서 정보시스템의 효율성을 향상시키고 안전성을 확보하기 종합적으로 점검하고 문제점을 개선하도록 하는 활동 <br/><br/>\
# 감리대상 (전자정부법 57조) (<font color = "red">대공5필</font>) <br/>\
- 의무감리 : 사업비 <font color = "red">5</font>억이상, <font color = "red">대</font>국민 서비스, 민원 업무, <font color = "red">공</font>통 구현 / 시행령 71-1,2 <br/>\
- 기관장 판단 : EA, ISP, SE, OP 등에 감리 시행 <font color = "red">필</font>요성 인정되는 경우 <br/><br/>\
# 감리프레임워크 (시영관) <br/>\
- 감리시점 : ITA, ISP, SD, DB, OP, MA <br/>\
- 감리영역(세품사) : 세부사항, 품질보증활동, 사업관리 <br/>\
- 감리관점(서산절) : 절차, 산출물, 서비스 <br/><br/>\
# 유형 <br/>\
- 3단계 (요설종) / 행안부 고시 2012<br/>\
- 2단계 (설종, 20억이하 6개월 미만) <br/><br/>\
# 감리원 (총상수) <br/>\
- 총괄감리원 : 1년이상 수석감리원 중 상근 감리원 <br/>\
- 상근감리원 : 감리업체 근무 <br/>\
- 수석관리원 : 정보기술 분야의 기술사, 국가공인자격 취득자 <br/>\
- 상주감리원 : 20억이상 감리 3회이상 / PM, QA 근무 3년 이상 <br/><br/>\
# 감리 수행 절차 <br/>\
- 구성 : 감리법인, 발주기관, 피감리인 <br/>\
- 단계 : 계약체결, 계획서제출, 착수회의, 현장감리, 종료회의, 감리보고서통보, 감리결과반영, 조치내역확인, 확인보고서 <br/>\
- 산출물 : 감리계획서, 감리수행결과보고서, 시정조치확인보고서 <br/><br/>\
# 감리 점검 결과 <br/>\
- 개선권고 유형 : 필수, 협의, 권고<br/>\
- 개선 시점 : 장기, 단기 <br/>\
- 과업내용 이행 여부 : 적합, 부적합, 점검 제외 <br/><br/>\
# 감리 법,제도 <br/>\
<img src = "./img/AuditRule.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 감리 수행형태 <br/>\
<img src = "./img/AuditProcessType.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 감리 Overview \
',

// 21년 개정사항
'# 정보시스템 감리기준 고시 개정 사항 (<font color = "red">대제외</font>)<br/>\
<img src = "./img/Audit21Upgrade.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 개정사항, 별지서식 수정 (절명항수보) <br/>\
- 감리수행 절차 변경 : 예현시 / 정보개발 사업(요설종-각 단계별 예현시) <br/>\
- 역할 명확화 : 상주감리 업무역할 대해 개정고시 내용 반영(PMO 역할 유사 부분 명확화) <br/>\
- 항목 보완 : 정보화사업 유형별 표준 점검항목 일부보완(운영유지보수 점검가이드 2.0 반영) <br/>\
- 내용 수정 : 발주기관 입장에서 설명한 일부 내용 수정 <br/>\
- 내용 보완 : 표, 서식, 이미지 개선 및 설명내용 간소화 등 <br/><br/>\
* ITPE 7회 관리 2교시 5번 \
',

// 감리 계획서, 보고서 작성 원칙
'# 작성 원칙 (<font color = "red">유간논명 완정객적준</font>) <br/>\
- 유용성 : 목적 달성 정보제공 <br/>\
- 간결성 : 간략 표현 <br/>\
- 논리성 : 점검 결과 ~ 종합 의견 서로 연결 <br/>\
- 명확성 : 이해하기 쉬움 <br/>\
- 완전성 : 누락 없이 포함 <br/>\
- 정확성 : 왜곡 없이 기술 <br/>\
- 객관성 : 주관적 의견 배제 <br/>\
- 적시성 : 사업 진척 시점 적절 필요 <br/>\
- 준거성 : 관련 기준, 가이드 따라 작성 <br/><br/>\
<img src = "./img/AuditWritePrinciple.png" style = "max-width:100%; height:auto;"><br/><br/>\
* ITPE 7회 2교시 5번\
',
 
// 공통 감리
'# 정의 : 모든 유형 공통 적용 절차 (상주, 상시 감리 적용 x) <br/>\
- 모든 유형의 정보화 사업에 공통적으로 적용되는 일반 감리 절차 <br/><br/>\
# 공통 감리 절차 (예현시)<br/>\
1. 예비조사 (준실감) <br/>\
- 예비조사 준비 <br/>\
- 예비조사 실시 <br/>\
- 감리계획서 작성/제출 <br/><br/>\
2. 현장감리 (감착감보종보) <br/>\
- 감리시작 <br/>\
- 착수회의 <br/>\
- 감리수행 <br/>\
- 보고서 작성/검토 <br/>\
- 종료회의 <br/>\
- 보고서 확정/통보 <br/><br/>\
3. 시정조치 확인 (준시작확)<br/>\
- 확인준비 <br/>\
- 시정조치 확인 <br/>\
- 확인보고서 작성/협의 <br/>\
- 확인보고서 확정/제출\
',
 
// 검사기준서
'# 정의 : 사업자 작성, 발주기관 확인, 감리법인 제출 <br/>\
- 세부 과업항목별로 이행여부를 점검하기 위한 문서 <br/><br/>\
# 구성요소 : 요구사항, 검사항목, 검사기준 <br/><br/>\
# 기능 요구사항 점검 방법 <br/>\
- 기능 및 기준 : 관리되고 추적되는지 검토 <br/>\
- 세부검사항목 : 화면, 프로그램으로 구체화 <br/>\
- 검사기준 : 테스트 시나리오(통합 or 단위테스트 시나리오) 세부 시험항목으로 연결 <br/>\
- 관계 : 기능간 통합 연계 대한 사항 확인 점검 <br/><br/>\
# 기능 요구사항 검사기준서 예시 <br/>\
<img src = "./img/FunctionalRequirementTest.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 비기능 요구사항 점검 방법 <br/>\
- 세부검사 항목 : 장비 도입(도입된 장비), 성능(최종 결과물) <br/>\
- 제외대상 : 구체적이지 않거나 검사환경 구성 제약 된 경우 <br/><br/>\
# 비기능 요구사항 검사기준서 예시 <br/>\
<img src = "./img/NonFunctionalRequirementTest.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 123회 2교시 5번\
',
 
// 기능/비기능 요구사항 점검
'# 점검 방법 <br/>\
- 기능 요구사항 : 단위 시스템별 기능 요구사항 대해 감리원 검사항목 단위 테스트, 결과표 기록 <br/>\
- 비기능 요구사항 : 검사기준 명시된 목표 달성한 경우 적합으로 인정 <br/><br/>\
# 과업 이행여부 점검 결과 예시 <br/>\
<img src = "./img/RequirenmentReveiw.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 점검내용 <br/>\
1. 완료 여부 : 사업자가 제출한 결과 기초 기록 <br/>\
- 완료 : 해당 요구사항 완료되어 검사기준에 따라 검사할 수 있는 상태 <br/>\
- 진행중(점검제외/부적합) : 해당 요구사항 완료되지 못하여 검사기준 따라 검사할 수 없는 상태 <br/><br/>\
2. 적/부판정 <br/>\
- 적합 : 점검결과 예상결과, 판정기준 부합 / 결함 미발견, 단순 결함<br/>\
- 부적합 : 점검결과 예상결과, 판정기준 부합x or 중대한 결함 / 결함 <br/>\
- 점검제외 : 환경 준비되지 않음, 선행기능 결함, 발주기관 요청, 합의 의한 진행중인 경우 <br/><br/>\
* 123회 관리 2교시 5번\
',
 
// 시정조치 확인 
'<img src = "./img/AuditResetCheck.png" style = "max-width:100%; height:auto;">\
',

// PMO, 감리
'- 관점 : 3자 관점(독립적) / 발주자 관점<br/>\
- 법적근거 : 57.1 의무 / 64.2 권고 <br/>\
- 법적책임 : 62 처분 / 64.3 손해배상\
',
 
// 3단계 감리
'# 정의 : 사업비가 20억 이상이고, 사업기간이 6개월 이상일 경우, 요구정의, 설계, 종료 3단계 감리를 통하여 정보화 사업의 품질 및 과업이행 여부의 적절성을 확인하는 제도 <br/><br/>\
# 절차 : 착수회의 > 현장감리 > 감리보고서작성 > 종료회의 > 감리보고서접수 <br/>\
<img src = "./img/AuditLevel3Overview.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 세부내용 <br/>\
<img src = "./img/AuditLevel3Detail.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 종료단계 감리 <br/>\
- 정의 : 사업자가 제출한 과업대비표의 과업내용 이행 결과를 적합, 부적합 판정하는지 점검하는 감리 <br/>\
- 절차 : 예비조사 > 현장가리 > 시정조치확인 <br/><br/>\
# 과업이행 수행여부 곤란 사례 <br/>\
- 업무 이해도 : 감리인 상세 업무 프로세스 경험 부족 (사법시스템)<br/>\
- 신기술 이해 : 감리인 신기술 이해도 부족 (챗봇, IoT)<br/>\
- 정보보안 : 실제 운영환경 테스트, 점검 곤란 (민감정보 시스템)<br/>\
- UI/UX : 일부 전문가용 시스템 조작 어려움 (국방전문 시스템)<br/>\
- 개발 일정 : 개발 미완성 <br/>\
- 테스트 환경 : 수행 제반 조건 x (모바일, 플랫폼별) <br/><br/>\
# 점검 결과 사례 <br/>\
<img src = "./img/AuditSubjectResultExample.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 라이지움 87회 관리 4교시 3번\
',
 
// 운영 감리
'# 정의 : 개발 완료 후 / 유지보수 제외 / 정상적 운영<br/>\
- 개발 완료 후 인도된 정보시스템에 대해 유지보수를 제외한 운영기획 및 관리, 모니터링, 테스트, 사용자 지원을 포함한 정보시스템의 정상적 운영에 필요한 제반 활동 <br/><br/>\
# 점검 분야 (<font color = "red>개인</font>)<br/>\
- 개발 소프트웨어(<font color = "red">릴테장</font>) : 릴리즈 및 배포, 테스트 지원, 장애 <br/>\
- 인프라(<font color = "red">관보연용</font>) : 서비스 수준  관리, 서비스 보고, 서비스 연속성, 용량 <br/><br/>\
* KPC 92회 2교시 1번\
',
 
// 유지보수 감리
'# 정의 : 개발, 구축 완료 후 / 추가사항 / 개선 <br/>\
- 정보시스템 개발, 구축 완료 후 기능변경, 추가, 보완, 폐기, 사용방법의 개선, 문서보완 등의 정보시스템 개선에 필요한 제반 활동 <br/><br/>\
# 점검 분야 (<font color = "red">개상인</font>)<br/>\
- 개발 소프트웨어(<font color = "red">모장지성</font>) : 모니터링, 장애처리, 사용자 지원, 성능관리 <br/>\
- 상용 소프트웨어(<font color = "red">유표업일</font>) : 유지보수 계획, 표준 및 절차, 업그레이트 및 패치, 일상지원 <br/>\
- 인프라(<font color = "red">OH예긴</font>) : OS 업그레이드 및 패치, HW 업그레이드, 예방점검, 긴급/장애처리 <br/><br/>\
* KPC 92회 2교시 1번\
',
 
// 감리기준 감리업무 절차
'# 개념 : 행정안전무 고시 제2020-1호 <br/>\
- 전자정부법 제57조5항에 따른 정보시스템 감리의 업무범위, 절차 및 준수사항 등 감리하기 위한 사항 정함 목적 기준 <br/><br/>\
# 정보시스템 감리기준 목차 <br/>\
1. 총칙 <br/>\
2. 감리시기, 인력배치 <br/>\
3. 감리업무 절차 <br/>\
4. 감리법인 등록 및 관리 <br/>\
5. 감리원의 교육 및 자격 <br/>\
6. 보칙 <br/><br/>\
# 감리업무 절차 <br/>\
<img src = "./img/AuditStandardProcess.png" style = "max-width:100%; height:auto;">\
',
 
// 정보시스템 하드웨어 규모산정 지침
'# 정의 : TTA 기반 하드웨어에 대한 예산 수립 지침 / 시스템 관점, 일시적 <br/>\
- 기본적인 용량과 성능, 요구사항이 제시되었을 때, 그것을 시스템 요구사항으로 변화하는 기법<br/><br/>\
# 유형(수참시) <br/>\
1. 수치계산법 : 사용자수등 요소로 규모산정 후 보정치 적용 <br/>\
- 장점 : 근거 명확, 간단 산정 <br/>\
- 단점 : 보정치에 대한 정확한 근거 제시 어려움, 보정치 의존도 높음 <br/><br/>\
2. 참조법 <br/>\
- 업무량 : 사용자수 ,DB 크기 따라 유사 시스템 규모 참조 <br/>\
- 장점 : 안전 <br/>\
- 단점 : 근거 제시시 미약 <br/><br/>\
3. 시뮬레이션법 : 작업부하 모델링 후 시뮬레이션 <br/>\
- 장점 : 상대적 정확한 값 <br/>\
- 단점 : 시간, 비용 많이 소요 <br/><br/>\
# 절차 <br/>\
- 구축방향 및 기초자료 조사 : 환경 파악, 흐름 파악<br/>\
- 기초자료 및 업무 분석 : 기준 부하 설정, 업무 내용 검증<br/>\
- 참조모델 결정 및 서버 규모 산정 : WEB/WAS/OLTP <br/>\
- 참조모델별 가중치 적용 : WEB/WAS/OLTP(2.1/0.4,0.7,1), WEB/WAS,OLTP(1.6/0.6,1), WEB,WAS/OLTP(1.7/0.7,1), WEB,WAS,OLTP(미적용/1,1,1) <br/><br/>\
# 규모산정 대상 <br/>\
<img src = "./img/HW_Calc_Scale_Target.png" style = "max-width:100%; height:auto;"><br/>\
- CPU : PCU(Power Control Unit) 규모 계산 <br/>\
- 메모리 : CPU 규모산정, 시스템 S/W, App <br/>\
- 디스크 : CPU 규모산정, 시스템 S/W, DB 사용량 <br/>\
- 스토리지 : 서버 규모 <br/><br/>\
# CPU 및 스토리지 성능 기준치 (tTMSIS) <br/>\
<img src = "./img/CPU_Spec_Standard.png" style = "max-width:100%; height:auto;"><br/><br/>\
# CPU 및 스토리지 성능 기준치 측정방법 <br/>\
- TPC-C : 분당 트랜잭션 측정 / tpmC (Translation Per Minute) <br/>\
- SPECjbb2015 : Java App 기반 시나리오 / max-jOPS (Fail발생 직전 최대부하) <br/>\
- SPC-1 : 비휘발성 스토리 표시 실제 환경 시뮬레이션 / Input Output Per Second (In 40, Out 60) <br/><br/>\
* 119회 응용 2교시 5번\
',

// 상주감리
'# 정의 : 감리대상사업 현장 상주 / 주기적 투입 감리원 수행 감리 <br/>\
- 보통 수행사에서 요청 / 발주사는 결과만 받으면 됨 / 감리 비용 증가 <br/>\
- 전자정부법 57조에 의거하여 감리대상사업 현장에 상주하거나, 주기적으로 투입되는 감리원이 수행하는 감리(감리기준 제2조 제14호에 의해 정의된 역할을 수행하는 감리) <br/><br/>\
# 목적 <br/>\
- 비용 최소화 : 대형 프로젝트에서 단계별 감리 수행시, 점검 따라 많은 조치양 발생 대비 <br/>\
- 품질 관리 : 지속적인 품질 관리 필요 <br/><br/>\
# 실시시기, 자격 <br/>\
- 실시 시기 : 대기업 참여 제한(진흥법 48조 2항), 위험도, 난이도 높다고 판단 <br/>\
- 자격 : 20억 이상 3회 이상, PM,QA 3년 이상, 발주자 인정한 수석 감리원 <br/><br/>\
# 범위 <br/>\
1. 절차 <br/>\
- 사업수행 계획서, WBS, 개발방법론 공정,산출물 조정내역 검토 (10조2 1항1호)<br/>\
- 과업 범위 구체화 및 과업 변경 영향 타당성 (10조2 1항2호) <br/>\
- 상세 공정표 따른 계획 대비 실적 점검 및 이행 상태 확인 (10조2 1항3호) <br/>\
- 위험요소 사전 파악 및 합리적 개선방안 제시 (10조2 1항5호) <br/>\
- 쟁점사항 대한 기술검토 및 의경조율 지원 (10조2 1항6호) <br/><br/>\
2. 산출물 <br/>\
- 요구사항 정의서 과업내용 반영여부 (3조2) <br/>\
- 산출물에 대한 품질 컴토 (10조2 1항4호)<br/><br/>\
3. 성과 <br/>\
- 그 밖 사업 성공 수행 위한 점검 및 자문 (10조2 1항8호) <br/><br/>\
# 수행 절차 <br/>\
1. 계획 수립 <br/>\
- 감리사업수행계획서 일부 포함 or 별도 작성 <br/>\
- 투입기간, 투입인력, 업무범위 반드시 제시 <br/>\
- 산출물 : 상주감리계획서 <br/><br/>\
2. 상주감리 수행 <br/>\
- 검토수행 : 감리계획서 점검항목 상시적 점검, 결과 공유, 시정조치 요구 <br/>\
- 정기보고 : 감리계획서 일정 따라 정기적 보고 <br/>\
- 산출물 : 감리수행결과보고서, 시정조치결과확인보고서, 표준점검체크리스트, 정기보고서 <br/><br/>\
3. 완료보고 <br/>\
- 상주감리 종료시 상주감리 대한 완료보고 <br/>\
- 보고형태 : 발주자 협의 결정 <br/>\
- 산출물 : 완료보고서 <br/><br/>\
# 상주감리, PMO 관계 <br/>\
1. 관계도 <br/>\
<img src = "./img/PermanentSupervisionPMORelation.png" style = "max-width:100%; height:auto;"><br/><br/>\
2. 관계 <br/>\
- 감리의뢰(PMO->감리) : 정해진 주기, 산출물 감리 요청 <br/>\
- 감리보고서 제출(감리->PMO) : 종료 시기, 품질(제품, 프로세스)관점 산출물 점검 <br/><br/>\
# 비교 <br/>\
<img src = "./img/AllDayAuditPMO.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 125회 관리 3교시 2번 <br/>\
* ITPE 합숙 124회 3일차 관리 1교시 11번\
',

// 기본점검표
'# 정의 : 프레임워크 기반 / 유형, 시점, 영역 / 점검항목표 <br/>\
- 점검프레임워크를 기반으로 사업 유형별/감리시점별/감리영역별 도출된 점검항목을 모아서 표로 표현한 점검표 <br/><br/>\
# 구조적/정보공학적 개발 모델<br/>\
1. 분석 (요구사항 반영) <br/>\
- 시스템 아키텍처 : 기술 아키텍처 구성, 용량 점검 <br/>\
- 응용 시스템 : 이벤트 모델링, 보안 분석 점검 <br/>\
- 데이터베이스 : 엔티티 정의, 관계 설정, 데이터 모델링 점검 <br/><br/>\
2. 설계 (분석 결과 근거) <br/>\
- 시스템 아키텍처 : 구조적 설계, 상세 설계, 시스템 설치, 검증 및 전환 계획 점검 <br/>\
- 응용 시스템 : 업무기능, 인터페이스 구현 점검 <br/>\
- 데이터베이스 : 데이터 분산, 무결성, 성능, 상세 설계 수행, 초기 데이터 구축 및 전환 계획 점검 <br/><br/>\
3. 구현 (설계 결과 근거) <br/>\
- 시스템 아키텍처 : 시스템 시험 계획 수립 점검 <br/>\
- 응용시스템 : 기능의 충분성, 완전성, 무결성, 편의성, 적정성 단위 검증 점검 <br/>\
- 데이터베이스 : 무결성, 성능, 보안성, 정합성 검증 <br/><br/>\
4. 시험 <br/>\
- 시험활동 : 통합 시험, 시스템 시험, 기능 완전성, 성능, 안전성, 보안성 점검 <br/><br/>\
5. 전개 <br/>\
- 운영준비 : 설치, 배포, 초기데이터 구축 준비, 이관 및 운영 점검 <br/><br/>\
# 객체지향 컴포넌트 기반 모델 <br/>\
1. 요구분석 (현행 업무 시스템 파악, 요구사항 도출) <br/>\
- 시스템 아키텍처 : 운영환경 분석, 요구사항 도출 통한 상위 수준 시스템 아키텍처 정의 점검 <br/>\
- 응용 시스템 : 유스케이스 모형 정의 및 분석 클래스 도출 점검 <br/>\
- 데이터 베이스 : 개념적 수준 엔티티 클래스 도출 점검 <br/><br/>\
2. 분석/설계 <br/>\
- 시스템 아키텍처 : 프로토타이핑 등 기술 검증, 전반적 시스템 전환 계획 점검 <br/>\
- 응용 시스템 : 유스케이스 모형 및 클래스 정제, 시스템 구현 기능 가능 수준 설계 점검 <br/>\
- 데이터베이스 : 데이터 분산, 무결성, 성능, 백업/복구 고려 전환 계획 작성 점검 <br/><br/>\
3. 구현 <br/>\
- 시스템 아키텍처 : 시스템 도입,설치 검증, 시스템 시험계획 적정 수립 점검 <br/>\
- 응용 시스템 : 기능 완전성, 무결성, 편의성, 적정성 확보, 단위 기능 검증 수행 점검 <br/>\
- 데이터베이스 : 무결성, 성능, 보안성, 정합성 확보 점검 <br/><br/>\
* 125회 응용 2교시 4번\
',

// PMBOK 6th 주요개정 내용 <br/>\
'2018.03. 부터 시행 <br/>\
1. 프로젝트 관리자의 역할단원 추가 <br/><br/>\
2. 프로세스 변경 <br/>\
<img src = "./img/PMBOK6_2_1.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/PMBOK6_2_2.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/PMBOK6_2_3.png" style = "max-width:100%; height:auto;"><br/><br/>\
<img src = "./img/PMBOK6_2_4.png" style = "max-width:100%; height:auto;"><br/><br/>\
3. 애자일 관련 내용. 비즈니스 문서, 조직구조 유형에 대한 내용 강화 <br/><br/>\
4. 각 지식영역에 대해 최근 추세 및 실무 사례, 테일러링시 고려사항 애자일/적응형 환경을 위한 고려사항에 대한 설명 추가 <br/><br/>\
# PMBOK 6,7 비교 <br/>\
<img src = "./img/PMBOK67.png" style = "max-width:100%; height:auto;">\
',
  
// 지식영역 세부프로세스 49개
'[Y] 통범일원품자의위조이<br/>\
[X] 착기실감통종<br/>\
- 착 : 헌장 / 이해관리자 식별 <br/>\
- 기 : 프/범요정W/일정순기일/원산예/품/자활/의/리식정량대/조/이 <br/>\
- 실 : 작지/-/-/-/품/자개관/의/리/조/참 <br/>\
- 감통 : 프통/확통/통/통/통/통/감/감/통/감<br/><br/>\
<img src = "./img/KA49.png" style = "max-width:100%; height:auto;">\
',
 
// 발주 프로세스
'# 정의 : 발주 위한 활동 / 준비, 계약, 구축, 인수, 종료<br/>\
- 준비단계부터 계약, 구축과 인수 및 종료까지 이어지는 전체적인 프로세스 시스템 및 SW, 서비스 발주 위한 활동 <br/><br/>\
# 암기 <br/>\
- 프로세스 5 : 발제계공인 <br/>\
- 평가항목 5 : 계개관지전 <br/>\
- 3446 : 경이전 기성방환 경조품방 일시교유기비<br/><br/>\
# 프로세스 5 : 발주 > 제안 요청서 준비 > 계약 준비 및 변경 > 공급자 모니터링 > 인수 및 종료 <br/><br/>\
# 평가항목 5 <br/>\
- 개발계획 : 유사분야, 개발경험, 개발대상 산업의 이해도, 개발전략 <br/>\
- 개발 : 기능, 성능, 개발방법론, 개발환경 <br/>\
- 관리 : 경영상태, 사업수행조직, 품질보증방안, 관리방법론, 일정계획 <br/>\
- 지원부문 : 시험운영, 교육훈련, 유지보수방안, 기밀보안, 비상대책 <br/>\
- 전문업체 참여 및 상호협력부 : 전문업체 참여 상호협력 <br/><br/>\
<img src = "./img/발주프로세스.jpg" style = "max-width:100%; height:auto;">\
',
 
// 발주관리
'# 발주 관리 개선 현황 <br/>\
<img src = "./img/SWOrderProblem.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 문제점 <br/>\
1. 비용 측면 <br/>\
- 수주 기업 수익성 저조 <br/>\
- 공공 SW 사업의 유찰율 증가 <br/><br/>\
2. 제도 측면 <br/>\
- 계약제도 및 발주제도 복잡 <br/>\
- 분리발주 기피 현상 <br/><br/>\
3. 관리 측면 <br/>\
- 요구사항 상세화 미흡 <br/>\
- 사업관리 불안정성 <br/><br/>\
4. 전문성 측면 <br/>\
- 사후평가체계 미흡 <br/>\
- 사업정보 수집율 저조 <br/><br/>\
# 개선방안 <br/>\
1. 단기 개선방안 <br/>\
- 요구사항 상세화 : 기준강화, 사업기획단계 충실화 <br/>\
- 과업의 기준 정립 : 과업 변경 보상제도, 과업기준 정립 <br/>\
- 통합 발주 확대 : SW구축 유지사업 통합 발주, SW생명주기의 선순환 <br/>\
- SW 사업정보 저장소 강화 : 자료제출 의무화, 교차검증 수행 <br/><br/>\
2. 중장기 개선방안 <br/>\
- 사업계획 구체화 : 사업계획 단계 RFP 도출, 상세 기능 요구사항 도출 <br/>\
- 사후 정산제도 도입 : 과업대비 대가산정, 기능점수 중심 대가 <br/>\
- 사후 평가제도 도입 : 정당한 사업평가, 사전평가 중심의 체계 개선 <br/>\
- 공공 발주자 전문성 강화 : 발주자 역량 강화, SW 사업정보저장소 확충 <br/><br/>\
# 공공 SW 사업 선진화 사례 <br/>\
- 미국 : 사업계획 명확, 과업변경 인정 추가예산 확보 <br/>\
- 영국 : 민간 컨설팅(PMO)기업 적극 활용, 분리발주 전문가 제도 운영 <br/>\
- 핀란드 : FISMA SW 규모산정 방법론, Scope Manager 제도 운영 <br/>\
- 네덜란드 : NESMA SW 규모산정 방법론, 발주 컨설팅 시장 형성 및 확대 <br/><br/>\
* KPC 95회 관리 4교시 2번\
',

// [발주프로세스]- RFI
'# 정의 : 공급 업체 능력 파악 정보 요청서 <br/>\
- Request For Information <br/>\
- 발주자가 RFP작성 전 공급업체의 업무현황 및 수행능력을 파악하여 후보업체는 선정하고 제안요구사항 확인 위해 공급업체 요청하는 정보 요청서 <br/><br/>\
# 암기 : 구성항목(3) 사업요 <br/><br/>\
# 작성사항 : 사업개요, 발주업체정보, 주요요구사항\
',

// [발주프로세스]- RFP
'# 정의 : 제안서 작성 도움 문서 / 요구사항 체계적 정리 <br/>\
- Request For Proposal <br/>\
- 발주자가 특정 과제의 수행에 필요한 요구사항을 체계적으로 정리하여 제시함으로써 제안자가 제안서를 작성하는데 도움을 주기 위한 문서\
',
   
// 분할발주
'# 정의 : 소프트웨어 산업 구조 선진화 위한 중장기 전략 <br/>\
- 소프트웨어 설계와 단순개발 업무가 분리될 수 있도록 프로젝트 발주 자체를 프로세스 별로 나눠서 진행하는 제도 <br/><br/>\
# 구성요소 <br/>\
- 공정분할 : 요구사항, 설계, 구현, 시험, 운영 <br/>\
- 기능분할 : 공정에 상관 없이 기능별 분할 <br/>\
- 부품분할 : 공정, 서브시스템 내 특정 부품, 패키지 (기존의 분리발주) <br/>\
<img src = "./img/분할발주구성도.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 고려사항, 극복방안 <br/>\
1. 고려사항 <br/>\
- 사업수행 측면 : 행정처리 기간 증가, 예산 반영 한계, 책임소재 불명확, 자의적 예외기준 적용 <br/>\
- 수행역량 측면 : 초기 이해 부족시 진행 어려움, 기획,설계 역량 부족 <br/><br/>\
2. 극복방안 <br/>\
- 인식제고 : 행정처리기간 증가 < 개발기간 단축 <br/>\
- 예산반영 한계 : 인식전환, 기획동결 제도 <br/>\
- 책임소재 불명확 : 기획설계 담당 사업자가 개발단계 PMO로 참여, 산출물 합의 <br/>\
- 자의적 예외기준 적용 : 기준 명확화, 위원회 개최 <br/>\
- 초기 이해 부족시 진행 어려움 : 역량강화 <br/>\
- 기획, 설계 역량 부족 : 협력체계 도입 강화 <br/><br/>\
# 분리발주, 분할발주 비교 <br/>\
<img src = "./img/SepDev.png" style = "max-width:100%; height:auto;"><br/><br/>\
* 아이리포 24회 관리 4교시 3번\
',
  
// 난독화
'# 정의 : 역공학 방지의 기술 <br/>\
- 프로그램 코드의 일부 또는 전체를 변경하는 방법 중 하나로, 코드의 가독성을 낮춰 역공학에 대한 대비책을 제공하는 방법 <br/><br/>\
# 기술 분류 (구데제예)<br/>\
- 구획 난독화 : 형식 변화, 주석제거 <br/>\
- 데이터 난독화 : 변수 나누거나 합치기 <br/>\
- 제어 난독화 : 문장 묶는 단위 조절 <br/>\
- 예방 난독화 : 방법 봉쇄<br/><br/>\
# 적용사례 <br/>\
<img src = "./img/Obfuscation.png" style = "max-width:100%; height:auto;">\
',
  
// 함수형 언어
'# 개념 : 함수가 First Class 대상인 언어 <br/>\
- 명령형 언어의 부작용을 제거하기 위해 참조 투명성을 제공하는 수학적 Pure 함수의 모듈화를 이용한 프로그래밍을 지원하는 언어 <br/>\
<img src = "./img/FunctionalLanguageOverview.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 필요성 <br/>\
- 수학적 추상화 : 모듈의 재사용성 강화 <br/>\
- 최적화 : 이전 계산 활용 <br/>\
- 병렬화 : 경쟁 상태, DeadLock 해결 <br/><br/>\
# 비교 <br/>\
<img src = "./img/CommandFunction.png" style = "max-width:100%; height:auto;">\
',
  
// 로우코드
'# 정의 : 코딩없는 프로그램 개발 <br/>\
- 조직의 특정 프로세스 및 데이터 요구사항 처리를 위한 응용 프로그램을 신속하게 만들어 사용하기 위해 그래픽 사용자 인터페이스 및 기능 구성을 이용하여 응용 프로그램을 개발하는 환경 <br/><br/>\
# 장점 <br/>\
1. 개발관점 <br/>\
- 개발속도 향상 : Drap and Drop <br/>\
- 생산성 향상 : 오브젝트 연결 <br/><br/>\
2. 운영관점 <br/>\
- 저비용 관리 가능 : 개발 기간 단축 <br/>\
- 라이프사이클 관리 : App Marketplace 지원 <br/><br/>\
# 단점 <br/>\
1. 개발관점 <br/>\
- 제한된 커스터마이징 <br/>\
- 기업용 시스템 통합 어려움 <br/><br/>\
2. 운영관점 <br/>\
- 레퍼런스 부족 <br/>\
- 해외 솔루션 기술지원 한계 <br/><br/>\
3. 관리관점 <br/>\
- 보안이슈 존재 <br/>\
- 밴더 의존성 높음 <br/><br/>\
# 사례 <br/>\
- Appian : 인트라넷 내장 <br/>\
- MS Power Apps : 사용자 친화적 UI <br/>\
- Google App Maker : Drap and Drop <br/><br/>\
* 123회 관리 1교시 6번\
',
  
// 민간투자형 SW사업
'# 정의 : 국민생활의 편익 증진을 위해 민간의 자본과 기술을 활용하여 민간과 공공이 협력, 추진하는 공공 SW 사업 <br/><br/>\
# 종류 <br/>\
<img src = "./img/PublicPrivatePartnership.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 사례 <br/>\
1. 국내 <br/>\
- 서울시 스마트 교통카드 시스템 : BTO 방식, 서울시-LG CNS 컨소시엄 <br/>\
- 안산시 U-City 구축 : BTL 방식, 안산시-KT 컨소시엄 <br/><br/>\
2. 해외 <br/>\
- 싱가포르 전자 통관만 TradeNet : 서류 신고/납부 업무 통합 <br/>\
- 뉴욕시 LinkNYC : 공중전화부스, 뉴욕시-CityBridge 협력 \
',
  
// 정보시스템 운영 성과관리
'# 정의 : 정보시스템 운영타당성을 판단하기 위한 정해진 기준에 따라 성과를 측정하고, 그 결과에 따라 정보시스템의 효율적 운영을 위한 유지관리유형을 결정하여 업무 및 비용 측면의 성과를 높이기 위한 제반활동 <br/><br/>\
# 적용근거 <br/>\
- 전자정부법 제45조 제3항 및 제4항 : 행정기관등의 장이 그 소관 정보시스템 운영타당성 판단 <br/>\
- 정보시스템 운영 성과관리지침 <br/><br/>\
# 지표 <br/>\
1. 비용측면 <br/>\
- 운영의 적정성 : 누적 유지보수 비율 <br/>\
- 유지의 용이성 : 투입 운영유지비용 증감률 <br/>\
- 비용의 효율성 : 평균 운영유지비용 증감률 <br/><br/>\
2. 업무측면 <br/>\
- 업무수행 영향도 : 기능 활용도 <br/>\
- 사용상의 편의성 : 사용 편의성 <br/>\
- 업무성과 달성도 : 목표대비 성과 달성도 / 업무성과 증감률 <br/><br/>\
# 성과측정 절차 <br/>\
1. 1차 성과측정 절차 <br/>\
- 대상 식별 : 5년이상 운영 정보시스템 <br/>\
- 기초데이터 수집 <br/>\
- 데이터 신뢰성 점검 <br/>\
- 성과측정 <br/><br/>\
2. 2차 성과측정 절차 <br/>\
- 유형 분류 : 유지관리, 유형별 재분류 <br/>\
- 자원 효율성 측정 <br/>\
- 구축방안 정의: 현행분석, 요구사항정의. 범위결정, 구축방안 도출 <br/>\
- 투자타당성 분석 : 경제성, 정성적 효과 <br/>\
- 최종 의사결정 : 유지, 재개발, 통폐합, 폐기 <br/><br/>\
* 116회 응용 2교시 6번\
',
 
// 공공기관 사업자 선정
'# 정의 : 국가계약법, 지방계약법, 협상에 의한 계약체결 기준, 행정기관 및 공공기관 정보시스템 구축 운영 지침 <br/>\
- 국가/지방 계약법을 근거로 한 구축업체 선정 방식 <br/><br/>\
# 종류 <br/>\
- 협상에 의한 계약 체결 방식 <br/>\
- 낙찰자 결정 방식 <br/>\
- 경쟁적 대화 방식 : 아이디어 협의, 경쟁 통한 최적 결정 <br/><br/>\
* 라이지움 88회 관리 2교시 2번<br/>\
* 122회 관리 4교시 2번\
',
 
// 협상에 의한 계약체결 방식 
'# 정의 : 제안서, 가격 입찰서 <br/>\
- 제안서나 가격 입찰서를 받아 평가 후 협상 절차를 거쳐 낙찰자 선정 방식 <br/><br/>\
# 특징 <br/>\
- 절차 : 입찰공고 > 제안서 제출 > 제안서 평가 > 적격자와 협상 > 협상 성립 > 계약 체결 <br/>\
- 근거 법령 : 국가계약법 시행령 43, 지방계약법 시행령 43 <br>\
- 대상 : 고도의 기술력, 전문성, 안전성 필요, 지식기반 고부가가치 산업 <br/>\
- 평가항목(정보화사업) : 기술능력(90) + 입찰가격(10) (일반 80/20) <br/><br/>\
# 평가항목 상세 <br/>\
1. 기술능력 평가 <br/>\
- 정성 평가 : 전략, 방법론, 수행계획, 수행기반, 프로젝트 관리/지원, 하도급 계획의 적정성 <br/>\
- 정량 평가 : 경영상태, 수행실적, 상생협력, 하도급금액 적정성 <br/><br/>\
2. 입찰가격 평가 <br/>\
- 추정가격 80% 이상 : 평점 = 입찰가격평가배점한도 x 최저입찰가격 해당입찰가격 <br/>\
- 추정가격 80% 미만 : 평점 = 입찰가격평가배점한도 x (최저입찰가격 / 추정가격의 80% 상당가격) + [2 x (추정가격의 80% 상당가격 - 해당입찰가격) / (추정가격의80% 상당가격 - 추정가격의 60% 상당가격)] <br/><br/>\
* 라이지움 88회 관리 2교시 2번<br/>\
* 122회 관리 4교시 2번\
',
 
// 낙찰자 결정 방식 
'# 정의 : 규격입찰, 가격입찰, 동시 <br/>\
- 규격(기술) 입찰과 가격 입찰을 동시 실시, 적격자 대상으로 가격 평가 <br/><br/>\
# 특징 <br/>\
- 절차 : 입찰공고 > 규격,가격입찰 > 적격자 선정 > 가격 개찰 > 최저가 낙찰 > 계약체결 <br/>\
- 근거 법령 : 국가계약법 시행령 44, 지방계약법 시행령 45 <br/>\
- 대상 : 미리 적절한 규격 작성 곤란 <br/>\
- 평가 항목 : 세부 기준 없음, 공고된 규격(기술)과의 적합성 평가 <br/><br/>\
* 라이지움 88회 관리 2교시 2번<br/>\
* 122회 관리 4교시 2번\
',
 
// Mashalling
'# 정의 : App - Data - App <br/>\
- 한 객체의 메모리에서 표현방식을 저장 또는 전송에 적합한 다른 데이터 형식으로 변환하는 과정 <br/><br/>\
# 용도 <br/>\
- RPC : 프로세스, 스레드간 데이터 전송 <br/>\
- COM : COM 라이브러리 인스턴스들의 경계를 지날 때 <br/>\
- .NET : P/Invoke 프로세스 관리되지 않은 타입과 CLR 타입간 변화 <br/>\
- Mozilla Application Framework : XPCOM 기술을 이용하는 스크립트와 응요 프로그램내 활용 <br/><br/>\
* 라이지움 82회 관리 1교시 9번\
',
 
// ALM
'# 정의 : 융합(비즈니스 요건 관리, 개발 프로세스) / 자동화 툴 이용 / 개발 필요 활동 관리 / 소프트웨어 관리 체계 <br/>\
- Application Lifecycle Management <br/>\
- 비즈니스 요건 관리 부분과 실제 소프트웨어 개발 프로세스를 융합하고 자동화 툴을 이용하여 개발에 필요한 활동들을 관리하는 소프트웨어 관리체계 <br/><br/>\
# 구성도 <br/>\
<img src = "./img/ALM_Structure.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 구성요소 <br/>\
- CTIP : ALM 적용하기 위한 플랫폼 <br/>\
- 프로세스 <br/>\
- 사람 <br/><br/>\
# 구성요소 <br/>\
1. 이슈 관리 <br/>\
- 일정 관리 : 진행 상황 실시간 추적, 마일스톤 관리 <br/>\
- 위험도 관리 : 작업별 우선순위, 위험도 관리 <br/>\
- 작업 관리 : 작업 진척사항 모니터링 <br/><br/>\
2. 개발환경 관리 <br/>\
- 표준개발/빌드/테스트 : 개발환경 통합, 빌드, 테스트 환경 제공 <br/>\
- 코딩 규칙 검사 : 코드 가독 품질 향상 <br/>\
- 테스트 커버리지 검사 : 테스트 커버리지 측정 및 관리 <br/><br/>\
3. 소스 관리 <br/>\
- 소스 공유 : 팀원 소스 공유, 공동 작업 <br/>\
- 변경내역 추적 및 관리 : 산출물 변경 이력 관리 <br/>\
- 브렌치별 버전 관리 : 릴리즈별 산출물 관리 <br/><br/>\
4. 빌드 자동화 <br/>\
- 통합 빌드 : 코드 통합 (Daily Build) <br/>\
- 자동 테스트 : 빌드시 자동 테스트 오류 검출 <br/>\
- 오류검사, 복잡도 분석 : 코딩 룰, 복잡도 분석 위험도 높은 코드 검출 <br/><br/>\
# ALM Open Source Solution <br/>\
- Redmine : 프로젝트, 요구사항, 이슈, 변경, 테스트 관리 역할 솔루션 <br/>\
- Eclipse : 다양 플러그인 통한 개발 보조, 설계 도구, 업무관리, 형상관리 연동 <br/>\
- Jenkins : 지속적 통합 빠르고 쉽게 구축 <br/>\
- SonarQube : 실시간 소스 코드 품질 현황 가시화 솔루션 <br/><br/>\
* 121회 관리 1교시 5번\
',

// SW Visualization
'# 정의 : 프로세스 관리 목적 / 시각화 문서화 / SW 개발 품질관리 수행 방법 <br/>\
- 소스코드와 개발 프로세스를 관리하는 것을 목적으로 하고, <font color = "red">시각화</font>와 <font color = "red">문서화</font>를 그 방안으로 하여 SW 개발 품질관리를 수행하는 전략 <br/><br/>\
<a href = "./doc/SWV.pdf">참고문헌</a><br/><br/>\
# Process <br/>\
<img src = "./img/SWV_Overview.png" style = "max-width:100%; height:auto;"><br/>\
<img src = "./img/SWV_Visualization.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 도구, 지표 <br/>\
- 요구관리 : Redmine, Jira, Gant 차트 / 요구사항 만족도 <br/>\
- 구현 : Eclipse, Visual Studio, VIM / 구현 진척도 <br/>\
- 테스트 : TestLink, SonarQube, JUnit / 테스트 완료율 <br/>\
- 형상관리 : RCS, SVN, Git, Subversion / 형상 일치율 <br/>\
- 지속적 통합 : Jenkins, Open Monitering <br/><br/>\
# 시각화 <br/>\
1. 프로세스 시각화 : 개발 과정 상태 파악, 정보 제공 <br/>\
- 지표 : 개발과정(요구사항, 형상관리), 품질검증(동적 테스트, 정적 테스트), 결함 수준 <br/>\
- 시스템 : 요구사항 관리, 구현, 프로세스, 형상관리 <br/>\
- 구성원 : BA, QA, Architect, Tester, Developer <br/><br/>\
2. 소스코드 시각화 : 복잡성 증가 방지 위한 내부 구조 품질 관리 <br/>\
- 역공학 : 추상 수준 표현물 복원 위한 시스템 분석 기법 <br/>\
- 내부 설계 : 추상화, 모듈화, 캡슐화 <br/>\
- 품질 지표 : 결합도, 응집도 <br/><br/>\
# 문서화 <br/>\
1. 프로세스 문서화 : 내부적 관리 데이터 -> 산출물 형태 발생 <br/>\
- 도구 : Redmine, Impasse <br/><br/>\
2. 소스코드 문서화 : 개발자 업무 공백 최소화 방안 활용 <br/>\
- 도구 : JavaDoC, Doxygen <br/><br/>\
# SW Visualiztion의 기대효과 <br/>\
- 개발상태 실시간 파악 : 요구사항 구현 <br/>\
- 객관적, 정량적 분석 : 품질지표<br/>\
- 개발의 투명성 : 진척 상황 <br/>\
- 자동화에 의한 편의성 : SW 관리 <br/>\
- 문서 작업의 간소화 : SW 개발관리 문서화 <br/>\
- 품질기반의 개발 문화 : 미래형 SW 개발 문화 기반 <br/><br/>\
* KPC 113회 대비 1일차 관리 1교시 2번\
',

// SW안전 확보 지침
'# 정의 : 외부 침입 없이 / 사람 생명, 신체 재산 피해 / 충분 대비 상태 <br/>\
- 사이버 공격 등의 외부 침입 없이, 소프트웨어 내부의 오작동과 안전기능 마비등으로 발생할 수 있는 사람의 생명, 신체 또는 재산에 대한 피해에 충분히 대비된 상태 <br/><br/>\
# 주요 내용 <br/>\
1. 총칙 : 목적, 정의, 적용범위, 업무 및 담당자, 대상 소프트웨어 <br/>\
2. SW 개발단계 안전 확보 : 안전 요구사항, 위험원 분석, 설계 및 구현, 검증 <br/>\
3. SW 운영단계 안전 확보 : 운영관리 계획, 위험 분석, 안전 점검, 변경 관리 <br/>\
4. 그외 SW 안전확보 사항 : 정보공유, 기반확보, 기타사항, 재검토기한 <br/><br/>\
# 증진 방안 <br/>\
- 문화 강화 <br/>\
- 산업 독립 <br/>\
- 전문가 육성 <br/>\
- 산업 활성화 <br/>\
- 평가, 수준 따른 안전 활동 <br/><br/>\
* ITPE 7회 관리 3교시 5번\
',

// Integrated Development Equipment
'# 정의 : 코딩, 디버깅, 컴파일, 배포 / 하나의 프로그램 / 처리 환경 제공 소프트웨어 <br/>\
- 코딩, 디버깅, 컴파일, 배포 등 프로그램 개발에 관련된 모든 작업을 하나의 프로그램 안에서 처리하는 환경을 제공하는 소프트웨어 <br/><br/>\
# 개념도 <br/>\
<img src = "./img/IDE.png" style = "max-width:100%; height:auto;"><br/><br/>\
# 종류 <br/>\
- Eclipse : Java, C, C++, PHP, JSP / IBM, EClipse <br/>\
- VS : Visual C, Basic, C++, C#, F# / MS <br/>\
- Delphi : Delphi, C++ Builder, Object Pascal / 엠바카데로 테크놀러지 <br/>\
- X Code : C, C++, Java, Pascal, C#, Perl, D, Swift / Apple <br/>\
- NetBeans : Java, JS, C, C++, PHP, JSP, Node.js / Sun microsystems <br/>\
- PyCharm : Python / JetBrain <br/>\
- RStudio : R / R Studio Team <br/>\
- Android Studio : Java, Kotlin / Google <br/><br/>\
# Cloud IDE <br/>\
- AWS Cloud9 IDE : Serverless App <br/>\
- 구름 IDE : 협업 기능 제공 <br/>\
- Eclipse Che : RESTful Web Service 제공, SDK, Doker <br/><br/>\
* ITPE 8회 관리 1교시 13번\
',

// SW 사업 관리감독 항목
'# 공공부문 SW 사업 법제도 관리감독 및 지원가이드 개요 <br/>\
- SW 사업의 관리, 감독등을 위해 국가기관등의 장이 발주하는 SW사업의 법령 준수 여부를 검토하고, 필요시 해당기관에 법제도 준수를 권고하여 그 반영여부를 점검, 관리하기 위한 가이드라인 <br/>\
- 법적근거 : SW 진흥법 제 57조, 동법 시행령 제 66조 제 1항 제 15호 <br/><br/>\
# 로드맵 <br/>\
<img src = "./img/SW_2021.png" style = "max-width:100%; height:auto;"><br/><br/>\
# SW 진흥법 소관 항목 <br/>\
<font color = "blue">1. 과업심의 위원회</font> <br/>\
- 개요 : 소프트웨어 과업 내용 확정 및 변경 따른 금액,기간 조정 심의, 계약 반영 <br/>\
- 법적근거 : 50조 <br/>\
- 적용대상 : 국가기관 등이 발주하는 소프트웨어 사업 <br/>\
- 적용예외 : 경미한 변경 합의, 재심의 필요, 천재지변 <br/><br/>\
2. 상용SW 직접구매 및 SW 품질성능 평가시험(BMT) <br/>\
- 개요 : 일정 규모 이상 소프트웨어 도입 필요 사업, 상용 SW만 별도 분리 개별 계약 실시 <br/>\
- 법적근거 : 54조 <br/>\
- 적용대상 : 조달청 등록 SW포함(5천 미만 포함), 5천만원 이상 <br/>\
- 적용예외 : 시스템 통합 불가능, 현저한 비용 상승 초래, 비효율적 경우 (제외사유서 첨부) <br/><br/>\
3. 중소 소프트웨어 사업자의 참여지원 <br/>\
- 개요 : 중소 소프트웨어사업자 참여확대, 대기업 참여 하한 적용 <br/>\
- 법적근거 : 48조 <br/>\
- 적용대상 : 국가기관등의 장이 발주하는 소프트웨어 사업 <br/>\
- 적용예외 : 유찰 사업, 국방,외교,치안,전력 사업, 민간투자대상사업, 과기정통부 장관 인정 사업 <br/><br/>\
4. 하도급 제한 <br/>\
- 개요 : 하도급 대해 사업금액 50% 초과 제한, 재하도급 금지, 발주기관 승인 <br/>\
- 법적근거 : 51조 <br/><br/>\
<font color = "blue">5. SW사업 작업장소(원격개발)</font> <br/>\
- 개요 : 원격개발 활성화, 유연한 근무 환경 조성, 공급자 제시 장소 우선 검토 <br/>\
- 법적근거 : 49조 3항 <br/>\
- 유의사항 : 장소, 설비, 환경, 비용 명확 협의 / 무상 제공 간주 <br/><br/>\
6. SW사업 산출물 활용 보장 <br/>\
- 개요 : 지식재산권 발생시 공동소유 원칙 <br/>\
- 법적근거 : 국유재산법 제65조의 12 <br/>\
- 적용대상 : 계약목적물의 지식재산권이 발생하는 SW사업 <br/>\
- 적용예외 : 불승인(비밀 해당, 국가 안보 영향), 소유권(특수성-안전,국방,외교) <br/><br/>\
7. 개발SW의 공동활용 사전명시 <br/>\
- 개요 : 타기관 공동 활용하는 경우 대상기관의 범위 등 계약서 반영 <br/>\
- 법적근거 : 용역계약일반조건 제 56조 <br/>\
- 적용대상 : 소프트웨어 개발사업 <br/>\
- 유의사항 : 공동활용 계획 없는 경우에도 없음을 명시 <br/><br/>\
8. 하자담보 책임기간 및 범위 <br/>\
- 개요 : 1년 이내 하자 대해서 책임 부과 <br/>\
- 법적근거 : 60조 <br/>\
- 유의사항 : 하자담보책임 벗어난 요구사항 기재 금지 <br/><br/>\
9. 특정규격 명시 금지 <br/>\
- 개요 : 경쟁참가자 자격 제한 상표, 규격, 모델 지정 금지 <br/>\
- 법적근거 : 정부입찰,계약 집행기준 5-4-5 <br/>\
- 유의사항 : 특수 성능 반영시 기술협약 체결, 공고 명시 <br/><br/>\
10. 협상에 의한 계약 방식 적용 <br/>\
- 개요 : 협상에 의한 계약 체결방식 or 경쟁적 대화 의한 체결방식 우선 적용 <br/>\
- 법적근거 : 49조 1항 <br/><br/>\
<font color = "blue">11. 기술능력 평가비중(90%) 도입 </font><br/>\
- 개요 : 제안서 평가시 종합 평가, 기술 평가 비율 90% <br/>\
- 법적근거 : 행정기관 및 공공기관 정보시스템 구축 운영지침 제 18조 <br/>\
- 유의사항 : 세부평가기준 지정가능, 80:20 적용 경우 HW비중 50% 이상, 내부 규정 명시 <br/><br/>\
12. SW 기술성 평가기준 적용 <br/>\
- 개요 : 기술력 우수 사업자, 상용소프트웨어 선정 위한 평가기준 마련 <br/>\
- 법적근거 : 49조 2항<br/>\
- 적용대상 : 정보시스템 구축운영 등 소프트웨어사업 <br/>\
- 유의사항 : 특성별 가감 조정 가능, 각항목 30점 초과x, 상생협력, 하도급계획 적정성 5점이상 <br/><br/>\
13. SW사업 제안서 보상 <br/>\
- 개요 : 20억원 이상 사업, 낙찰자로 결정되지 아니한자 중 제안서 평가 결과 우수자 일부 보상 <br/>\
- 법적근거 : 52조 <br/>\
- 적용대상 : 총사업예산 20억원 이상 소프트웨어 개발사업 <br/>\
- 유의사항 : 저작권법 침해 의한 기술협상 등 과정 활용 지양, 발주기관 자유 활용 가능 <br/><br/>\
<font color = "blue">14. 요구사항 상세화</font> <br/>\
- 개요 : 제안요청서 세부적 요구사항 명확 정하여 명시,공개 <br/>\
- 적용대상 : SW개발 사업, 시스템운용환경 구축사업, 유지관리 사업, ISP <br/>\
- 도출과정 : 비즈니스 > 사용자 > SW 요구사항 > SW 요구사항 명세 <br/><br/>\
<font color = "bleu">15. SW 사업 적정 사업기간 산정</font> <br/>\
- 개요 : 사업수행에 필요한 적정 사업기간 산정 <br/>\
- 법적근거 : 45조 <br/>\
- 적용대상 : SW개발과 관련된 과업이 포함된 사업 <br/>\
- 적용예외 : ISP, BPR(업무재설계), 운영유지관리, 시스템 운영 환경구축 등 SW 개발 미포함 사업 <br/><br/>\
<font color = "blue">16. 투입인력 요구 및 관리 금지 </font><br/>\
- 개요 : 기능점수 or SLA 방식 산정 한 경우 투입 인력 사항 요구,관리 불가 <br/>\
- 법적근거 : 소프트웨어사업 계약 및 관리감독에 관한 지침 제 11조 3항 <br/>\
- 적용대상 : SW 개발비, 재개발비 사업대가 FP방식 or SLA 방식 산정 사업 <br/>\
- 적용예외 : 투입공수 방식 사업, DB구축, 컨텐츠 개발, 상용SW 구매유지 관리등 <br/><br/>\
17. SW사업 영향평가 <br/>\
- 개요 : 국가기관등의 장이 예산편성, 사업발주, 소프트웨어 시장 침해등 산업 생태계 영향 검토, 사전조정 제도 <br/>\
- 법적근거 : 43조 <br/>\
- 적용대상 : SW 기획, 구축, 유지보수, 정보화사업 등 공공SW사업 <br/>\
- 적용예외 : 상용소프트웨어구매,설치 및 유지관리, 국가안보,치안,외교, 민간투자형 SW사업, 단일 기관 내부사용 목적, DB구축, 단순 유지 관리 사업 <br/><br/>\
<font color = "blue">18. 소프트웨어사업정보 제출 </font><br/>\
- 개요 : SW사업 실적 데이터 축적, SW사업정보 저장소 운영 통한 예산수립, 대가산정 참고 제공 <br/>\
- 법적근거 : 46조 <br/>\
- 적용대상 : SW 개발 및 재개발 사업, 유지보수 및 운영 사업 <br/><br/>\
* 라이지움 91회 관리 3교시 4번\
',

// [SW사업]- SW개발사업 적정 사업기간 산정
'# 정의 : 진흥법 45조, 소프트웨어 계약 및 관릭마독에 관한 지침 / 적정 기간 산정 <br/>\
- 소프트웨어 사업의 개발규모나 개발 특이사항 등 적정 사업기간 산정에 영향을 미치는 환경요인을 종합적으로 고려하여 합리적이고 객관적인 사업 기간을 확보함으로써 소프트웨어 개발상버의 품질 향상과 소프트웨어 산업 경쟁력 확보 위한 기간 산정 <br/><br/>\
# 사업판단 기준 <br/>\
1. SW 개발사업(재개발 사업) : 산정대상 <br/><br/>\
2. SW 개발사업 + ISP 사업등 컨설팅 사업 <br/>\
- 산정 대상 <br/>\
- ISP 사업기간 별도 산정, 추가하여 총 사업기간 산정 <br/><br/>\
3. SW 개발사업 + 하드웨어 등 구매 사업  <br/>\
- SW 개발 사업 영향 x : 산정 대상 <br/>\
- SW 개발 사업 영향 o : SW 개발사업 적정 사업기간 + 구매 및 설치기간 고려 조정 <br/><br/>\
4. SW 개발사업 + SW 유지관리, 운영 사업 <br/>\
- SW 유지관리, 운영 사업에 포함된 소규모 개발 사업 : 별도 산정 불필요 <br/>\
- SW 개발 사업 완료 이후 유지관리,운영 사업 : 개발 사업기간 + 유지관리,운영 사업기간 <br/><br/>\
# 절차 (<font color = "red">FP / 사업기초 자료 / 유사사업 자료 / 기타 특이사항 </font>)<br/>\
1. 사전준비 <br/>\
- FP 산정 : 대상업무, 요구사항 상세화, FP(정통,간이법) 결정 <br/>\
- 사업기초자료 수집 : 위원간 편차 목표(15% 이내) <br/>\
- 유사사업자료 수집 : 개발유형, 사업분야, 계약방식, 방법론 <br/>\
- 기타 특이사항 식별 : 특이사항 평가표 <br/><br/>\
2. 과업심의 위원회 구성 <br/>\
- 위원회 구성 : 위원장 포함 5인이상 10인이내 <br/>\
- 위원회 구성 세부사항 : 외부인력 과반수 이상, 성별고려 위촉(조교수, 5급 공무원 or 상응 공공기관, SWE 6년 경력, 학식 경험, 국가기관장 인정) <br/><br/>\
3. 위원별 산정서 작성 (검토 후 위원별 제출) <br/>\
- 기능점수 산정표를 활용한 산정서 작성 : FP, 1인 생산성, 기간, 인력 산정법 타당성 <br/>\
- 사업기초자료를 활용한 산정서 작성 : 사업 설명, <font color = "red">이해 논의</font>, 기간 추정 <br/>\
- 유사사업자료를 활용한 산정서 작성 : 사업 설명, 논의, <font color = "red">차이분석</font>, 기간 추정<br/>\
- 기타 특이사항 산정서 작성 : 영향 미치는 특이사항 <br/><br/>\
4. 의견교환 및 조정 <br/>\
- 기능점수 산정표 기반 사업기간 의견교환 및 조정 : 위원별 동일 확인 <br/>\
- 사업기초자료 기반 사업기간 의견교환 및 조정 : 결과 취합 및 편차 분석 - 조정 or 3단계 <br/>\
- 유사사업자료기반 사업기간 의견교환 및 조정 : 결과 취합 및 편차 분석 - 조정 or 3단계 <br/>\
- 기타 특이사항 기반 사업기간 의견교환 및 조정 : 타당성 검토 - 조정 or 3단계 <br/><br/>\
5. 종합산정서 작성 <br/>\
- 종합산정서 작성 : 목표 편차 이내 조정 된 경우 작성 <br/><br/>\
6. 종합산정서 제출 <br/>\
- 종합산정서 등 제출 : 산정서 ,서약서를 발주자에게 제출 <br/><br/>\
# 사업기간 산정방법별 특징 <br/>\
1. FP <br/>\
- 특징 : 상세 요구사항 정의, 산정 자료, 정량적 데이터 활용 <br/>\
- 필요 핵심요소 : FP, FP/MM, 우러 투입 인원 <br/>\
- 필요 지식 : FP 측정 규칙 및 경험, 해당업무 지식 <br/>\
- 정확도 : 높음 <br/>\
- 장점 : 개발규모, 표준 생산성 근거 산정 <br/>\
- 단점 : 상세 요건 정의 및 FP 작업 시간 필요 <br/><br/>\
2. 사업기초 자료 <br/>\
- 특징 : 경험기반, FP 미반영 요소 반영 가능(HW, 상용 SW, NW장비 설치등) <br/>\
- 필요 핵심요소 : 상세화 요구사항, 사업기간 산정 전문가 <br/>\
- 필요지식 : 유사사업 발주 및 수행 경험 <br/>\
- 정확도 : 낮음 <br/>\
- 장점 : 적정 사업기간 산정, 소요기간 짧음 <br/>\
- 단점 : 주관적 경험 의존, 정확도 낮음 <br/><br/>\
3. 유사사업 자료 <br/>\
- 특징 : 유사 과거 수행사업 정보 활용가능 경우 사용 <br/>\
- 필요 핵심요소 : 유사사업 실적정보, 대상사업 특성 정보 <br/>\
- 필요지식 : 유사사업 발주 및 수행 경험 <br/>\
- 장점 : 정확도 높음 <br/>\
- 단점 : 유사사업 자료 부족, 없을 경우 사용 불가 <br/><br/>\
* KPC 100회 관리 5번\
',

// 상용SW직접구매(분리발주)
'# 정의 : SW 생태계 활성화를 위한 제도 <br/>\
- 일정 규모이상의 SW 도입이 포함된 사업에서 상용 SW만을 별도 분리하여 개별적으로 계약 실시하는 제도 <br/><br/>\
# 법적근거 <br/>\
- 소프트웨어산업 진흥법 : 제20조(국가기관등의 소프트웨어 사업계약) <br/>\
- 소프트웨어 계약 및 관리감독에 관한 지침 제 7조(상용소프트웨어 직접 구매대상) <br/><br/>\
# 적용대상 : 1차 충족시 2차 하나라도 해당될 경우 대상 사업 <br/>\
1. 1차조건 : 3억원 이상(VAT 포함사업) <br/><br/>\
2. 2차조건 <br/>\
- 조달청 종합 쇼핑몰 등록 SW 포함된 경우(5천만원 미만 포함) <br/>\
- 동일 SW 다량 구매 5천만원 초과 하는 경우 (5천만원 이상 소프트웨어로 간주) <br/>\
- SW 품질 인증(GS), CC, NEP, NET 및 국정원 검증/지정 SW가 포함된 경우 <br/><br/>\
# 예외대상 (<font color = "red">비지효</font>)<br/>\
- 현저한 비용상승 초래 : 토압 불가능, 비용상승 초래 <br/>\
- 현저한 기간 지연 : 사업기간 내 완성 불가 <br/>\
- 비효율적 판단 : 행정업무 증가 외 직접 구매 공급 비효율적 판단 <br/><br/>\
* KPC 101회 관리 1교시 13번\
',

);
