<script type = "text/javascript">
// varation
  var index=
  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19];
  var question =
  ['Unix OS', 
   'Loader',
   'Dispatcher',
   'Interrupt',
   'Process, Thread',
   'Buffering', 
   'SPOOLing',
   '결함허용 시스템(FTS:Fault Tolerant System)',
   '고가용성(High Availability)',
   '[고가용성]-NUMA(Non-Uniform memory Access) 시스템',
   '[고가용성]-교착상태',
   '우선순위역전현상(Priority Inversion)',
   'WDT, Watchidog Timer',
   'Virtual Memory',
   'Cache Memory',
   'FeRAM',
   'GPGPU',
   '[GPGPU]-CUDA',
   'Fabric Computing',
   'Quantum Computing',
  ];
  var answer = 
  ['다양한 시스템 사이에서 서로 이식할 수 있고, 멀티 태스킹과 다중 사용자를 지원하도록 설계된 운영체제 <br/><br/> 운영체제;다양한 시스템,Multi Tasking, Multi User',
   '컴퓨터 내부로 정보를 들여오거나 로드 모듈을 디스크 등의 보조기억장치로부터 주기억 장치에 적재하는 시스템 소프트 웨어 <br/><br/> 시스템 소프트웨어; 로드 모듈을 보조 기억장치 -> 주기억 장치로 적재',
   'CPU 스케쥴러가 선정한 프로세스를 자원을 할당하여 실행하도록 하는 모듈, CPU의 제어권을 STS(Short-Term Scheduling)에 의하여 선택된  Process에게 넘겨주는 모듈<br/><br/> 모듈; CPU 스케쥴러, 프로세스, 자원할당, 실행, STS', 
   '시스템의 현재 진행중인 작업을 중단시키고 예외 상황을 우선 처리하기 위해 상태를 알리는 매커니즘<br/><br/> 매커니즘; 현재 작업 중단, 예외상황 우선처리',
   'Process : 프로그램을 구동하여 메모리에 적재된 상태로 실행되는 하나의 작업단위 (CODE, DATA, HEAP, STACK) 영역 독립 <br/> Thread : 하나의 프로세스 내에서 리소스를 공유하며 독립적으로 수행 가능한 단위 명령의 집합 (CODE, DATA, HEAP, STACK) 영역 공유 <br/><br/> Process : 작업단위, 메모리 적재<br/> Thread : 명렁집합, 프로세스 내',
   '어떤 장치로부터 다른 장치로 데이터를 일방통행으로 전송할 때 양자의 속도차를 수정하기 위하여 중간에서 데이터를 일시적으로 기억 장소에 축적하는 기법<br/><br/>일방 통행 전송 속도차, 중간 데이터 일시 기억 축적',
   '주변 장치와 컴퓨터 처리 장치간에 데이터를 전송할 때 처리 지연을 단축하기 위해 보조 기억 장치를 완충 기억장치로서 사용하는 것.<br/><br/> 주변장치, 컴퓨터 처리장치, 보조기억장치 사용',
   '고장이 발생하거나 프로그램에 오류가 있더라도 시스템 전체에 장애가 발생하지 않게 구성한 시스템 <br/><br/> 예외처리 시스템',
   '2대 이상의 시스템을 하나의 클러스터로 묶어서 한 시스템의 장애 발생시 다른 시스템으로 신속히 서비스 재개, Single Point of Failure를 방지하는 기술 <br/><br/> Stand by Service, Single Point of Failure 방지',
   '멀티프로세싱 시스템에서 지역적으로는 메모리를 공유하며, 성능을 향상시키고, 시스템 확장성이 있도록 마이크로프로스세서 클러스터를 구성하기 위한 방법 <br/><br/>멀티프로세싱 시스템,  메모리 공유, 마이크로 프로세서 클러스터 구성',
   '서로 다른 둘 이상의 프로세스들이 상대 프로세스가 차지하고 있는 자원을 기다리는 무한 대기 상태<br/><br/> 프로세스, 자원대기',
   '낮은 우선순위를 가진 Task에 의해 높은 우선위를 가진 Task가 임계 영역 대기 때문에 Block 되어 수행되지 못하는 현상<br/><br/> 임계영역대기, Block',
   '외부잡음이나 비정상적인 루프나 무한루프 등에 빠졌을 경우, 사용자에 의해 더이상 시스템의 통제가 불가능한 상황으로 치달았을 경우 시스템을 리셋하는 하드웨어 디바이스<br/>\
   유형 : 내부 워치독 타이머, 외부 워치독 타이머<br/>\
   하드웨어 설계 방식 : 단단계 워치독(Single Stage), 다단계 워치독(Multi Stage)',
   '주기억 장치를 실제보다 더 크게 존재하는 것처럼 보이게 하는 장치',
   'CPU 내에 있는 고속으로 액세스가 가능한 기억장치, 버퍼메모리, 로컬메모리<br/><br/>\
   고속 액세스 기억장치',
   'DRAM과 비슷한 구조를 갖고 있으나 강유전체를 가지고 있어 비휘발성을 가지며 기존 메모리에 비해 빠른 속도, 높은 쓰기/지우기 횟수, 낮은 전력을 사용하는 차세대 비휘발성 메모리<br/><br/>차세대 비휘발성 메모리',
   'GPU를 그래픽 연산뿐 아니라 일반 컴퓨팅 영역에도 활용하고자 하는 컴퓨팅 체계',
   '[Compute Unified Device Architecture] 범용적인 프로그램을 개발할 수 있도록 프로그램 모델; 프로그램 언어,컴파일러,라이브러리,디버거,프로파일러를 제공하는 병렬 컴퓨팅 플랫폼',
   '다수의 노드(프로세서, I/O장치 등)와 이를 연결하는 링크가 있는 시스템',
   '얽힘이나 중첩등의 양자역학적 현상을 이용하여 큐비트 단위로 자료를 처리하는 컴퓨팅 기법<br/><br/><img src="./img/CA_19.PNG""',
  ];
  var current;
  var bInit = 0;

// function 
  function next()
  {
    if ( bInit != 0 )
    {
      index.splice( current, 1);
      question.splice( current, 1);
      answer.splice( current, 1);
    }
    else
    {
      bInit = 1;
    }

    if( index.length == 0 )
    {
      alert("All question resolved!");
    }
    else
    {
      drawScreen()
    }
  }

  function getAnswer()
  {
    document.write('Answer : ' + answer[current] + '<br/><br/>');
  }

  function drawScreen()
  {
    document.body.innerHTML = "";
    document.write('** [CA] Memorization Note 1 **' + '<br /><br />');
    document.write('<button id="next" onclick="next();">Next</button>' + ' ');
    document.write('<button id="answer" onclick="getAnswer();">Answer</button>' + '<br /><br />');

    document.write( 'Left Questions : ' + index.length + '<br /><br />');
    current = Math.floor(Math.random() * index.length)
    document.write( 'Question : ' + question[current] + '<br /><br />');
  }

  document.write('<head> <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, maximum-scale=1.0, minimum-scale=1.0" </head>');
  document.write('** [CA] Memorization Note 1 **' + '<br /><br />');
  document.write('<button id="next" onclick="next();">Next</button>');

</script>
